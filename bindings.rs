/* automatically generated by rust-bindgen 0.59.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
    pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
    pub const _SAL_VERSION: u32 = 20;
    pub const __SAL_H_VERSION: u32 = 180000000;
    pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
    pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
    pub const _CRT_PACKING: u32 = 8;
    pub const _HAS_EXCEPTIONS: u32 = 1;
    pub const NULL: u32 = 0;
    pub const _HAS_CXX17: u32 = 0;
    pub const _HAS_CXX20: u32 = 0;
    pub const _HAS_NODISCARD: u32 = 1;
    pub const _STL_WARNING_LEVEL: u32 = 3;
    pub const _HAS_CONDITIONAL_EXPLICIT: u32 = 1;
    pub const _STL_DISABLED_WARNING_C4984: u32 = 4984;
    pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
    pub const _CPPLIB_VER: u32 = 650;
    pub const _MSVC_STL_VERSION: u32 = 142;
    pub const _MSVC_STL_UPDATE: u32 = 202104;
    pub const _HAS_STATIC_RTTI: u32 = 1;
    pub const _HAS_STD_BYTE: u32 = 0;
    pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 0;
    pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
    pub const _FACET_SPECIALIZATION_MESSAGE : & 'static [u8 ; 183usize] = b"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this diagnostic.\0" ;
    pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
    pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
    pub const __cpp_lib_chrono_udls: u32 = 201304;
    pub const __cpp_lib_complex_udls: u32 = 201309;
    pub const __cpp_lib_exchange_function: u32 = 201304;
    pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
    pub const __cpp_lib_integer_sequence: u32 = 201304;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
    pub const __cpp_lib_make_unique: u32 = 201304;
    pub const __cpp_lib_null_iterators: u32 = 201304;
    pub const __cpp_lib_quoted_string_io: u32 = 201304;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
    pub const __cpp_lib_string_udls: u32 = 201304;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_tuple_element_t: u32 = 201402;
    pub const __cpp_lib_tuples_by_type: u32 = 201304;
    pub const __cpp_lib_addressof_constexpr: u32 = 201603;
    pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
    pub const __cpp_lib_as_const: u32 = 201510;
    pub const __cpp_lib_bool_constant: u32 = 201505;
    pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
    pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
    pub const __cpp_lib_invoke: u32 = 201411;
    pub const __cpp_lib_logical_traits: u32 = 201510;
    pub const __cpp_lib_map_try_emplace: u32 = 201411;
    pub const __cpp_lib_nonmember_container_access: u32 = 201411;
    pub const __cpp_lib_shared_mutex: u32 = 201505;
    pub const __cpp_lib_transparent_operators: u32 = 201510;
    pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
    pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
    pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
    pub const __cpp_lib_void_t: u32 = 201411;
    pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
    pub const __cpp_lib_chrono: u32 = 201510;
    pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
    pub const __cpp_lib_experimental_erase_if: u32 = 201411;
    pub const __cpp_lib_experimental_filesystem: u32 = 201406;
    pub const _STL_WIN32_WINNT_WINXP: u32 = 1281;
    pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
    pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
    pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
    pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
    pub const _STL_WIN32_WINNT: u32 = 1536;
    pub const WCHAR_MIN: u32 = 0;
    pub const WCHAR_MAX: u32 = 65535;
    pub const WINT_MIN: u32 = 0;
    pub const WINT_MAX: u32 = 65535;
    pub type va_list = *mut ::std::os::raw::c_char;
    extern "C" {
        pub fn __va_start(arg1: *mut root::va_list, ...);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __vcrt_va_list_is_reference {
        pub _address: u8,
    }
    pub const __vcrt_va_list_is_reference___the_value: bool = false;
    pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __vcrt_assert_va_start_is_not_reference {
        pub _address: u8,
    }
    pub type size_t = ::std::os::raw::c_ulonglong;
    pub type __vcrt_bool = bool;
    extern "C" {
        pub fn __security_init_cookie();
    }
    extern "C" {
        pub fn __security_check_cookie(_StackCookie: usize);
    }
    extern "C" {
        pub fn __report_gsfailure(_StackCookie: usize);
    }
    extern "C" {
        pub static mut __security_cookie: usize;
    }
    pub type int_least8_t = ::std::os::raw::c_schar;
    pub type int_least16_t = ::std::os::raw::c_short;
    pub type int_least32_t = ::std::os::raw::c_int;
    pub type int_least64_t = ::std::os::raw::c_longlong;
    pub type uint_least8_t = ::std::os::raw::c_uchar;
    pub type uint_least16_t = ::std::os::raw::c_ushort;
    pub type uint_least32_t = ::std::os::raw::c_uint;
    pub type uint_least64_t = ::std::os::raw::c_ulonglong;
    pub type int_fast8_t = ::std::os::raw::c_schar;
    pub type int_fast16_t = ::std::os::raw::c_int;
    pub type int_fast32_t = ::std::os::raw::c_int;
    pub type int_fast64_t = ::std::os::raw::c_longlong;
    pub type uint_fast8_t = ::std::os::raw::c_uchar;
    pub type uint_fast16_t = ::std::os::raw::c_uint;
    pub type uint_fast32_t = ::std::os::raw::c_uint;
    pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
    pub type intmax_t = ::std::os::raw::c_longlong;
    pub type uintmax_t = ::std::os::raw::c_ulonglong;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod tr1 {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        pub type nullptr_t = *const ::std::os::raw::c_void;
        pub type integral_constant_value_type<_Ty> = _Ty;
        pub type integral_constant_type = u8;
        pub type bool_constant = u8;
        pub type true_type = u8;
        pub type false_type = u8;
        pub type enable_if_t = u8;
        pub type conditional_type<_Ty1> = _Ty1;
        pub type conditional_t = u8;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_same {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_const {
            pub _address: u8,
        }
        pub type remove_const_type<_Ty> = _Ty;
        pub type remove_const_t = root::std::remove_const;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_volatile {
            pub _address: u8,
        }
        pub type remove_volatile_type<_Ty> = _Ty;
        pub type remove_volatile_t = root::std::remove_volatile;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_cv {
            pub _address: u8,
        }
        pub type remove_cv_type<_Ty> = _Ty;
        pub type remove_cv__Apply = u8;
        pub type remove_cv_t = root::std::remove_cv;
        pub type _Disjunction_type<_First> = _First;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct disjunction {
            pub _base: root::std::false_type,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_integral {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_floating_point {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct is_arithmetic {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct remove_reference {
            pub _address: u8,
        }
        pub type remove_reference_type<_Ty> = _Ty;
        pub type remove_reference__Const_thru_ref_type<_Ty> = _Ty;
        pub type remove_reference_t = root::std::remove_reference;
        pub type _Const_thru_ref = root::std::remove_reference;
        pub type _Remove_cvref_t = root::std::remove_cv_t;
        pub type max_align_t = f64;
    }
    pub type max_align_t = f64;
    pub mod nvn {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type BufferAddress = u64;
        pub type CommandHandle = u64;
        pub type TextureHandle = u64;
        pub type ImageHandle = u64;
        pub type TextureAddress = u64;
        pub type NativeWindow = *mut ::std::os::raw::c_void;
        pub type StorageClass = i32;
        pub type SubroutineLinkageMapPtr = *mut ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DeviceInfo {
            pub m_Internal: root::nvn::DeviceInfo_Enum,
        }
        pub const DeviceInfo_Enum_API_MAJOR_VERSION: root::nvn::DeviceInfo_Enum = 0;
        pub const DeviceInfo_Enum_API_MINOR_VERSION: root::nvn::DeviceInfo_Enum = 1;
        pub const DeviceInfo_Enum_UNIFORM_BUFFER_BINDINGS_PER_STAGE: root::nvn::DeviceInfo_Enum = 2;
        pub const DeviceInfo_Enum_MAX_UNIFORM_BUFFER_SIZE: root::nvn::DeviceInfo_Enum = 3;
        pub const DeviceInfo_Enum_UNIFORM_BUFFER_ALIGNMENT: root::nvn::DeviceInfo_Enum = 4;
        pub const DeviceInfo_Enum_COLOR_BUFFER_BINDINGS: root::nvn::DeviceInfo_Enum = 5;
        pub const DeviceInfo_Enum_VERTEX_BUFFER_BINDINGS: root::nvn::DeviceInfo_Enum = 6;
        pub const DeviceInfo_Enum_TRANSFORM_FEEDBACK_BUFFER_BINDINGS: root::nvn::DeviceInfo_Enum =
            7;
        pub const DeviceInfo_Enum_SHADER_STORAGE_BUFFER_BINDINGS_PER_STAGE:
            root::nvn::DeviceInfo_Enum = 8;
        pub const DeviceInfo_Enum_TEXTURE_BINDINGS_PER_STAGE: root::nvn::DeviceInfo_Enum = 9;
        pub const DeviceInfo_Enum_COUNTER_ALIGNMENT: root::nvn::DeviceInfo_Enum = 10;
        pub const DeviceInfo_Enum_TRANSFORM_FEEDBACK_BUFFER_ALIGNMENT: root::nvn::DeviceInfo_Enum =
            11;
        pub const DeviceInfo_Enum_TRANSFORM_FEEDBACK_CONTROL_ALIGNMENT: root::nvn::DeviceInfo_Enum =
            12;
        pub const DeviceInfo_Enum_INDIRECT_DRAW_ALIGNMENT: root::nvn::DeviceInfo_Enum = 13;
        pub const DeviceInfo_Enum_VERTEX_ATTRIBUTES: root::nvn::DeviceInfo_Enum = 14;
        pub const DeviceInfo_Enum_TEXTURE_DESCRIPTOR_SIZE: root::nvn::DeviceInfo_Enum = 15;
        pub const DeviceInfo_Enum_SAMPLER_DESCRIPTOR_SIZE: root::nvn::DeviceInfo_Enum = 16;
        pub const DeviceInfo_Enum_RESERVED_TEXTURE_DESCRIPTORS: root::nvn::DeviceInfo_Enum = 17;
        pub const DeviceInfo_Enum_RESERVED_SAMPLER_DESCRIPTORS: root::nvn::DeviceInfo_Enum = 18;
        pub const DeviceInfo_Enum_COMMAND_BUFFER_COMMAND_ALIGNMENT: root::nvn::DeviceInfo_Enum = 19;
        pub const DeviceInfo_Enum_COMMAND_BUFFER_CONTROL_ALIGNMENT: root::nvn::DeviceInfo_Enum = 20;
        pub const DeviceInfo_Enum_COMMAND_BUFFER_MIN_COMMAND_SIZE: root::nvn::DeviceInfo_Enum = 21;
        pub const DeviceInfo_Enum_COMMAND_BUFFER_MIN_CONTROL_SIZE: root::nvn::DeviceInfo_Enum = 22;
        pub const DeviceInfo_Enum_SHADER_SCRATCH_MEMORY_SCALE_FACTOR_MINIMUM:
            root::nvn::DeviceInfo_Enum = 23;
        pub const DeviceInfo_Enum_SHADER_SCRATCH_MEMORY_SCALE_FACTOR_RECOMMENDED:
            root::nvn::DeviceInfo_Enum = 24;
        pub const DeviceInfo_Enum_SHADER_SCRATCH_MEMORY_ALIGNMENT: root::nvn::DeviceInfo_Enum = 25;
        pub const DeviceInfo_Enum_SHADER_SCRATCH_MEMORY_GRANULARITY: root::nvn::DeviceInfo_Enum =
            26;
        pub const DeviceInfo_Enum_MAX_TEXTURE_ANISOTROPY: root::nvn::DeviceInfo_Enum = 27;
        pub const DeviceInfo_Enum_MAX_COMPUTE_WORK_GROUP_SIZE_X: root::nvn::DeviceInfo_Enum = 28;
        pub const DeviceInfo_Enum_MAX_COMPUTE_WORK_GROUP_SIZE_Y: root::nvn::DeviceInfo_Enum = 29;
        pub const DeviceInfo_Enum_MAX_COMPUTE_WORK_GROUP_SIZE_Z: root::nvn::DeviceInfo_Enum = 30;
        pub const DeviceInfo_Enum_MAX_COMPUTE_WORK_GROUP_SIZE_THREADS: root::nvn::DeviceInfo_Enum =
            31;
        pub const DeviceInfo_Enum_MAX_COMPUTE_DISPATCH_WORK_GROUPS_X: root::nvn::DeviceInfo_Enum =
            32;
        pub const DeviceInfo_Enum_MAX_COMPUTE_DISPATCH_WORK_GROUPS_Y: root::nvn::DeviceInfo_Enum =
            33;
        pub const DeviceInfo_Enum_MAX_COMPUTE_DISPATCH_WORK_GROUPS_Z: root::nvn::DeviceInfo_Enum =
            34;
        pub const DeviceInfo_Enum_IMAGE_BINDINGS_PER_STAGE: root::nvn::DeviceInfo_Enum = 35;
        pub const DeviceInfo_Enum_MAX_TEXTURE_POOL_SIZE: root::nvn::DeviceInfo_Enum = 36;
        pub const DeviceInfo_Enum_MAX_SAMPLER_POOL_SIZE: root::nvn::DeviceInfo_Enum = 37;
        pub const DeviceInfo_Enum_MAX_VIEWPORTS: root::nvn::DeviceInfo_Enum = 38;
        pub const DeviceInfo_Enum_MEMPOOL_TEXTURE_OBJECT_PAGE_ALIGNMENT:
            root::nvn::DeviceInfo_Enum = 39;
        pub const DeviceInfo_Enum_SUPPORTS_MIN_MAX_FILTERING: root::nvn::DeviceInfo_Enum = 40;
        pub const DeviceInfo_Enum_SUPPORTS_STENCIL8_FORMAT: root::nvn::DeviceInfo_Enum = 41;
        pub const DeviceInfo_Enum_SUPPORTS_ASTC_FORMATS: root::nvn::DeviceInfo_Enum = 42;
        pub const DeviceInfo_Enum_L2_SIZE: root::nvn::DeviceInfo_Enum = 43;
        pub const DeviceInfo_Enum_MAX_TEXTURE_LEVELS: root::nvn::DeviceInfo_Enum = 44;
        pub const DeviceInfo_Enum_MAX_TEXTURE_LAYERS: root::nvn::DeviceInfo_Enum = 45;
        pub const DeviceInfo_Enum_GLSLC_MAX_SUPPORTED_GPU_CODE_MAJOR_VERSION:
            root::nvn::DeviceInfo_Enum = 46;
        pub const DeviceInfo_Enum_GLSLC_MIN_SUPPORTED_GPU_CODE_MAJOR_VERSION:
            root::nvn::DeviceInfo_Enum = 47;
        pub const DeviceInfo_Enum_GLSLC_MAX_SUPPORTED_GPU_CODE_MINOR_VERSION:
            root::nvn::DeviceInfo_Enum = 48;
        pub const DeviceInfo_Enum_GLSLC_MIN_SUPPORTED_GPU_CODE_MINOR_VERSION:
            root::nvn::DeviceInfo_Enum = 49;
        pub const DeviceInfo_Enum_SUPPORTS_CONSERVATIVE_RASTER: root::nvn::DeviceInfo_Enum = 50;
        pub const DeviceInfo_Enum_SUBPIXEL_BITS: root::nvn::DeviceInfo_Enum = 51;
        pub const DeviceInfo_Enum_MAX_SUBPIXEL_BIAS_BITS: root::nvn::DeviceInfo_Enum = 52;
        pub const DeviceInfo_Enum_INDIRECT_DISPATCH_ALIGNMENT: root::nvn::DeviceInfo_Enum = 53;
        pub const DeviceInfo_Enum_ZCULL_SAVE_RESTORE_ALIGNMENT: root::nvn::DeviceInfo_Enum = 54;
        pub const DeviceInfo_Enum_SHADER_SCRATCH_MEMORY_COMPUTE_SCALE_FACTOR_MINIMUM:
            root::nvn::DeviceInfo_Enum = 55;
        pub const DeviceInfo_Enum_LINEAR_TEXTURE_STRIDE_ALIGNMENT: root::nvn::DeviceInfo_Enum = 56;
        pub const DeviceInfo_Enum_LINEAR_RENDER_TARGET_STRIDE_ALIGNMENT:
            root::nvn::DeviceInfo_Enum = 57;
        pub const DeviceInfo_Enum_MEMORY_POOL_PAGE_SIZE: root::nvn::DeviceInfo_Enum = 58;
        pub const DeviceInfo_Enum_SUPPORTS_ZERO_FROM_UNMAPPED_VIRTUAL_POOL_PAGES:
            root::nvn::DeviceInfo_Enum = 59;
        pub const DeviceInfo_Enum_UNIFORM_BUFFER_UPDATE_ALIGNMENT: root::nvn::DeviceInfo_Enum = 60;
        pub const DeviceInfo_Enum_MAX_TEXTURE_SIZE: root::nvn::DeviceInfo_Enum = 61;
        pub const DeviceInfo_Enum_MAX_BUFFER_TEXTURE_SIZE: root::nvn::DeviceInfo_Enum = 62;
        pub const DeviceInfo_Enum_MAX_3D_TEXTURE_SIZE: root::nvn::DeviceInfo_Enum = 63;
        pub const DeviceInfo_Enum_MAX_CUBE_MAP_TEXTURE_SIZE: root::nvn::DeviceInfo_Enum = 64;
        pub const DeviceInfo_Enum_MAX_RECTANGLE_TEXTURE_SIZE: root::nvn::DeviceInfo_Enum = 65;
        pub const DeviceInfo_Enum_SUPPORTS_PASSTHROUGH_GEOMETRY_SHADERS:
            root::nvn::DeviceInfo_Enum = 66;
        pub const DeviceInfo_Enum_SUPPORTS_VIEWPORT_SWIZZLE: root::nvn::DeviceInfo_Enum = 67;
        pub const DeviceInfo_Enum_SUPPORTS_SPARSE_TILED_PACKAGED_TEXTURES:
            root::nvn::DeviceInfo_Enum = 68;
        pub const DeviceInfo_Enum_SUPPORTS_ADVANCED_BLEND_MODES: root::nvn::DeviceInfo_Enum = 69;
        pub const DeviceInfo_Enum_MAX_PRESENT_INTERVAL: root::nvn::DeviceInfo_Enum = 70;
        pub const DeviceInfo_Enum_SUPPORTS_DRAW_TEXTURE: root::nvn::DeviceInfo_Enum = 71;
        pub const DeviceInfo_Enum_SUPPORTS_TARGET_INDEPENDENT_RASTERIZATION:
            root::nvn::DeviceInfo_Enum = 72;
        pub const DeviceInfo_Enum_SUPPORTS_FRAGMENT_COVERAGE_TO_COLOR: root::nvn::DeviceInfo_Enum =
            73;
        pub const DeviceInfo_Enum_SUPPORTS_POST_DEPTH_COVERAGE: root::nvn::DeviceInfo_Enum = 74;
        pub const DeviceInfo_Enum_SUPPORTS_IMAGES_USING_TEXTURE_HANDLES:
            root::nvn::DeviceInfo_Enum = 75;
        pub const DeviceInfo_Enum_SUPPORTS_SAMPLE_LOCATIONS: root::nvn::DeviceInfo_Enum = 76;
        pub const DeviceInfo_Enum_MAX_SAMPLE_LOCATION_TABLE_ENTRIES: root::nvn::DeviceInfo_Enum =
            77;
        pub const DeviceInfo_Enum_SHADER_CODE_MEMORY_POOL_PADDING_SIZE: root::nvn::DeviceInfo_Enum =
            78;
        pub const DeviceInfo_Enum_MAX_PATCH_SIZE: root::nvn::DeviceInfo_Enum = 79;
        pub const DeviceInfo_Enum_QUEUE_COMMAND_MEMORY_GRANULARITY: root::nvn::DeviceInfo_Enum = 80;
        pub const DeviceInfo_Enum_QUEUE_COMMAND_MEMORY_MIN_SIZE: root::nvn::DeviceInfo_Enum = 81;
        pub const DeviceInfo_Enum_QUEUE_COMMAND_MEMORY_DEFAULT_SIZE: root::nvn::DeviceInfo_Enum =
            82;
        pub const DeviceInfo_Enum_QUEUE_COMPUTE_MEMORY_GRANULARITY: root::nvn::DeviceInfo_Enum = 83;
        pub const DeviceInfo_Enum_QUEUE_COMPUTE_MEMORY_MIN_SIZE: root::nvn::DeviceInfo_Enum = 84;
        pub const DeviceInfo_Enum_QUEUE_COMPUTE_MEMORY_DEFAULT_SIZE: root::nvn::DeviceInfo_Enum =
            85;
        pub const DeviceInfo_Enum_QUEUE_COMMAND_MEMORY_MIN_FLUSH_THRESHOLD:
            root::nvn::DeviceInfo_Enum = 86;
        pub const DeviceInfo_Enum_SUPPORTS_FRAGMENT_SHADER_INTERLOCK: root::nvn::DeviceInfo_Enum =
            87;
        pub const DeviceInfo_Enum_MAX_TEXTURES_PER_WINDOW: root::nvn::DeviceInfo_Enum = 88;
        pub const DeviceInfo_Enum_MIN_TEXTURES_PER_WINDOW: root::nvn::DeviceInfo_Enum = 89;
        pub const DeviceInfo_Enum_LARGE_DEVICE_INFO: root::nvn::DeviceInfo_Enum = 134217727;
        pub type DeviceInfo_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DeviceError {
            pub m_Internal: root::nvn::DeviceError_Enum,
        }
        pub const DeviceError_Enum_ACCESS_VIOLATION: root::nvn::DeviceError_Enum = 1;
        pub const DeviceError_Enum_LARGE_DEVICE_ERROR: root::nvn::DeviceError_Enum = 134217727;
        pub type DeviceError_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TextureTarget {
            pub m_Internal: root::nvn::TextureTarget_Enum,
        }
        pub const TextureTarget_Enum_TARGET_1D: root::nvn::TextureTarget_Enum = 0;
        pub const TextureTarget_Enum_TARGET_2D: root::nvn::TextureTarget_Enum = 1;
        pub const TextureTarget_Enum_TARGET_3D: root::nvn::TextureTarget_Enum = 2;
        pub const TextureTarget_Enum_TARGET_1D_ARRAY: root::nvn::TextureTarget_Enum = 3;
        pub const TextureTarget_Enum_TARGET_2D_ARRAY: root::nvn::TextureTarget_Enum = 4;
        pub const TextureTarget_Enum_TARGET_2D_MULTISAMPLE: root::nvn::TextureTarget_Enum = 5;
        pub const TextureTarget_Enum_TARGET_2D_MULTISAMPLE_ARRAY: root::nvn::TextureTarget_Enum = 6;
        pub const TextureTarget_Enum_TARGET_RECTANGLE: root::nvn::TextureTarget_Enum = 7;
        pub const TextureTarget_Enum_TARGET_CUBEMAP: root::nvn::TextureTarget_Enum = 8;
        pub const TextureTarget_Enum_TARGET_CUBEMAP_ARRAY: root::nvn::TextureTarget_Enum = 9;
        pub const TextureTarget_Enum_TARGET_BUFFER: root::nvn::TextureTarget_Enum = 10;
        pub const TextureTarget_Enum_LARGE_TEXTURE_TARGET: root::nvn::TextureTarget_Enum =
            134217727;
        pub type TextureTarget_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TextureSwizzle {
            pub m_Internal: root::nvn::TextureSwizzle_Enum,
        }
        pub const TextureSwizzle_Enum_ZERO: root::nvn::TextureSwizzle_Enum = 0;
        pub const TextureSwizzle_Enum_ONE: root::nvn::TextureSwizzle_Enum = 1;
        pub const TextureSwizzle_Enum_R: root::nvn::TextureSwizzle_Enum = 2;
        pub const TextureSwizzle_Enum_G: root::nvn::TextureSwizzle_Enum = 3;
        pub const TextureSwizzle_Enum_B: root::nvn::TextureSwizzle_Enum = 4;
        pub const TextureSwizzle_Enum_A: root::nvn::TextureSwizzle_Enum = 5;
        pub const TextureSwizzle_Enum_LARGE_TEXTURE_SWIZZLE: root::nvn::TextureSwizzle_Enum =
            134217727;
        pub type TextureSwizzle_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TextureDepthStencilMode {
            pub m_Internal: root::nvn::TextureDepthStencilMode_Enum,
        }
        pub const TextureDepthStencilMode_Enum_DEPTH: root::nvn::TextureDepthStencilMode_Enum = 0;
        pub const TextureDepthStencilMode_Enum_STENCIL: root::nvn::TextureDepthStencilMode_Enum = 1;
        pub const TextureDepthStencilMode_Enum_LARGE_TEXTURE_DEPTH_STENCIL_MODE:
            root::nvn::TextureDepthStencilMode_Enum = 134217727;
        pub type TextureDepthStencilMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Format {
            pub m_Internal: root::nvn::Format_Enum,
        }
        pub const Format_Enum_NONE: root::nvn::Format_Enum = 0;
        pub const Format_Enum_R8: root::nvn::Format_Enum = 1;
        pub const Format_Enum_R8SN: root::nvn::Format_Enum = 2;
        pub const Format_Enum_R8UI: root::nvn::Format_Enum = 3;
        pub const Format_Enum_R8I: root::nvn::Format_Enum = 4;
        pub const Format_Enum_R16F: root::nvn::Format_Enum = 5;
        pub const Format_Enum_R16: root::nvn::Format_Enum = 6;
        pub const Format_Enum_R16SN: root::nvn::Format_Enum = 7;
        pub const Format_Enum_R16UI: root::nvn::Format_Enum = 8;
        pub const Format_Enum_R16I: root::nvn::Format_Enum = 9;
        pub const Format_Enum_R32F: root::nvn::Format_Enum = 10;
        pub const Format_Enum_R32UI: root::nvn::Format_Enum = 11;
        pub const Format_Enum_R32I: root::nvn::Format_Enum = 12;
        pub const Format_Enum_RG8: root::nvn::Format_Enum = 13;
        pub const Format_Enum_RG8SN: root::nvn::Format_Enum = 14;
        pub const Format_Enum_RG8UI: root::nvn::Format_Enum = 15;
        pub const Format_Enum_RG8I: root::nvn::Format_Enum = 16;
        pub const Format_Enum_RG16F: root::nvn::Format_Enum = 17;
        pub const Format_Enum_RG16: root::nvn::Format_Enum = 18;
        pub const Format_Enum_RG16SN: root::nvn::Format_Enum = 19;
        pub const Format_Enum_RG16UI: root::nvn::Format_Enum = 20;
        pub const Format_Enum_RG16I: root::nvn::Format_Enum = 21;
        pub const Format_Enum_RG32F: root::nvn::Format_Enum = 22;
        pub const Format_Enum_RG32UI: root::nvn::Format_Enum = 23;
        pub const Format_Enum_RG32I: root::nvn::Format_Enum = 24;
        pub const Format_Enum_RGB8: root::nvn::Format_Enum = 25;
        pub const Format_Enum_RGB8SN: root::nvn::Format_Enum = 26;
        pub const Format_Enum_RGB8UI: root::nvn::Format_Enum = 27;
        pub const Format_Enum_RGB8I: root::nvn::Format_Enum = 28;
        pub const Format_Enum_RGB16F: root::nvn::Format_Enum = 29;
        pub const Format_Enum_RGB16: root::nvn::Format_Enum = 30;
        pub const Format_Enum_RGB16SN: root::nvn::Format_Enum = 31;
        pub const Format_Enum_RGB16UI: root::nvn::Format_Enum = 32;
        pub const Format_Enum_RGB16I: root::nvn::Format_Enum = 33;
        pub const Format_Enum_RGB32F: root::nvn::Format_Enum = 34;
        pub const Format_Enum_RGB32UI: root::nvn::Format_Enum = 35;
        pub const Format_Enum_RGB32I: root::nvn::Format_Enum = 36;
        pub const Format_Enum_RGBA8: root::nvn::Format_Enum = 37;
        pub const Format_Enum_RGBA8SN: root::nvn::Format_Enum = 38;
        pub const Format_Enum_RGBA8UI: root::nvn::Format_Enum = 39;
        pub const Format_Enum_RGBA8I: root::nvn::Format_Enum = 40;
        pub const Format_Enum_RGBA16F: root::nvn::Format_Enum = 41;
        pub const Format_Enum_RGBA16: root::nvn::Format_Enum = 42;
        pub const Format_Enum_RGBA16SN: root::nvn::Format_Enum = 43;
        pub const Format_Enum_RGBA16UI: root::nvn::Format_Enum = 44;
        pub const Format_Enum_RGBA16I: root::nvn::Format_Enum = 45;
        pub const Format_Enum_RGBA32F: root::nvn::Format_Enum = 46;
        pub const Format_Enum_RGBA32UI: root::nvn::Format_Enum = 47;
        pub const Format_Enum_RGBA32I: root::nvn::Format_Enum = 48;
        pub const Format_Enum_STENCIL8: root::nvn::Format_Enum = 49;
        pub const Format_Enum_DEPTH16: root::nvn::Format_Enum = 50;
        pub const Format_Enum_DEPTH24: root::nvn::Format_Enum = 51;
        pub const Format_Enum_DEPTH32F: root::nvn::Format_Enum = 52;
        pub const Format_Enum_DEPTH24_STENCIL8: root::nvn::Format_Enum = 53;
        pub const Format_Enum_DEPTH32F_STENCIL8: root::nvn::Format_Enum = 54;
        pub const Format_Enum_RGBX8_SRGB: root::nvn::Format_Enum = 55;
        pub const Format_Enum_RGBA8_SRGB: root::nvn::Format_Enum = 56;
        pub const Format_Enum_RGBA4: root::nvn::Format_Enum = 57;
        pub const Format_Enum_RGB5: root::nvn::Format_Enum = 58;
        pub const Format_Enum_RGB5A1: root::nvn::Format_Enum = 59;
        pub const Format_Enum_RGB565: root::nvn::Format_Enum = 60;
        pub const Format_Enum_RGB10A2: root::nvn::Format_Enum = 61;
        pub const Format_Enum_RGB10A2UI: root::nvn::Format_Enum = 62;
        pub const Format_Enum_R11G11B10F: root::nvn::Format_Enum = 63;
        pub const Format_Enum_RGB9E5F: root::nvn::Format_Enum = 64;
        pub const Format_Enum_RGB_DXT1: root::nvn::Format_Enum = 65;
        pub const Format_Enum_RGBA_DXT1: root::nvn::Format_Enum = 66;
        pub const Format_Enum_RGBA_DXT3: root::nvn::Format_Enum = 67;
        pub const Format_Enum_RGBA_DXT5: root::nvn::Format_Enum = 68;
        pub const Format_Enum_RGB_DXT1_SRGB: root::nvn::Format_Enum = 69;
        pub const Format_Enum_RGBA_DXT1_SRGB: root::nvn::Format_Enum = 70;
        pub const Format_Enum_RGBA_DXT3_SRGB: root::nvn::Format_Enum = 71;
        pub const Format_Enum_RGBA_DXT5_SRGB: root::nvn::Format_Enum = 72;
        pub const Format_Enum_RGTC1_UNORM: root::nvn::Format_Enum = 73;
        pub const Format_Enum_RGTC1_SNORM: root::nvn::Format_Enum = 74;
        pub const Format_Enum_RGTC2_UNORM: root::nvn::Format_Enum = 75;
        pub const Format_Enum_RGTC2_SNORM: root::nvn::Format_Enum = 76;
        pub const Format_Enum_BPTC_UNORM: root::nvn::Format_Enum = 77;
        pub const Format_Enum_BPTC_UNORM_SRGB: root::nvn::Format_Enum = 78;
        pub const Format_Enum_BPTC_SFLOAT: root::nvn::Format_Enum = 79;
        pub const Format_Enum_BPTC_UFLOAT: root::nvn::Format_Enum = 80;
        pub const Format_Enum_R8_UI2F: root::nvn::Format_Enum = 81;
        pub const Format_Enum_R8_I2F: root::nvn::Format_Enum = 82;
        pub const Format_Enum_R16_UI2F: root::nvn::Format_Enum = 83;
        pub const Format_Enum_R16_I2F: root::nvn::Format_Enum = 84;
        pub const Format_Enum_R32_UI2F: root::nvn::Format_Enum = 85;
        pub const Format_Enum_R32_I2F: root::nvn::Format_Enum = 86;
        pub const Format_Enum_RG8_UI2F: root::nvn::Format_Enum = 87;
        pub const Format_Enum_RG8_I2F: root::nvn::Format_Enum = 88;
        pub const Format_Enum_RG16_UI2F: root::nvn::Format_Enum = 89;
        pub const Format_Enum_RG16_I2F: root::nvn::Format_Enum = 90;
        pub const Format_Enum_RG32_UI2F: root::nvn::Format_Enum = 91;
        pub const Format_Enum_RG32_I2F: root::nvn::Format_Enum = 92;
        pub const Format_Enum_RGB8_UI2F: root::nvn::Format_Enum = 93;
        pub const Format_Enum_RGB8_I2F: root::nvn::Format_Enum = 94;
        pub const Format_Enum_RGB16_UI2F: root::nvn::Format_Enum = 95;
        pub const Format_Enum_RGB16_I2F: root::nvn::Format_Enum = 96;
        pub const Format_Enum_RGB32_UI2F: root::nvn::Format_Enum = 97;
        pub const Format_Enum_RGB32_I2F: root::nvn::Format_Enum = 98;
        pub const Format_Enum_RGBA8_UI2F: root::nvn::Format_Enum = 99;
        pub const Format_Enum_RGBA8_I2F: root::nvn::Format_Enum = 100;
        pub const Format_Enum_RGBA16_UI2F: root::nvn::Format_Enum = 101;
        pub const Format_Enum_RGBA16_I2F: root::nvn::Format_Enum = 102;
        pub const Format_Enum_RGBA32_UI2F: root::nvn::Format_Enum = 103;
        pub const Format_Enum_RGBA32_I2F: root::nvn::Format_Enum = 104;
        pub const Format_Enum_RGB10A2SN: root::nvn::Format_Enum = 105;
        pub const Format_Enum_RGB10A2I: root::nvn::Format_Enum = 106;
        pub const Format_Enum_RGB10A2_UI2F: root::nvn::Format_Enum = 107;
        pub const Format_Enum_RGB10A2_I2F: root::nvn::Format_Enum = 108;
        pub const Format_Enum_RGBX8: root::nvn::Format_Enum = 109;
        pub const Format_Enum_RGBX8SN: root::nvn::Format_Enum = 110;
        pub const Format_Enum_RGBX8UI: root::nvn::Format_Enum = 111;
        pub const Format_Enum_RGBX8I: root::nvn::Format_Enum = 112;
        pub const Format_Enum_RGBX16F: root::nvn::Format_Enum = 113;
        pub const Format_Enum_RGBX16: root::nvn::Format_Enum = 114;
        pub const Format_Enum_RGBX16SN: root::nvn::Format_Enum = 115;
        pub const Format_Enum_RGBX16UI: root::nvn::Format_Enum = 116;
        pub const Format_Enum_RGBX16I: root::nvn::Format_Enum = 117;
        pub const Format_Enum_RGBX32F: root::nvn::Format_Enum = 118;
        pub const Format_Enum_RGBX32UI: root::nvn::Format_Enum = 119;
        pub const Format_Enum_RGBX32I: root::nvn::Format_Enum = 120;
        pub const Format_Enum_RGBA_ASTC_4x4: root::nvn::Format_Enum = 121;
        pub const Format_Enum_RGBA_ASTC_5x4: root::nvn::Format_Enum = 122;
        pub const Format_Enum_RGBA_ASTC_5x5: root::nvn::Format_Enum = 123;
        pub const Format_Enum_RGBA_ASTC_6x5: root::nvn::Format_Enum = 124;
        pub const Format_Enum_RGBA_ASTC_6x6: root::nvn::Format_Enum = 125;
        pub const Format_Enum_RGBA_ASTC_8x5: root::nvn::Format_Enum = 126;
        pub const Format_Enum_RGBA_ASTC_8x6: root::nvn::Format_Enum = 127;
        pub const Format_Enum_RGBA_ASTC_8x8: root::nvn::Format_Enum = 128;
        pub const Format_Enum_RGBA_ASTC_10x5: root::nvn::Format_Enum = 129;
        pub const Format_Enum_RGBA_ASTC_10x6: root::nvn::Format_Enum = 130;
        pub const Format_Enum_RGBA_ASTC_10x8: root::nvn::Format_Enum = 131;
        pub const Format_Enum_RGBA_ASTC_10x10: root::nvn::Format_Enum = 132;
        pub const Format_Enum_RGBA_ASTC_12x10: root::nvn::Format_Enum = 133;
        pub const Format_Enum_RGBA_ASTC_12x12: root::nvn::Format_Enum = 134;
        pub const Format_Enum_RGBA_ASTC_4x4_SRGB: root::nvn::Format_Enum = 135;
        pub const Format_Enum_RGBA_ASTC_5x4_SRGB: root::nvn::Format_Enum = 136;
        pub const Format_Enum_RGBA_ASTC_5x5_SRGB: root::nvn::Format_Enum = 137;
        pub const Format_Enum_RGBA_ASTC_6x5_SRGB: root::nvn::Format_Enum = 138;
        pub const Format_Enum_RGBA_ASTC_6x6_SRGB: root::nvn::Format_Enum = 139;
        pub const Format_Enum_RGBA_ASTC_8x5_SRGB: root::nvn::Format_Enum = 140;
        pub const Format_Enum_RGBA_ASTC_8x6_SRGB: root::nvn::Format_Enum = 141;
        pub const Format_Enum_RGBA_ASTC_8x8_SRGB: root::nvn::Format_Enum = 142;
        pub const Format_Enum_RGBA_ASTC_10x5_SRGB: root::nvn::Format_Enum = 143;
        pub const Format_Enum_RGBA_ASTC_10x6_SRGB: root::nvn::Format_Enum = 144;
        pub const Format_Enum_RGBA_ASTC_10x8_SRGB: root::nvn::Format_Enum = 145;
        pub const Format_Enum_RGBA_ASTC_10x10_SRGB: root::nvn::Format_Enum = 146;
        pub const Format_Enum_RGBA_ASTC_12x10_SRGB: root::nvn::Format_Enum = 147;
        pub const Format_Enum_RGBA_ASTC_12x12_SRGB: root::nvn::Format_Enum = 148;
        pub const Format_Enum_BGR565: root::nvn::Format_Enum = 149;
        pub const Format_Enum_BGR5: root::nvn::Format_Enum = 150;
        pub const Format_Enum_BGR5A1: root::nvn::Format_Enum = 151;
        pub const Format_Enum_A1BGR5: root::nvn::Format_Enum = 152;
        pub const Format_Enum_BGRX8: root::nvn::Format_Enum = 153;
        pub const Format_Enum_BGRA8: root::nvn::Format_Enum = 154;
        pub const Format_Enum_BGRX8_SRGB: root::nvn::Format_Enum = 155;
        pub const Format_Enum_BGRA8_SRGB: root::nvn::Format_Enum = 156;
        pub const Format_Enum_LARGE_FORMAT: root::nvn::Format_Enum = 134217727;
        pub type Format_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BlendFunc {
            pub m_Internal: root::nvn::BlendFunc_Enum,
        }
        pub const BlendFunc_Enum_ZERO: root::nvn::BlendFunc_Enum = 1;
        pub const BlendFunc_Enum_ONE: root::nvn::BlendFunc_Enum = 2;
        pub const BlendFunc_Enum_SRC_COLOR: root::nvn::BlendFunc_Enum = 3;
        pub const BlendFunc_Enum_ONE_MINUS_SRC_COLOR: root::nvn::BlendFunc_Enum = 4;
        pub const BlendFunc_Enum_SRC_ALPHA: root::nvn::BlendFunc_Enum = 5;
        pub const BlendFunc_Enum_ONE_MINUS_SRC_ALPHA: root::nvn::BlendFunc_Enum = 6;
        pub const BlendFunc_Enum_DST_ALPHA: root::nvn::BlendFunc_Enum = 7;
        pub const BlendFunc_Enum_ONE_MINUS_DST_ALPHA: root::nvn::BlendFunc_Enum = 8;
        pub const BlendFunc_Enum_DST_COLOR: root::nvn::BlendFunc_Enum = 9;
        pub const BlendFunc_Enum_ONE_MINUS_DST_COLOR: root::nvn::BlendFunc_Enum = 10;
        pub const BlendFunc_Enum_SRC_ALPHA_SATURATE: root::nvn::BlendFunc_Enum = 11;
        pub const BlendFunc_Enum_SRC1_COLOR: root::nvn::BlendFunc_Enum = 16;
        pub const BlendFunc_Enum_ONE_MINUS_SRC1_COLOR: root::nvn::BlendFunc_Enum = 17;
        pub const BlendFunc_Enum_SRC1_ALPHA: root::nvn::BlendFunc_Enum = 18;
        pub const BlendFunc_Enum_ONE_MINUS_SRC1_ALPHA: root::nvn::BlendFunc_Enum = 19;
        pub const BlendFunc_Enum_CONSTANT_COLOR: root::nvn::BlendFunc_Enum = 97;
        pub const BlendFunc_Enum_ONE_MINUS_CONSTANT_COLOR: root::nvn::BlendFunc_Enum = 98;
        pub const BlendFunc_Enum_CONSTANT_ALPHA: root::nvn::BlendFunc_Enum = 99;
        pub const BlendFunc_Enum_ONE_MINUS_CONSTANT_ALPHA: root::nvn::BlendFunc_Enum = 100;
        pub const BlendFunc_Enum_LARGE_BLEND_FUNC: root::nvn::BlendFunc_Enum = 134217727;
        pub type BlendFunc_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BlendAdvancedMode {
            pub m_Internal: root::nvn::BlendAdvancedMode_Enum,
        }
        pub const BlendAdvancedMode_Enum_BLEND_NONE: root::nvn::BlendAdvancedMode_Enum = 0;
        pub const BlendAdvancedMode_Enum_BLEND_ZERO: root::nvn::BlendAdvancedMode_Enum = 5;
        pub const BlendAdvancedMode_Enum_BLEND_SRC: root::nvn::BlendAdvancedMode_Enum = 6;
        pub const BlendAdvancedMode_Enum_BLEND_DST: root::nvn::BlendAdvancedMode_Enum = 7;
        pub const BlendAdvancedMode_Enum_BLEND_SRC_OVER: root::nvn::BlendAdvancedMode_Enum = 8;
        pub const BlendAdvancedMode_Enum_BLEND_DST_OVER: root::nvn::BlendAdvancedMode_Enum = 9;
        pub const BlendAdvancedMode_Enum_BLEND_SRC_IN: root::nvn::BlendAdvancedMode_Enum = 10;
        pub const BlendAdvancedMode_Enum_BLEND_DST_IN: root::nvn::BlendAdvancedMode_Enum = 11;
        pub const BlendAdvancedMode_Enum_BLEND_SRC_OUT: root::nvn::BlendAdvancedMode_Enum = 12;
        pub const BlendAdvancedMode_Enum_BLEND_DST_OUT: root::nvn::BlendAdvancedMode_Enum = 13;
        pub const BlendAdvancedMode_Enum_BLEND_SRC_ATOP: root::nvn::BlendAdvancedMode_Enum = 14;
        pub const BlendAdvancedMode_Enum_BLEND_DST_ATOP: root::nvn::BlendAdvancedMode_Enum = 15;
        pub const BlendAdvancedMode_Enum_BLEND_XOR: root::nvn::BlendAdvancedMode_Enum = 16;
        pub const BlendAdvancedMode_Enum_BLEND_PLUS: root::nvn::BlendAdvancedMode_Enum = 17;
        pub const BlendAdvancedMode_Enum_BLEND_PLUS_CLAMPED: root::nvn::BlendAdvancedMode_Enum = 18;
        pub const BlendAdvancedMode_Enum_BLEND_PLUS_CLAMPED_ALPHA:
            root::nvn::BlendAdvancedMode_Enum = 19;
        pub const BlendAdvancedMode_Enum_BLEND_PLUS_DARKER: root::nvn::BlendAdvancedMode_Enum = 20;
        pub const BlendAdvancedMode_Enum_BLEND_MULTIPLY: root::nvn::BlendAdvancedMode_Enum = 21;
        pub const BlendAdvancedMode_Enum_BLEND_SCREEN: root::nvn::BlendAdvancedMode_Enum = 22;
        pub const BlendAdvancedMode_Enum_BLEND_OVERLAY: root::nvn::BlendAdvancedMode_Enum = 23;
        pub const BlendAdvancedMode_Enum_BLEND_DARKEN: root::nvn::BlendAdvancedMode_Enum = 24;
        pub const BlendAdvancedMode_Enum_BLEND_LIGHTEN: root::nvn::BlendAdvancedMode_Enum = 25;
        pub const BlendAdvancedMode_Enum_BLEND_COLORDODGE: root::nvn::BlendAdvancedMode_Enum = 26;
        pub const BlendAdvancedMode_Enum_BLEND_COLORBURN: root::nvn::BlendAdvancedMode_Enum = 27;
        pub const BlendAdvancedMode_Enum_BLEND_HARDLIGHT: root::nvn::BlendAdvancedMode_Enum = 28;
        pub const BlendAdvancedMode_Enum_BLEND_SOFTLIGHT: root::nvn::BlendAdvancedMode_Enum = 29;
        pub const BlendAdvancedMode_Enum_BLEND_DIFFERENCE: root::nvn::BlendAdvancedMode_Enum = 30;
        pub const BlendAdvancedMode_Enum_BLEND_MINUS: root::nvn::BlendAdvancedMode_Enum = 31;
        pub const BlendAdvancedMode_Enum_BLEND_MINUS_CLAMPED: root::nvn::BlendAdvancedMode_Enum =
            32;
        pub const BlendAdvancedMode_Enum_BLEND_EXCLUSION: root::nvn::BlendAdvancedMode_Enum = 33;
        pub const BlendAdvancedMode_Enum_BLEND_CONTRAST: root::nvn::BlendAdvancedMode_Enum = 34;
        pub const BlendAdvancedMode_Enum_BLEND_INVERT: root::nvn::BlendAdvancedMode_Enum = 35;
        pub const BlendAdvancedMode_Enum_BLEND_INVERT_RGB: root::nvn::BlendAdvancedMode_Enum = 36;
        pub const BlendAdvancedMode_Enum_BLEND_INVERT_OVG: root::nvn::BlendAdvancedMode_Enum = 37;
        pub const BlendAdvancedMode_Enum_BLEND_LINEARDODGE: root::nvn::BlendAdvancedMode_Enum = 38;
        pub const BlendAdvancedMode_Enum_BLEND_LINEARBURN: root::nvn::BlendAdvancedMode_Enum = 39;
        pub const BlendAdvancedMode_Enum_BLEND_VIVIDLIGHT: root::nvn::BlendAdvancedMode_Enum = 40;
        pub const BlendAdvancedMode_Enum_BLEND_LINEARLIGHT: root::nvn::BlendAdvancedMode_Enum = 41;
        pub const BlendAdvancedMode_Enum_BLEND_PINLIGHT: root::nvn::BlendAdvancedMode_Enum = 42;
        pub const BlendAdvancedMode_Enum_BLEND_HARDMIX: root::nvn::BlendAdvancedMode_Enum = 43;
        pub const BlendAdvancedMode_Enum_BLEND_RED: root::nvn::BlendAdvancedMode_Enum = 44;
        pub const BlendAdvancedMode_Enum_BLEND_GREEN: root::nvn::BlendAdvancedMode_Enum = 45;
        pub const BlendAdvancedMode_Enum_BLEND_BLUE: root::nvn::BlendAdvancedMode_Enum = 46;
        pub const BlendAdvancedMode_Enum_BLEND_HSL_HUE: root::nvn::BlendAdvancedMode_Enum = 47;
        pub const BlendAdvancedMode_Enum_BLEND_HSL_SATURATION: root::nvn::BlendAdvancedMode_Enum =
            48;
        pub const BlendAdvancedMode_Enum_BLEND_HSL_COLOR: root::nvn::BlendAdvancedMode_Enum = 49;
        pub const BlendAdvancedMode_Enum_BLEND_HSL_LUMINOSITY: root::nvn::BlendAdvancedMode_Enum =
            50;
        pub const BlendAdvancedMode_Enum_LARGE_BLEND_ADVANCED_MODE:
            root::nvn::BlendAdvancedMode_Enum = 134217727;
        pub type BlendAdvancedMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BlendAdvancedOverlap {
            pub m_Internal: root::nvn::BlendAdvancedOverlap_Enum,
        }
        pub const BlendAdvancedOverlap_Enum_UNCORRELATED: root::nvn::BlendAdvancedOverlap_Enum = 0;
        pub const BlendAdvancedOverlap_Enum_DISJOINT: root::nvn::BlendAdvancedOverlap_Enum = 1;
        pub const BlendAdvancedOverlap_Enum_CONJOINT: root::nvn::BlendAdvancedOverlap_Enum = 2;
        pub const BlendAdvancedOverlap_Enum_LARGE_BLEND_ADVANCED_OVERLAP:
            root::nvn::BlendAdvancedOverlap_Enum = 134217727;
        pub type BlendAdvancedOverlap_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BlendEquation {
            pub m_Internal: root::nvn::BlendEquation_Enum,
        }
        pub const BlendEquation_Enum_ADD: root::nvn::BlendEquation_Enum = 1;
        pub const BlendEquation_Enum_SUB: root::nvn::BlendEquation_Enum = 2;
        pub const BlendEquation_Enum_REVERSE_SUB: root::nvn::BlendEquation_Enum = 3;
        pub const BlendEquation_Enum_MIN: root::nvn::BlendEquation_Enum = 4;
        pub const BlendEquation_Enum_MAX: root::nvn::BlendEquation_Enum = 5;
        pub const BlendEquation_Enum_LARGE_BLEND_EQUATION: root::nvn::BlendEquation_Enum =
            134217727;
        pub type BlendEquation_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LogicOp {
            pub m_Internal: root::nvn::LogicOp_Enum,
        }
        pub const LogicOp_Enum_CLEAR: root::nvn::LogicOp_Enum = 0;
        pub const LogicOp_Enum_AND: root::nvn::LogicOp_Enum = 1;
        pub const LogicOp_Enum_AND_REVERSE: root::nvn::LogicOp_Enum = 2;
        pub const LogicOp_Enum_COPY: root::nvn::LogicOp_Enum = 3;
        pub const LogicOp_Enum_AND_INVERTED: root::nvn::LogicOp_Enum = 4;
        pub const LogicOp_Enum_NOOP: root::nvn::LogicOp_Enum = 5;
        pub const LogicOp_Enum_XOR: root::nvn::LogicOp_Enum = 6;
        pub const LogicOp_Enum_OR: root::nvn::LogicOp_Enum = 7;
        pub const LogicOp_Enum_NOR: root::nvn::LogicOp_Enum = 8;
        pub const LogicOp_Enum_EQUIV: root::nvn::LogicOp_Enum = 9;
        pub const LogicOp_Enum_INVERT: root::nvn::LogicOp_Enum = 10;
        pub const LogicOp_Enum_OR_REVERSE: root::nvn::LogicOp_Enum = 11;
        pub const LogicOp_Enum_COPY_INVERTED: root::nvn::LogicOp_Enum = 12;
        pub const LogicOp_Enum_OR_INVERTED: root::nvn::LogicOp_Enum = 13;
        pub const LogicOp_Enum_NAND: root::nvn::LogicOp_Enum = 14;
        pub const LogicOp_Enum_SET: root::nvn::LogicOp_Enum = 15;
        pub const LogicOp_Enum_LARGE_LOGIC_OP: root::nvn::LogicOp_Enum = 134217727;
        pub type LogicOp_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AlphaFunc {
            pub m_Internal: root::nvn::AlphaFunc_Enum,
        }
        pub const AlphaFunc_Enum_NEVER: root::nvn::AlphaFunc_Enum = 1;
        pub const AlphaFunc_Enum_LESS: root::nvn::AlphaFunc_Enum = 2;
        pub const AlphaFunc_Enum_EQUAL: root::nvn::AlphaFunc_Enum = 3;
        pub const AlphaFunc_Enum_LEQUAL: root::nvn::AlphaFunc_Enum = 4;
        pub const AlphaFunc_Enum_GREATER: root::nvn::AlphaFunc_Enum = 5;
        pub const AlphaFunc_Enum_NOTEQUAL: root::nvn::AlphaFunc_Enum = 6;
        pub const AlphaFunc_Enum_GEQUAL: root::nvn::AlphaFunc_Enum = 7;
        pub const AlphaFunc_Enum_ALWAYS: root::nvn::AlphaFunc_Enum = 8;
        pub const AlphaFunc_Enum_LARGE_ALPHA_FUNC: root::nvn::AlphaFunc_Enum = 134217727;
        pub type AlphaFunc_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DrawPrimitive {
            pub m_Internal: root::nvn::DrawPrimitive_Enum,
        }
        pub const DrawPrimitive_Enum_POINTS: root::nvn::DrawPrimitive_Enum = 0;
        pub const DrawPrimitive_Enum_LINES: root::nvn::DrawPrimitive_Enum = 1;
        pub const DrawPrimitive_Enum_LINE_LOOP: root::nvn::DrawPrimitive_Enum = 2;
        pub const DrawPrimitive_Enum_LINE_STRIP: root::nvn::DrawPrimitive_Enum = 3;
        pub const DrawPrimitive_Enum_TRIANGLES: root::nvn::DrawPrimitive_Enum = 4;
        pub const DrawPrimitive_Enum_TRIANGLE_STRIP: root::nvn::DrawPrimitive_Enum = 5;
        pub const DrawPrimitive_Enum_TRIANGLE_FAN: root::nvn::DrawPrimitive_Enum = 6;
        pub const DrawPrimitive_Enum_QUADS: root::nvn::DrawPrimitive_Enum = 7;
        pub const DrawPrimitive_Enum_QUAD_STRIP: root::nvn::DrawPrimitive_Enum = 8;
        pub const DrawPrimitive_Enum_POLYGON: root::nvn::DrawPrimitive_Enum = 9;
        pub const DrawPrimitive_Enum_LINES_ADJACENCY: root::nvn::DrawPrimitive_Enum = 10;
        pub const DrawPrimitive_Enum_LINE_STRIP_ADJACENCY: root::nvn::DrawPrimitive_Enum = 11;
        pub const DrawPrimitive_Enum_TRIANGLES_ADJACENCY: root::nvn::DrawPrimitive_Enum = 12;
        pub const DrawPrimitive_Enum_TRIANGLE_STRIP_ADJACENCY: root::nvn::DrawPrimitive_Enum = 13;
        pub const DrawPrimitive_Enum_PATCHES: root::nvn::DrawPrimitive_Enum = 14;
        pub const DrawPrimitive_Enum_LARGE_DRAW_PRIMITIVE: root::nvn::DrawPrimitive_Enum =
            134217727;
        pub type DrawPrimitive_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct IndexType {
            pub m_Internal: root::nvn::IndexType_Enum,
        }
        pub const IndexType_Enum_UNSIGNED_BYTE: root::nvn::IndexType_Enum = 0;
        pub const IndexType_Enum_UNSIGNED_SHORT: root::nvn::IndexType_Enum = 1;
        pub const IndexType_Enum_UNSIGNED_INT: root::nvn::IndexType_Enum = 2;
        pub const IndexType_Enum_LARGE_INDEX_TYPE: root::nvn::IndexType_Enum = 134217727;
        pub type IndexType_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DepthFunc {
            pub m_Internal: root::nvn::DepthFunc_Enum,
        }
        pub const DepthFunc_Enum_NEVER: root::nvn::DepthFunc_Enum = 1;
        pub const DepthFunc_Enum_LESS: root::nvn::DepthFunc_Enum = 2;
        pub const DepthFunc_Enum_EQUAL: root::nvn::DepthFunc_Enum = 3;
        pub const DepthFunc_Enum_LEQUAL: root::nvn::DepthFunc_Enum = 4;
        pub const DepthFunc_Enum_GREATER: root::nvn::DepthFunc_Enum = 5;
        pub const DepthFunc_Enum_NOTEQUAL: root::nvn::DepthFunc_Enum = 6;
        pub const DepthFunc_Enum_GEQUAL: root::nvn::DepthFunc_Enum = 7;
        pub const DepthFunc_Enum_ALWAYS: root::nvn::DepthFunc_Enum = 8;
        pub const DepthFunc_Enum_LARGE_DEPTH_FUNC: root::nvn::DepthFunc_Enum = 134217727;
        pub type DepthFunc_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MagFilter {
            pub m_Internal: root::nvn::MagFilter_Enum,
        }
        pub const MagFilter_Enum_NEAREST: root::nvn::MagFilter_Enum = 0;
        pub const MagFilter_Enum_LINEAR: root::nvn::MagFilter_Enum = 1;
        pub const MagFilter_Enum_LARGE_MAG_FILTER: root::nvn::MagFilter_Enum = 134217727;
        pub type MagFilter_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MinFilter {
            pub m_Internal: root::nvn::MinFilter_Enum,
        }
        pub const MinFilter_Enum_NEAREST: root::nvn::MinFilter_Enum = 0;
        pub const MinFilter_Enum_LINEAR: root::nvn::MinFilter_Enum = 1;
        pub const MinFilter_Enum_NEAREST_MIPMAP_NEAREST: root::nvn::MinFilter_Enum = 2;
        pub const MinFilter_Enum_LINEAR_MIPMAP_NEAREST: root::nvn::MinFilter_Enum = 3;
        pub const MinFilter_Enum_NEAREST_MIPMAP_LINEAR: root::nvn::MinFilter_Enum = 4;
        pub const MinFilter_Enum_LINEAR_MIPMAP_LINEAR: root::nvn::MinFilter_Enum = 5;
        pub const MinFilter_Enum_LARGE_MIN_FILTER: root::nvn::MinFilter_Enum = 134217727;
        pub type MinFilter_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WrapMode {
            pub m_Internal: root::nvn::WrapMode_Enum,
        }
        pub const WrapMode_Enum_CLAMP: root::nvn::WrapMode_Enum = 0;
        pub const WrapMode_Enum_REPEAT: root::nvn::WrapMode_Enum = 1;
        pub const WrapMode_Enum_MIRROR_CLAMP: root::nvn::WrapMode_Enum = 2;
        pub const WrapMode_Enum_MIRROR_CLAMP_TO_EDGE: root::nvn::WrapMode_Enum = 3;
        pub const WrapMode_Enum_MIRROR_CLAMP_TO_BORDER: root::nvn::WrapMode_Enum = 4;
        pub const WrapMode_Enum_CLAMP_TO_BORDER: root::nvn::WrapMode_Enum = 5;
        pub const WrapMode_Enum_MIRRORED_REPEAT: root::nvn::WrapMode_Enum = 6;
        pub const WrapMode_Enum_CLAMP_TO_EDGE: root::nvn::WrapMode_Enum = 7;
        pub const WrapMode_Enum_LARGE_WRAP_MODE: root::nvn::WrapMode_Enum = 134217727;
        pub type WrapMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CompareMode {
            pub m_Internal: root::nvn::CompareMode_Enum,
        }
        pub const CompareMode_Enum_NONE: root::nvn::CompareMode_Enum = 0;
        pub const CompareMode_Enum_COMPARE_R_TO_TEXTURE: root::nvn::CompareMode_Enum = 1;
        pub const CompareMode_Enum_LARGE_COMPARE_MODE: root::nvn::CompareMode_Enum = 134217727;
        pub type CompareMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CompareFunc {
            pub m_Internal: root::nvn::CompareFunc_Enum,
        }
        pub const CompareFunc_Enum_NEVER: root::nvn::CompareFunc_Enum = 1;
        pub const CompareFunc_Enum_LESS: root::nvn::CompareFunc_Enum = 2;
        pub const CompareFunc_Enum_EQUAL: root::nvn::CompareFunc_Enum = 3;
        pub const CompareFunc_Enum_LEQUAL: root::nvn::CompareFunc_Enum = 4;
        pub const CompareFunc_Enum_GREATER: root::nvn::CompareFunc_Enum = 5;
        pub const CompareFunc_Enum_NOTEQUAL: root::nvn::CompareFunc_Enum = 6;
        pub const CompareFunc_Enum_GEQUAL: root::nvn::CompareFunc_Enum = 7;
        pub const CompareFunc_Enum_ALWAYS: root::nvn::CompareFunc_Enum = 8;
        pub const CompareFunc_Enum_LARGE_COMPARE_FUNC: root::nvn::CompareFunc_Enum = 134217727;
        pub type CompareFunc_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SamplerReduction {
            pub m_Internal: root::nvn::SamplerReduction_Enum,
        }
        pub const SamplerReduction_Enum_AVERAGE: root::nvn::SamplerReduction_Enum = 0;
        pub const SamplerReduction_Enum_MIN: root::nvn::SamplerReduction_Enum = 1;
        pub const SamplerReduction_Enum_MAX: root::nvn::SamplerReduction_Enum = 2;
        pub const SamplerReduction_Enum_LARGE_SAMPLER_REDUCTION: root::nvn::SamplerReduction_Enum =
            134217727;
        pub type SamplerReduction_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Face {
            pub m_Internal: root::nvn::Face_Enum,
        }
        pub const Face_Enum_NONE: root::nvn::Face_Enum = 0;
        pub const Face_Enum_FRONT: root::nvn::Face_Enum = 1;
        pub const Face_Enum_BACK: root::nvn::Face_Enum = 2;
        pub const Face_Enum_FRONT_AND_BACK: root::nvn::Face_Enum = 3;
        pub const Face_Enum_LARGE_FACE: root::nvn::Face_Enum = 134217727;
        pub type Face_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct StencilFunc {
            pub m_Internal: root::nvn::StencilFunc_Enum,
        }
        pub const StencilFunc_Enum_NEVER: root::nvn::StencilFunc_Enum = 1;
        pub const StencilFunc_Enum_LESS: root::nvn::StencilFunc_Enum = 2;
        pub const StencilFunc_Enum_EQUAL: root::nvn::StencilFunc_Enum = 3;
        pub const StencilFunc_Enum_LEQUAL: root::nvn::StencilFunc_Enum = 4;
        pub const StencilFunc_Enum_GREATER: root::nvn::StencilFunc_Enum = 5;
        pub const StencilFunc_Enum_NOTEQUAL: root::nvn::StencilFunc_Enum = 6;
        pub const StencilFunc_Enum_GEQUAL: root::nvn::StencilFunc_Enum = 7;
        pub const StencilFunc_Enum_ALWAYS: root::nvn::StencilFunc_Enum = 8;
        pub const StencilFunc_Enum_LARGE_STENCIL_FUNC: root::nvn::StencilFunc_Enum = 134217727;
        pub type StencilFunc_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct StencilOp {
            pub m_Internal: root::nvn::StencilOp_Enum,
        }
        pub const StencilOp_Enum_KEEP: root::nvn::StencilOp_Enum = 1;
        pub const StencilOp_Enum_ZERO: root::nvn::StencilOp_Enum = 2;
        pub const StencilOp_Enum_REPLACE: root::nvn::StencilOp_Enum = 3;
        pub const StencilOp_Enum_INCR: root::nvn::StencilOp_Enum = 4;
        pub const StencilOp_Enum_DECR: root::nvn::StencilOp_Enum = 5;
        pub const StencilOp_Enum_INVERT: root::nvn::StencilOp_Enum = 6;
        pub const StencilOp_Enum_INCR_WRAP: root::nvn::StencilOp_Enum = 7;
        pub const StencilOp_Enum_DECR_WRAP: root::nvn::StencilOp_Enum = 8;
        pub const StencilOp_Enum_LARGE_STENCIL_OP: root::nvn::StencilOp_Enum = 134217727;
        pub type StencilOp_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FrontFace {
            pub m_Internal: root::nvn::FrontFace_Enum,
        }
        pub const FrontFace_Enum_CW: root::nvn::FrontFace_Enum = 0;
        pub const FrontFace_Enum_CCW: root::nvn::FrontFace_Enum = 1;
        pub const FrontFace_Enum_LARGE_FRONT_FACE: root::nvn::FrontFace_Enum = 134217727;
        pub type FrontFace_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct PolygonMode {
            pub m_Internal: root::nvn::PolygonMode_Enum,
        }
        pub const PolygonMode_Enum_POINT: root::nvn::PolygonMode_Enum = 0;
        pub const PolygonMode_Enum_LINE: root::nvn::PolygonMode_Enum = 1;
        pub const PolygonMode_Enum_FILL: root::nvn::PolygonMode_Enum = 2;
        pub const PolygonMode_Enum_LARGE_POLYGON_MODE: root::nvn::PolygonMode_Enum = 134217727;
        pub type PolygonMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct PolygonOffsetEnable {
            pub m_Internal: i32,
        }
        pub const PolygonOffsetEnable_Enum_NONE: root::nvn::PolygonOffsetEnable_Enum = 0;
        pub const PolygonOffsetEnable_Enum_POINT: root::nvn::PolygonOffsetEnable_Enum = 1;
        pub const PolygonOffsetEnable_Enum_LINE: root::nvn::PolygonOffsetEnable_Enum = 2;
        pub const PolygonOffsetEnable_Enum_FILL: root::nvn::PolygonOffsetEnable_Enum = 4;
        pub const PolygonOffsetEnable_Enum_LARGE_POLYGON_OFFSET_ENABLE:
            root::nvn::PolygonOffsetEnable_Enum = 134217727;
        pub type PolygonOffsetEnable_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SyncCondition {
            pub m_Internal: root::nvn::SyncCondition_Enum,
        }
        pub const SyncCondition_Enum_ALL_GPU_COMMANDS_COMPLETE: root::nvn::SyncCondition_Enum = 0;
        pub const SyncCondition_Enum_GRAPHICS_WORLD_SPACE_COMPLETE: root::nvn::SyncCondition_Enum =
            1;
        pub const SyncCondition_Enum_LARGE_SYNC_CONDITION: root::nvn::SyncCondition_Enum =
            134217727;
        pub type SyncCondition_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SyncWaitResult {
            pub m_Internal: root::nvn::SyncWaitResult_Enum,
        }
        pub const SyncWaitResult_Enum_ALREADY_SIGNALED: root::nvn::SyncWaitResult_Enum = 0;
        pub const SyncWaitResult_Enum_CONDITION_SATISFIED: root::nvn::SyncWaitResult_Enum = 1;
        pub const SyncWaitResult_Enum_TIMEOUT_EXPIRED: root::nvn::SyncWaitResult_Enum = 2;
        pub const SyncWaitResult_Enum_FAILED: root::nvn::SyncWaitResult_Enum = 3;
        pub const SyncWaitResult_Enum_LARGE_SYNC_WAIT_RESULT: root::nvn::SyncWaitResult_Enum =
            134217727;
        pub type SyncWaitResult_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DeviceWaitForErrorResult {
            pub m_Internal: root::nvn::DeviceWaitForErrorResult_Enum,
        }
        pub const DeviceWaitForErrorResult_Enum_TIMEOUT_EXPIRED:
            root::nvn::DeviceWaitForErrorResult_Enum = 0;
        pub const DeviceWaitForErrorResult_Enum_GPU_ERROR:
            root::nvn::DeviceWaitForErrorResult_Enum = 1;
        pub const DeviceWaitForErrorResult_Enum_DEVICE_FINALIZED:
            root::nvn::DeviceWaitForErrorResult_Enum = 2;
        pub const DeviceWaitForErrorResult_Enum_LARGE_DEVICE_WAIT_FOR_ERROR_RESULT:
            root::nvn::DeviceWaitForErrorResult_Enum = 134217727;
        pub type DeviceWaitForErrorResult_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct QueueAcquireTextureResult {
            pub m_Internal: root::nvn::QueueAcquireTextureResult_Enum,
        }
        pub const QueueAcquireTextureResult_Enum_SUCCESS:
            root::nvn::QueueAcquireTextureResult_Enum = 0;
        pub const QueueAcquireTextureResult_Enum_NATIVE_ERROR:
            root::nvn::QueueAcquireTextureResult_Enum = 1;
        pub const QueueAcquireTextureResult_Enum_LARGE_QUEUE_ACQUIRE_TEXTURE_RESULT:
            root::nvn::QueueAcquireTextureResult_Enum = 134217727;
        pub type QueueAcquireTextureResult_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WindowAcquireTextureResult {
            pub m_Internal: root::nvn::WindowAcquireTextureResult_Enum,
        }
        pub const WindowAcquireTextureResult_Enum_SUCCESS:
            root::nvn::WindowAcquireTextureResult_Enum = 0;
        pub const WindowAcquireTextureResult_Enum_NATIVE_ERROR:
            root::nvn::WindowAcquireTextureResult_Enum = 1;
        pub const WindowAcquireTextureResult_Enum_LARGE_WINDOW_ACQUIRE_TEXTURE_RESULT:
            root::nvn::WindowAcquireTextureResult_Enum = 134217727;
        pub type WindowAcquireTextureResult_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ShaderStage {
            pub m_Internal: root::nvn::ShaderStage_Enum,
        }
        pub const ShaderStage_Enum_VERTEX: root::nvn::ShaderStage_Enum = 0;
        pub const ShaderStage_Enum_FRAGMENT: root::nvn::ShaderStage_Enum = 1;
        pub const ShaderStage_Enum_GEOMETRY: root::nvn::ShaderStage_Enum = 2;
        pub const ShaderStage_Enum_TESS_CONTROL: root::nvn::ShaderStage_Enum = 3;
        pub const ShaderStage_Enum_TESS_EVALUATION: root::nvn::ShaderStage_Enum = 4;
        pub const ShaderStage_Enum_COMPUTE: root::nvn::ShaderStage_Enum = 5;
        pub const ShaderStage_Enum_LARGE_SHADER_STAGE: root::nvn::ShaderStage_Enum = 134217727;
        pub type ShaderStage_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TiledCacheAction {
            pub m_Internal: root::nvn::TiledCacheAction_Enum,
        }
        pub const TiledCacheAction_Enum_ENABLE: root::nvn::TiledCacheAction_Enum = 1;
        pub const TiledCacheAction_Enum_DISABLE: root::nvn::TiledCacheAction_Enum = 2;
        pub const TiledCacheAction_Enum_FLUSH: root::nvn::TiledCacheAction_Enum = 3;
        pub const TiledCacheAction_Enum_FLUSH_NO_TILING: root::nvn::TiledCacheAction_Enum = 4;
        pub const TiledCacheAction_Enum_ENABLE_RENDER_TARGET_BINNING:
            root::nvn::TiledCacheAction_Enum = 5;
        pub const TiledCacheAction_Enum_DISABLE_RENDER_TARGET_BINNING:
            root::nvn::TiledCacheAction_Enum = 6;
        pub const TiledCacheAction_Enum_LARGE_TILED_CACHE_ACTION: root::nvn::TiledCacheAction_Enum =
            134217727;
        pub type TiledCacheAction_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ShaderStageBits {
            pub m_Internal: i32,
        }
        pub const ShaderStageBits_Enum_VERTEX: root::nvn::ShaderStageBits_Enum = 1;
        pub const ShaderStageBits_Enum_FRAGMENT: root::nvn::ShaderStageBits_Enum = 2;
        pub const ShaderStageBits_Enum_GEOMETRY: root::nvn::ShaderStageBits_Enum = 4;
        pub const ShaderStageBits_Enum_TESS_CONTROL: root::nvn::ShaderStageBits_Enum = 8;
        pub const ShaderStageBits_Enum_TESS_EVALUATION: root::nvn::ShaderStageBits_Enum = 16;
        pub const ShaderStageBits_Enum_COMPUTE: root::nvn::ShaderStageBits_Enum = 32;
        pub const ShaderStageBits_Enum_ALL_GRAPHICS_BITS: root::nvn::ShaderStageBits_Enum = 31;
        pub const ShaderStageBits_Enum_LARGE_SHADER_STAGE_BITS: root::nvn::ShaderStageBits_Enum =
            134217727;
        pub type ShaderStageBits_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SyncFlagBits {
            pub m_Internal: i32,
        }
        pub const SyncFlagBits_Enum_FLUSH_FOR_CPU: root::nvn::SyncFlagBits_Enum = 1;
        pub const SyncFlagBits_Enum_LARGE_SYNC_FLAG_BITS: root::nvn::SyncFlagBits_Enum = 134217727;
        pub type SyncFlagBits_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DeviceFlagBits {
            pub m_Internal: i32,
        }
        pub const DeviceFlagBits_Enum_DEBUG_ENABLE: root::nvn::DeviceFlagBits_Enum = 1;
        pub const DeviceFlagBits_Enum_DEBUG_SKIP_CALLS_ON_ERROR: root::nvn::DeviceFlagBits_Enum = 2;
        pub const DeviceFlagBits_Enum_DEBUG_DRAW_VALIDATION: root::nvn::DeviceFlagBits_Enum = 4;
        pub const DeviceFlagBits_Enum_DEFERRED_FINALIZE: root::nvn::DeviceFlagBits_Enum = 8;
        pub const DeviceFlagBits_Enum_DEBUG_DRAW_VALIDATION_HEAVY: root::nvn::DeviceFlagBits_Enum =
            16;
        pub const DeviceFlagBits_Enum_DEBUG_ENABLE_LEVEL_0: root::nvn::DeviceFlagBits_Enum = 32;
        pub const DeviceFlagBits_Enum_DEBUG_ENABLE_LEVEL_1: root::nvn::DeviceFlagBits_Enum = 64;
        pub const DeviceFlagBits_Enum_DEBUG_ENABLE_LEVEL_2: root::nvn::DeviceFlagBits_Enum = 1;
        pub const DeviceFlagBits_Enum_DEBUG_ENABLE_LEVEL_3: root::nvn::DeviceFlagBits_Enum = 4;
        pub const DeviceFlagBits_Enum_DEBUG_ENABLE_LEVEL_4: root::nvn::DeviceFlagBits_Enum = 16;
        pub const DeviceFlagBits_Enum_LARGE_DEVICE_FLAG_BITS: root::nvn::DeviceFlagBits_Enum =
            134217727;
        pub type DeviceFlagBits_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ClearColorMask {
            pub m_Internal: i32,
        }
        pub const ClearColorMask_Enum_R: root::nvn::ClearColorMask_Enum = 1;
        pub const ClearColorMask_Enum_G: root::nvn::ClearColorMask_Enum = 2;
        pub const ClearColorMask_Enum_B: root::nvn::ClearColorMask_Enum = 4;
        pub const ClearColorMask_Enum_A: root::nvn::ClearColorMask_Enum = 8;
        pub const ClearColorMask_Enum_RGBA: root::nvn::ClearColorMask_Enum = 15;
        pub const ClearColorMask_Enum_LARGE_CLEAR_COLOR_MASK: root::nvn::ClearColorMask_Enum =
            134217727;
        pub type ClearColorMask_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DebugCallbackSource {
            pub m_Internal: root::nvn::DebugCallbackSource_Enum,
        }
        pub const DebugCallbackSource_Enum_API: root::nvn::DebugCallbackSource_Enum = 0;
        pub const DebugCallbackSource_Enum_LARGE_DEBUG_CALLBACK_SOURCE:
            root::nvn::DebugCallbackSource_Enum = 134217727;
        pub type DebugCallbackSource_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DebugCallbackType {
            pub m_Internal: root::nvn::DebugCallbackType_Enum,
        }
        pub const DebugCallbackType_Enum_API_ERROR: root::nvn::DebugCallbackType_Enum = 0;
        pub const DebugCallbackType_Enum_API_WARNING: root::nvn::DebugCallbackType_Enum = 1;
        pub const DebugCallbackType_Enum_LARGE_DEBUG_CALLBACK_TYPE:
            root::nvn::DebugCallbackType_Enum = 134217727;
        pub type DebugCallbackType_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DebugCallbackSeverity {
            pub m_Internal: root::nvn::DebugCallbackSeverity_Enum,
        }
        pub const DebugCallbackSeverity_Enum_HIGH: root::nvn::DebugCallbackSeverity_Enum = 0;
        pub const DebugCallbackSeverity_Enum_MEDIUM: root::nvn::DebugCallbackSeverity_Enum = 1;
        pub const DebugCallbackSeverity_Enum_LOW: root::nvn::DebugCallbackSeverity_Enum = 2;
        pub const DebugCallbackSeverity_Enum_NOTIFICATION: root::nvn::DebugCallbackSeverity_Enum =
            3;
        pub const DebugCallbackSeverity_Enum_LARGE_DEBUG_CALLBACK_SEVERITY:
            root::nvn::DebugCallbackSeverity_Enum = 134217727;
        pub type DebugCallbackSeverity_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MemoryPoolFlags {
            pub m_Internal: i32,
        }
        pub const MemoryPoolFlags_Enum_CPU_NO_ACCESS: root::nvn::MemoryPoolFlags_Enum = 1;
        pub const MemoryPoolFlags_Enum_CPU_UNCACHED: root::nvn::MemoryPoolFlags_Enum = 2;
        pub const MemoryPoolFlags_Enum_CPU_CACHED: root::nvn::MemoryPoolFlags_Enum = 4;
        pub const MemoryPoolFlags_Enum_GPU_NO_ACCESS: root::nvn::MemoryPoolFlags_Enum = 8;
        pub const MemoryPoolFlags_Enum_GPU_UNCACHED: root::nvn::MemoryPoolFlags_Enum = 16;
        pub const MemoryPoolFlags_Enum_GPU_CACHED: root::nvn::MemoryPoolFlags_Enum = 32;
        pub const MemoryPoolFlags_Enum_SHADER_CODE: root::nvn::MemoryPoolFlags_Enum = 64;
        pub const MemoryPoolFlags_Enum_COMPRESSIBLE: root::nvn::MemoryPoolFlags_Enum = 128;
        pub const MemoryPoolFlags_Enum_PHYSICAL: root::nvn::MemoryPoolFlags_Enum = 256;
        pub const MemoryPoolFlags_Enum_VIRTUAL: root::nvn::MemoryPoolFlags_Enum = 512;
        pub const MemoryPoolFlags_Enum_LARGE_MEMORY_POOL_FLAGS: root::nvn::MemoryPoolFlags_Enum =
            134217727;
        pub type MemoryPoolFlags_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CounterType {
            pub m_Internal: root::nvn::CounterType_Enum,
        }
        pub const CounterType_Enum_TIMESTAMP: root::nvn::CounterType_Enum = 0;
        pub const CounterType_Enum_SAMPLES_PASSED: root::nvn::CounterType_Enum = 1;
        pub const CounterType_Enum_INPUT_VERTICES: root::nvn::CounterType_Enum = 2;
        pub const CounterType_Enum_INPUT_PRIMITIVES: root::nvn::CounterType_Enum = 3;
        pub const CounterType_Enum_VERTEX_SHADER_INVOCATIONS: root::nvn::CounterType_Enum = 4;
        pub const CounterType_Enum_TESS_CONTROL_SHADER_INVOCATIONS: root::nvn::CounterType_Enum = 5;
        pub const CounterType_Enum_TESS_EVALUATION_SHADER_INVOCATIONS: root::nvn::CounterType_Enum =
            6;
        pub const CounterType_Enum_GEOMETRY_SHADER_INVOCATIONS: root::nvn::CounterType_Enum = 7;
        pub const CounterType_Enum_FRAGMENT_SHADER_INVOCATIONS: root::nvn::CounterType_Enum = 8;
        pub const CounterType_Enum_TESS_EVALUATION_SHADER_PRIMITIVES: root::nvn::CounterType_Enum =
            9;
        pub const CounterType_Enum_GEOMETRY_SHADER_PRIMITIVES: root::nvn::CounterType_Enum = 10;
        pub const CounterType_Enum_CLIPPER_INPUT_PRIMITIVES: root::nvn::CounterType_Enum = 11;
        pub const CounterType_Enum_CLIPPER_OUTPUT_PRIMITIVES: root::nvn::CounterType_Enum = 12;
        pub const CounterType_Enum_PRIMITIVES_GENERATED: root::nvn::CounterType_Enum = 13;
        pub const CounterType_Enum_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:
            root::nvn::CounterType_Enum = 14;
        pub const CounterType_Enum_ZCULL_STATS: root::nvn::CounterType_Enum = 15;
        pub const CounterType_Enum_TIMESTAMP_TOP: root::nvn::CounterType_Enum = 16;
        pub const CounterType_Enum_LARGE_COUNTER_TYPE: root::nvn::CounterType_Enum = 134217727;
        pub type CounterType_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CommandBufferMemoryEvent {
            pub m_Internal: root::nvn::CommandBufferMemoryEvent_Enum,
        }
        pub const CommandBufferMemoryEvent_Enum_OUT_OF_COMMAND_MEMORY:
            root::nvn::CommandBufferMemoryEvent_Enum = 0;
        pub const CommandBufferMemoryEvent_Enum_OUT_OF_CONTROL_MEMORY:
            root::nvn::CommandBufferMemoryEvent_Enum = 1;
        pub const CommandBufferMemoryEvent_Enum_LARGE_COMMAND_BUFFER_MEMORY_EVENT:
            root::nvn::CommandBufferMemoryEvent_Enum = 134217727;
        pub type CommandBufferMemoryEvent_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ConditionalRenderMode {
            pub m_Internal: root::nvn::ConditionalRenderMode_Enum,
        }
        pub const ConditionalRenderMode_Enum_RENDER_IF_EQUAL:
            root::nvn::ConditionalRenderMode_Enum = 0;
        pub const ConditionalRenderMode_Enum_RENDER_IF_NOT_EQUAL:
            root::nvn::ConditionalRenderMode_Enum = 1;
        pub const ConditionalRenderMode_Enum_LARGE_CONDITIONAL_RENDER_MODE:
            root::nvn::ConditionalRenderMode_Enum = 134217727;
        pub type ConditionalRenderMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WindowOriginMode {
            pub m_Internal: root::nvn::WindowOriginMode_Enum,
        }
        pub const WindowOriginMode_Enum_LOWER_LEFT: root::nvn::WindowOriginMode_Enum = 0;
        pub const WindowOriginMode_Enum_UPPER_LEFT: root::nvn::WindowOriginMode_Enum = 1;
        pub const WindowOriginMode_Enum_LARGE_WINDOW_ORIGIN_MODE: root::nvn::WindowOriginMode_Enum =
            134217727;
        pub type WindowOriginMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DepthMode {
            pub m_Internal: root::nvn::DepthMode_Enum,
        }
        pub const DepthMode_Enum_NEAR_IS_MINUS_W: root::nvn::DepthMode_Enum = 0;
        pub const DepthMode_Enum_NEAR_IS_ZERO: root::nvn::DepthMode_Enum = 1;
        pub const DepthMode_Enum_LARGE_DEPTH_MODE: root::nvn::DepthMode_Enum = 134217727;
        pub type DepthMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TextureFlags {
            pub m_Internal: i32,
        }
        pub const TextureFlags_Enum_DISPLAY: root::nvn::TextureFlags_Enum = 1;
        pub const TextureFlags_Enum_VIDEO_DECODE: root::nvn::TextureFlags_Enum = 2;
        pub const TextureFlags_Enum_IMAGE: root::nvn::TextureFlags_Enum = 4;
        pub const TextureFlags_Enum_COMPRESSIBLE: root::nvn::TextureFlags_Enum = 8;
        pub const TextureFlags_Enum_LINEAR: root::nvn::TextureFlags_Enum = 16;
        pub const TextureFlags_Enum_SPARSE: root::nvn::TextureFlags_Enum = 32;
        pub const TextureFlags_Enum_LINEAR_RENDER_TARGET: root::nvn::TextureFlags_Enum = 64;
        pub const TextureFlags_Enum_ADAPTIVE_ZCULL: root::nvn::TextureFlags_Enum = 128;
        pub const TextureFlags_Enum_DEPTH16_PREFER_FAST_CLEAR: root::nvn::TextureFlags_Enum = 256;
        pub const TextureFlags_Enum_LARGE_TEXTURE_FLAGS: root::nvn::TextureFlags_Enum = 134217727;
        pub type TextureFlags_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BarrierBits {
            pub m_Internal: i32,
        }
        pub const BarrierBits_Enum_ORDER_PRIMITIVES: root::nvn::BarrierBits_Enum = 1;
        pub const BarrierBits_Enum_ORDER_FRAGMENTS: root::nvn::BarrierBits_Enum = 2;
        pub const BarrierBits_Enum_ORDER_FRAGMENTS_TILED: root::nvn::BarrierBits_Enum = 4;
        pub const BarrierBits_Enum_ORDER_INDIRECT_DATA: root::nvn::BarrierBits_Enum = 8;
        pub const BarrierBits_Enum_INVALIDATE_TEXTURE: root::nvn::BarrierBits_Enum = 16;
        pub const BarrierBits_Enum_INVALIDATE_SHADER: root::nvn::BarrierBits_Enum = 32;
        pub const BarrierBits_Enum_INVALIDATE_TEXTURE_DESCRIPTOR: root::nvn::BarrierBits_Enum = 64;
        pub const BarrierBits_Enum_INVALIDATE_ZCULL: root::nvn::BarrierBits_Enum = 128;
        pub const BarrierBits_Enum_LARGE_BARRIER_BITS: root::nvn::BarrierBits_Enum = 134217727;
        pub type BarrierBits_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CopyFlags {
            pub m_Internal: i32,
        }
        pub const CopyFlags_Enum_LINEAR_FILTER: root::nvn::CopyFlags_Enum = 1;
        pub const CopyFlags_Enum_NONE: root::nvn::CopyFlags_Enum = 0;
        pub const CopyFlags_Enum_LARGE_COPY_FLAGS: root::nvn::CopyFlags_Enum = 134217727;
        pub type CopyFlags_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ViewportSwizzle {
            pub m_Internal: root::nvn::ViewportSwizzle_Enum,
        }
        pub const ViewportSwizzle_Enum_POSITIVE_X: root::nvn::ViewportSwizzle_Enum = 0;
        pub const ViewportSwizzle_Enum_NEGATIVE_X: root::nvn::ViewportSwizzle_Enum = 1;
        pub const ViewportSwizzle_Enum_POSITIVE_Y: root::nvn::ViewportSwizzle_Enum = 2;
        pub const ViewportSwizzle_Enum_NEGATIVE_Y: root::nvn::ViewportSwizzle_Enum = 3;
        pub const ViewportSwizzle_Enum_POSITIVE_Z: root::nvn::ViewportSwizzle_Enum = 4;
        pub const ViewportSwizzle_Enum_NEGATIVE_Z: root::nvn::ViewportSwizzle_Enum = 5;
        pub const ViewportSwizzle_Enum_POSITIVE_W: root::nvn::ViewportSwizzle_Enum = 6;
        pub const ViewportSwizzle_Enum_NEGATIVE_W: root::nvn::ViewportSwizzle_Enum = 7;
        pub const ViewportSwizzle_Enum_LARGE_VIEWPORT_SWIZZLE: root::nvn::ViewportSwizzle_Enum =
            134217727;
        pub type ViewportSwizzle_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CoverageModulationMode {
            pub m_Internal: root::nvn::CoverageModulationMode_Enum,
        }
        pub const CoverageModulationMode_Enum_NONE: root::nvn::CoverageModulationMode_Enum = 0;
        pub const CoverageModulationMode_Enum_RGB: root::nvn::CoverageModulationMode_Enum = 1;
        pub const CoverageModulationMode_Enum_ALPHA: root::nvn::CoverageModulationMode_Enum = 2;
        pub const CoverageModulationMode_Enum_RGBA: root::nvn::CoverageModulationMode_Enum = 3;
        pub const CoverageModulationMode_Enum_LARGE_COVERAGE_MODULATION_MODE:
            root::nvn::CoverageModulationMode_Enum = 134217727;
        pub type CoverageModulationMode_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct QueueFlags {
            pub m_Internal: i32,
        }
        pub const QueueFlags_Enum_NO_FRAGMENT_INTERLOCK: root::nvn::QueueFlags_Enum = 1;
        pub const QueueFlags_Enum_NONE: root::nvn::QueueFlags_Enum = 0;
        pub const QueueFlags_Enum_LARGE_QUEUE_FLAGS: root::nvn::QueueFlags_Enum = 134217727;
        pub type QueueFlags_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ShaderData {
            pub data: root::nvn::BufferAddress,
            pub control: *const ::std::os::raw::c_void,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct QueueGetErrorResult {
            pub m_Internal: root::nvn::QueueGetErrorResult_Enum,
        }
        pub const QueueGetErrorResult_Enum_NO_ERROR: root::nvn::QueueGetErrorResult_Enum = 0;
        pub const QueueGetErrorResult_Enum_GPU_ERROR_UNKNOWN: root::nvn::QueueGetErrorResult_Enum =
            1;
        pub const QueueGetErrorResult_Enum_GPU_ERROR_MMU_FAULT:
            root::nvn::QueueGetErrorResult_Enum = 2;
        pub const QueueGetErrorResult_Enum_GPU_ERROR_PBDMA_EXCEPTION:
            root::nvn::QueueGetErrorResult_Enum = 3;
        pub const QueueGetErrorResult_Enum_GPU_ERROR_ENGINE_EXCEPTION:
            root::nvn::QueueGetErrorResult_Enum = 4;
        pub const QueueGetErrorResult_Enum_GPU_ERROR_TIMEOUT: root::nvn::QueueGetErrorResult_Enum =
            5;
        pub const QueueGetErrorResult_Enum_LARGE_QUEUE_GET_ERROR_RESULT:
            root::nvn::QueueGetErrorResult_Enum = 134217727;
        pub type QueueGetErrorResult_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MemoryAccess {
            pub m_Internal: root::nvn::MemoryAccess_Enum,
        }
        pub const MemoryAccess_Enum_MEMORY_ACCESS_READ: root::nvn::MemoryAccess_Enum = 0;
        pub const MemoryAccess_Enum_MEMORY_ACCESS_WRITE: root::nvn::MemoryAccess_Enum = 1;
        pub const MemoryAccess_Enum_LARGE_MEMORY_ACCESS: root::nvn::MemoryAccess_Enum = 134217727;
        pub type MemoryAccess_Enum = ::std::os::raw::c_int;
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union QueueErrorInfo {
            pub mmuFault: root::nvn::QueueErrorInfo__bindgen_ty_1,
            pub unknown: [u8; 64usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct QueueErrorInfo__bindgen_ty_1 {
            pub faultAddress: u64,
            pub accessType: root::nvn::MemoryAccess_Enum,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DrawArraysIndirectData {
            pub count: ::std::os::raw::c_int,
            pub instanceCount: ::std::os::raw::c_int,
            pub first: ::std::os::raw::c_int,
            pub baseInstance: ::std::os::raw::c_int,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DrawElementsIndirectData {
            pub count: ::std::os::raw::c_int,
            pub instanceCount: ::std::os::raw::c_int,
            pub firstIndex: ::std::os::raw::c_int,
            pub baseVertex: ::std::os::raw::c_int,
            pub baseInstance: ::std::os::raw::c_int,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DispatchComputeIndirectData {
            pub groupsX: ::std::os::raw::c_int,
            pub groupsY: ::std::os::raw::c_int,
            pub groupsZ: ::std::os::raw::c_int,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CounterData {
            pub counter: u64,
            pub timestamp: u64,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DeviceErrorData {
            pub error: root::nvn::DeviceError_Enum,
            pub queue: *mut root::nvn::Queue,
            pub unknown: [u8; 64usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Rectangle {
            pub x: ::std::os::raw::c_int,
            pub y: ::std::os::raw::c_int,
            pub width: ::std::os::raw::c_int,
            pub height: ::std::os::raw::c_int,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MappingRequest {
            pub physicalPool: *mut root::nvn::MemoryPool,
            pub physicalOffset: i64,
            pub virtualOffset: i64,
            pub size: u64,
            pub storageClass: root::nvn::StorageClass,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CopyRegion {
            pub xoffset: ::std::os::raw::c_int,
            pub yoffset: ::std::os::raw::c_int,
            pub zoffset: ::std::os::raw::c_int,
            pub width: ::std::os::raw::c_int,
            pub height: ::std::os::raw::c_int,
            pub depth: ::std::os::raw::c_int,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TextureSparseTileLayout {
            pub numTiledLevels: ::std::os::raw::c_int,
            pub tileWidth: ::std::os::raw::c_int,
            pub tileHeight: ::std::os::raw::c_int,
            pub tileDepth: ::std::os::raw::c_int,
            pub unknown: [u8; 16usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct PackagedTextureLayout {
            pub layout: [::std::os::raw::c_char; 8usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BufferRange {
            pub address: root::nvn::BufferAddress,
            pub size: u64,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DrawTextureRegion {
            pub x0: f32,
            pub y0: f32,
            pub x1: f32,
            pub y1: f32,
        }
        pub type GenericFuncPtr = ::std::option::Option<unsafe extern "C" fn()>;
        pub type GetProcAddressPtr = ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut root::nvn::Device,
                arg2: *const ::std::os::raw::c_char,
            ) -> root::nvn::GenericFuncPtr,
        >;
        pub type DebugCallback = ::std::option::Option<
            unsafe extern "C" fn(
                arg1: root::nvn::DebugCallbackSource_Enum,
                arg2: root::nvn::DebugCallbackType_Enum,
                arg3: ::std::os::raw::c_int,
                arg4: root::nvn::DebugCallbackSeverity_Enum,
                arg5: *const ::std::os::raw::c_char,
                arg6: *mut ::std::os::raw::c_void,
            ),
        >;
        pub type CommandBufferMemoryCallback = ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut root::nvn::CommandBuffer,
                arg2: root::nvn::CommandBufferMemoryEvent_Enum,
                arg3: root::size_t,
                arg4: *mut ::std::os::raw::c_void,
            ),
        >;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DeviceBuilder {
            pub internal: [u8; 64usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@DeviceBuilder@nvn@@QEAAXXZ"]
            pub fn DeviceBuilder_SetDefaults(this: *mut root::nvn::DeviceBuilder);
        }
        extern "C" {
            #[link_name = "\u{1}?SetFlags@DeviceBuilder@nvn@@QEAAXUDeviceFlagBits@2@@Z"]
            pub fn DeviceBuilder_SetFlags(
                this: *mut root::nvn::DeviceBuilder,
                flags: root::nvn::DeviceFlagBits,
            );
        }
        impl DeviceBuilder {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) {
                DeviceBuilder_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetFlags(&mut self, flags: root::nvn::DeviceFlagBits) {
                DeviceBuilder_SetFlags(self, flags)
            }
        }
        #[repr(C)]
        pub struct Device__bindgen_vtable(::std::os::raw::c_void);
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Device {
            pub vtable_: *const Device__bindgen_vtable,
            pub internal: [u8; 12288usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@Device@nvn@@QEAA_NPEBVDeviceBuilder@2@@Z"]
            pub fn Device_Initialize(
                this: *mut root::nvn::Device,
                builder: *const root::nvn::DeviceBuilder,
            ) -> bool;
        }
        impl Device {
            #[inline]
            pub unsafe fn Initialize(&mut self, builder: *const root::nvn::DeviceBuilder) -> bool {
                Device_Initialize(self, builder)
            }
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@Device@nvn@@UEAAXXZ"]
            pub fn Device_Finalize(this: *mut ::std::os::raw::c_void);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@Device@nvn@@UEAAXPEBD@Z"]
            pub fn Device_SetDebugLabel(
                this: *mut ::std::os::raw::c_void,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetProcAddress@Device@nvn@@UEBAP6AXXZPEBD@Z"]
            pub fn Device_GetProcAddress(
                this: *mut ::std::os::raw::c_void,
                name: *const ::std::os::raw::c_char,
            ) -> root::nvn::GenericFuncPtr;
        }
        extern "C" {
            #[link_name = "\u{1}?GetInteger@Device@nvn@@UEBAXUDeviceInfo@2@PEAH@Z"]
            pub fn Device_GetInteger(
                this: *mut ::std::os::raw::c_void,
                pname: root::nvn::DeviceInfo,
                v: *mut ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetCurrentTimestampInNanoseconds@Device@nvn@@UEBA_KXZ"]
            pub fn Device_GetCurrentTimestampInNanoseconds(
                this: *mut ::std::os::raw::c_void,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}?GetTextureHandle@Device@nvn@@UEBA_KHH@Z"]
            pub fn Device_GetTextureHandle(
                this: *mut ::std::os::raw::c_void,
                textureID: ::std::os::raw::c_int,
                samplerID: ::std::os::raw::c_int,
            ) -> root::nvn::TextureHandle;
        }
        extern "C" {
            #[link_name = "\u{1}?GetTexelFetchHandle@Device@nvn@@UEBA_KH@Z"]
            pub fn Device_GetTexelFetchHandle(
                this: *mut ::std::os::raw::c_void,
                textureID: ::std::os::raw::c_int,
            ) -> root::nvn::TextureHandle;
        }
        extern "C" {
            #[link_name = "\u{1}?GetImageHandle@Device@nvn@@UEBA_KH@Z"]
            pub fn Device_GetImageHandle(
                this: *mut ::std::os::raw::c_void,
                imageID: ::std::os::raw::c_int,
            ) -> root::nvn::ImageHandle;
        }
        extern "C" {
            #[link_name = "\u{1}?InstallDebugCallback@Device@nvn@@UEAAXQ6AXW4Enum@DebugCallbackSource@2@W43DebugCallbackType@2@HW43DebugCallbackSeverity@2@PEBDPEAX@Z4_N@Z"]
            pub fn Device_InstallDebugCallback(
                this: *mut ::std::os::raw::c_void,
                callback: root::nvn::DebugCallback,
                callbackData: *mut ::std::os::raw::c_void,
                enable: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetWindowOriginMode@Device@nvn@@UEAAXUWindowOriginMode@2@@Z"]
            pub fn Device_SetWindowOriginMode(
                this: *mut ::std::os::raw::c_void,
                windowOriginMode: root::nvn::WindowOriginMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthMode@Device@nvn@@UEAAXUDepthMode@2@@Z"]
            pub fn Device_SetDepthMode(
                this: *mut ::std::os::raw::c_void,
                depthMode: root::nvn::DepthMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?RegisterFastClearColor@Device@nvn@@UEAA_NPEBMUFormat@2@@Z"]
            pub fn Device_RegisterFastClearColor(
                this: *mut ::std::os::raw::c_void,
                color: *const f32,
                format: root::nvn::Format,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?RegisterFastClearColori@Device@nvn@@UEAA_NPEBHUFormat@2@@Z"]
            pub fn Device_RegisterFastClearColori(
                this: *mut ::std::os::raw::c_void,
                color: *const ::std::os::raw::c_int,
                format: root::nvn::Format,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?RegisterFastClearColorui@Device@nvn@@UEAA_NPEBIUFormat@2@@Z"]
            pub fn Device_RegisterFastClearColorui(
                this: *mut ::std::os::raw::c_void,
                color: *const u32,
                format: root::nvn::Format,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?RegisterFastClearDepth@Device@nvn@@UEAA_NM@Z"]
            pub fn Device_RegisterFastClearDepth(
                this: *mut ::std::os::raw::c_void,
                depth: f32,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetWindowOriginMode@Device@nvn@@UEBA?AUWindowOriginMode@2@XZ"]
            pub fn Device_GetWindowOriginMode(
                this: *mut ::std::os::raw::c_void,
            ) -> root::nvn::WindowOriginMode;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepthMode@Device@nvn@@UEBA?AUDepthMode@2@XZ"]
            pub fn Device_GetDepthMode(this: *mut ::std::os::raw::c_void) -> root::nvn::DepthMode;
        }
        extern "C" {
            #[link_name = "\u{1}?GetTimestampInNanoseconds@Device@nvn@@UEBA_KPEBUCounterData@2@@Z"]
            pub fn Device_GetTimestampInNanoseconds(
                this: *mut ::std::os::raw::c_void,
                counterData: *const root::nvn::CounterData,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}?ApplyDeferredFinalizes@Device@nvn@@UEAAXH@Z"]
            pub fn Device_ApplyDeferredFinalizes(
                this: *mut ::std::os::raw::c_void,
                age: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?FinalizeCommandHandle@Device@nvn@@UEAAX_K@Z"]
            pub fn Device_FinalizeCommandHandle(
                this: *mut ::std::os::raw::c_void,
                handles: root::nvn::CommandHandle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?WaitForError@Device@nvn@@UEBA?AUDeviceWaitForErrorResult@2@_KPEAUDeviceErrorData@2@@Z"]
            pub fn Device_WaitForError(
                this: *mut ::std::os::raw::c_void,
                timeoutNs: u64,
                errorData: *mut root::nvn::DeviceErrorData,
            ) -> root::nvn::DeviceWaitForErrorResult;
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct QueueBuilder {
            pub internal: [u8; 64usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDevice@QueueBuilder@nvn@@QEAAAEAV12@PEAVDevice@2@@Z"]
            pub fn QueueBuilder_SetDevice(
                this: *mut root::nvn::QueueBuilder,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::QueueBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@QueueBuilder@nvn@@QEAAAEAV12@XZ"]
            pub fn QueueBuilder_SetDefaults(
                this: *mut root::nvn::QueueBuilder,
            ) -> *mut root::nvn::QueueBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetFlags@QueueBuilder@nvn@@QEAAAEAV12@UQueueFlags@2@@Z"]
            pub fn QueueBuilder_SetFlags(
                this: *mut root::nvn::QueueBuilder,
                flags: root::nvn::QueueFlags,
            ) -> *mut root::nvn::QueueBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetCommandMemorySize@QueueBuilder@nvn@@QEAAAEAV12@_K@Z"]
            pub fn QueueBuilder_SetCommandMemorySize(
                this: *mut root::nvn::QueueBuilder,
                size: root::size_t,
            ) -> *mut root::nvn::QueueBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetComputeMemorySize@QueueBuilder@nvn@@QEAAAEAV12@_K@Z"]
            pub fn QueueBuilder_SetComputeMemorySize(
                this: *mut root::nvn::QueueBuilder,
                size: root::size_t,
            ) -> *mut root::nvn::QueueBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?GetQueueMemorySize@QueueBuilder@nvn@@QEBA_KXZ"]
            pub fn QueueBuilder_GetQueueMemorySize(
                this: *const root::nvn::QueueBuilder,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?SetQueueMemory@QueueBuilder@nvn@@QEAAAEAV12@PEAX_K@Z"]
            pub fn QueueBuilder_SetQueueMemory(
                this: *mut root::nvn::QueueBuilder,
                memory: *mut ::std::os::raw::c_void,
                size: root::size_t,
            ) -> *mut root::nvn::QueueBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetCommandFlushThreshold@QueueBuilder@nvn@@QEAAAEAV12@_K@Z"]
            pub fn QueueBuilder_SetCommandFlushThreshold(
                this: *mut root::nvn::QueueBuilder,
                threshold: root::size_t,
            ) -> *mut root::nvn::QueueBuilder;
        }
        impl QueueBuilder {
            #[inline]
            pub unsafe fn SetDevice(
                &mut self,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::QueueBuilder {
                QueueBuilder_SetDevice(self, device)
            }
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::QueueBuilder {
                QueueBuilder_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetFlags(
                &mut self,
                flags: root::nvn::QueueFlags,
            ) -> *mut root::nvn::QueueBuilder {
                QueueBuilder_SetFlags(self, flags)
            }
            #[inline]
            pub unsafe fn SetCommandMemorySize(
                &mut self,
                size: root::size_t,
            ) -> *mut root::nvn::QueueBuilder {
                QueueBuilder_SetCommandMemorySize(self, size)
            }
            #[inline]
            pub unsafe fn SetComputeMemorySize(
                &mut self,
                size: root::size_t,
            ) -> *mut root::nvn::QueueBuilder {
                QueueBuilder_SetComputeMemorySize(self, size)
            }
            #[inline]
            pub unsafe fn GetQueueMemorySize(&self) -> root::size_t {
                QueueBuilder_GetQueueMemorySize(self)
            }
            #[inline]
            pub unsafe fn SetQueueMemory(
                &mut self,
                memory: *mut ::std::os::raw::c_void,
                size: root::size_t,
            ) -> *mut root::nvn::QueueBuilder {
                QueueBuilder_SetQueueMemory(self, memory, size)
            }
            #[inline]
            pub unsafe fn SetCommandFlushThreshold(
                &mut self,
                threshold: root::size_t,
            ) -> *mut root::nvn::QueueBuilder {
                QueueBuilder_SetCommandFlushThreshold(self, threshold)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Queue {
            pub internal: [u8; 8192usize],
        }
        extern "C" {
            #[link_name = "\u{1}?GetError@Queue@nvn@@QEAA?AUQueueGetErrorResult@2@PEATQueueErrorInfo@2@@Z"]
            pub fn Queue_GetError(
                this: *mut root::nvn::Queue,
                errorInfo: *mut root::nvn::QueueErrorInfo,
            ) -> root::nvn::QueueGetErrorResult;
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@Queue@nvn@@QEAA_NPEBVQueueBuilder@2@@Z"]
            pub fn Queue_Initialize(
                this: *mut root::nvn::Queue,
                builder: *const root::nvn::QueueBuilder,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@Queue@nvn@@QEAAXXZ"]
            pub fn Queue_Finalize(this: *mut root::nvn::Queue);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@Queue@nvn@@QEAAXPEBD@Z"]
            pub fn Queue_SetDebugLabel(
                this: *mut root::nvn::Queue,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SubmitCommands@Queue@nvn@@QEAAXHPEB_K@Z"]
            pub fn Queue_SubmitCommands(
                this: *mut root::nvn::Queue,
                numCommands: ::std::os::raw::c_int,
                handles: *const root::nvn::CommandHandle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?Flush@Queue@nvn@@QEAAXXZ"]
            pub fn Queue_Flush(this: *mut root::nvn::Queue);
        }
        extern "C" {
            #[link_name = "\u{1}?Finish@Queue@nvn@@QEAAXXZ"]
            pub fn Queue_Finish(this: *mut root::nvn::Queue);
        }
        extern "C" {
            #[link_name = "\u{1}?PresentTexture@Queue@nvn@@QEAAXPEAVWindow@2@H@Z"]
            pub fn Queue_PresentTexture(
                this: *mut root::nvn::Queue,
                window: *mut root::nvn::Window,
                textureIndex: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?AcquireTexture@Queue@nvn@@QEAA?AUQueueAcquireTextureResult@2@PEAVWindow@2@PEAH@Z"]
            pub fn Queue_AcquireTexture(
                this: *mut root::nvn::Queue,
                window: *mut root::nvn::Window,
                textureIndex: *mut ::std::os::raw::c_int,
            ) -> root::nvn::QueueAcquireTextureResult;
        }
        extern "C" {
            #[link_name = "\u{1}?FenceSync@Queue@nvn@@QEAAXPEAVSync@2@USyncCondition@2@USyncFlagBits@2@@Z"]
            pub fn Queue_FenceSync(
                this: *mut root::nvn::Queue,
                sync: *mut root::nvn::Sync,
                condition: root::nvn::SyncCondition,
                flags: root::nvn::SyncFlagBits,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?WaitSync@Queue@nvn@@QEAA_NPEBVSync@2@@Z"]
            pub fn Queue_WaitSync(
                this: *mut root::nvn::Queue,
                sync: *const root::nvn::Sync,
            ) -> bool;
        }
        impl Queue {
            #[inline]
            pub unsafe fn GetError(
                &mut self,
                errorInfo: *mut root::nvn::QueueErrorInfo,
            ) -> root::nvn::QueueGetErrorResult {
                Queue_GetError(self, errorInfo)
            }
            #[inline]
            pub unsafe fn Initialize(&mut self, builder: *const root::nvn::QueueBuilder) -> bool {
                Queue_Initialize(self, builder)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                Queue_Finalize(self)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                Queue_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn SubmitCommands(
                &mut self,
                numCommands: ::std::os::raw::c_int,
                handles: *const root::nvn::CommandHandle,
            ) {
                Queue_SubmitCommands(self, numCommands, handles)
            }
            #[inline]
            pub unsafe fn Flush(&mut self) {
                Queue_Flush(self)
            }
            #[inline]
            pub unsafe fn Finish(&mut self) {
                Queue_Finish(self)
            }
            #[inline]
            pub unsafe fn PresentTexture(
                &mut self,
                window: *mut root::nvn::Window,
                textureIndex: ::std::os::raw::c_int,
            ) {
                Queue_PresentTexture(self, window, textureIndex)
            }
            #[inline]
            pub unsafe fn AcquireTexture(
                &mut self,
                window: *mut root::nvn::Window,
                textureIndex: *mut ::std::os::raw::c_int,
            ) -> root::nvn::QueueAcquireTextureResult {
                Queue_AcquireTexture(self, window, textureIndex)
            }
            #[inline]
            pub unsafe fn FenceSync(
                &mut self,
                sync: *mut root::nvn::Sync,
                condition: root::nvn::SyncCondition,
                flags: root::nvn::SyncFlagBits,
            ) {
                Queue_FenceSync(self, sync, condition, flags)
            }
            #[inline]
            pub unsafe fn WaitSync(&mut self, sync: *const root::nvn::Sync) -> bool {
                Queue_WaitSync(self, sync)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CommandBuffer {
            pub internal: [u8; 160usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@CommandBuffer@nvn@@QEAA_NPEAVDevice@2@@Z"]
            pub fn CommandBuffer_Initialize(
                this: *mut root::nvn::CommandBuffer,
                device: *mut root::nvn::Device,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@CommandBuffer@nvn@@QEAAXXZ"]
            pub fn CommandBuffer_Finalize(this: *mut root::nvn::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@CommandBuffer@nvn@@QEAAXPEBD@Z"]
            pub fn CommandBuffer_SetDebugLabel(
                this: *mut root::nvn::CommandBuffer,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetMemoryCallback@CommandBuffer@nvn@@QEAAXP6AXPEAV12@W4Enum@CommandBufferMemoryEvent@2@_KPEAX@Z@Z"]
            pub fn CommandBuffer_SetMemoryCallback(
                this: *mut root::nvn::CommandBuffer,
                callback: root::nvn::CommandBufferMemoryCallback,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetMemoryCallbackData@CommandBuffer@nvn@@QEAAXPEAX@Z"]
            pub fn CommandBuffer_SetMemoryCallbackData(
                this: *mut root::nvn::CommandBuffer,
                callbackData: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?AddCommandMemory@CommandBuffer@nvn@@QEAAXPEBVMemoryPool@2@_J_K@Z"]
            pub fn CommandBuffer_AddCommandMemory(
                this: *mut root::nvn::CommandBuffer,
                pool: *const root::nvn::MemoryPool,
                offset: isize,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?AddControlMemory@CommandBuffer@nvn@@QEAAXPEAX_K@Z"]
            pub fn CommandBuffer_AddControlMemory(
                this: *mut root::nvn::CommandBuffer,
                memory: *mut ::std::os::raw::c_void,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetCommandMemorySize@CommandBuffer@nvn@@QEBA_KXZ"]
            pub fn CommandBuffer_GetCommandMemorySize(
                this: *const root::nvn::CommandBuffer,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCommandMemoryUsed@CommandBuffer@nvn@@QEBA_KXZ"]
            pub fn CommandBuffer_GetCommandMemoryUsed(
                this: *const root::nvn::CommandBuffer,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCommandMemoryFree@CommandBuffer@nvn@@QEBA_KXZ"]
            pub fn CommandBuffer_GetCommandMemoryFree(
                this: *const root::nvn::CommandBuffer,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetControlMemorySize@CommandBuffer@nvn@@QEBA_KXZ"]
            pub fn CommandBuffer_GetControlMemorySize(
                this: *const root::nvn::CommandBuffer,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetControlMemoryUsed@CommandBuffer@nvn@@QEBA_KXZ"]
            pub fn CommandBuffer_GetControlMemoryUsed(
                this: *const root::nvn::CommandBuffer,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetControlMemoryFree@CommandBuffer@nvn@@QEBA_KXZ"]
            pub fn CommandBuffer_GetControlMemoryFree(
                this: *const root::nvn::CommandBuffer,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?BeginRecording@CommandBuffer@nvn@@QEAAXXZ"]
            pub fn CommandBuffer_BeginRecording(this: *mut root::nvn::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}?EndRecording@CommandBuffer@nvn@@QEAA_KXZ"]
            pub fn CommandBuffer_EndRecording(
                this: *mut root::nvn::CommandBuffer,
            ) -> root::nvn::CommandHandle;
        }
        extern "C" {
            #[link_name = "\u{1}?CallCommands@CommandBuffer@nvn@@QEAAXHPEB_K@Z"]
            pub fn CommandBuffer_CallCommands(
                this: *mut root::nvn::CommandBuffer,
                numCommands: ::std::os::raw::c_int,
                handles: *const root::nvn::CommandHandle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?CopyCommands@CommandBuffer@nvn@@QEAAXHPEB_K@Z"]
            pub fn CommandBuffer_CopyCommands(
                this: *mut root::nvn::CommandBuffer,
                numCommands: ::std::os::raw::c_int,
                handles: *const root::nvn::CommandHandle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindBlendState@CommandBuffer@nvn@@QEAAXPEBVBlendState@2@@Z"]
            pub fn CommandBuffer_BindBlendState(
                this: *mut root::nvn::CommandBuffer,
                blend: *const root::nvn::BlendState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindChannelMaskState@CommandBuffer@nvn@@QEAAXPEBVChannelMaskState@2@@Z"]
            pub fn CommandBuffer_BindChannelMaskState(
                this: *mut root::nvn::CommandBuffer,
                channelMask: *const root::nvn::ChannelMaskState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindColorState@CommandBuffer@nvn@@QEAAXPEBVColorState@2@@Z"]
            pub fn CommandBuffer_BindColorState(
                this: *mut root::nvn::CommandBuffer,
                color: *const root::nvn::ColorState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindMultisampleState@CommandBuffer@nvn@@QEAAXPEBVMultisampleState@2@@Z"]
            pub fn CommandBuffer_BindMultisampleState(
                this: *mut root::nvn::CommandBuffer,
                multisample: *const root::nvn::MultisampleState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindPolygonState@CommandBuffer@nvn@@QEAAXPEBVPolygonState@2@@Z"]
            pub fn CommandBuffer_BindPolygonState(
                this: *mut root::nvn::CommandBuffer,
                polygon: *const root::nvn::PolygonState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindDepthStencilState@CommandBuffer@nvn@@QEAAXPEBVDepthStencilState@2@@Z"]
            pub fn CommandBuffer_BindDepthStencilState(
                this: *mut root::nvn::CommandBuffer,
                depthStencil: *const root::nvn::DepthStencilState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindVertexAttribState@CommandBuffer@nvn@@QEAAXHPEBVVertexAttribState@2@@Z"]
            pub fn CommandBuffer_BindVertexAttribState(
                this: *mut root::nvn::CommandBuffer,
                numAttribs: ::std::os::raw::c_int,
                attribs: *const root::nvn::VertexAttribState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindVertexStreamState@CommandBuffer@nvn@@QEAAXHPEBVVertexStreamState@2@@Z"]
            pub fn CommandBuffer_BindVertexStreamState(
                this: *mut root::nvn::CommandBuffer,
                numStreams: ::std::os::raw::c_int,
                streams: *const root::nvn::VertexStreamState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindProgram@CommandBuffer@nvn@@QEAAXPEBVProgram@2@UShaderStageBits@2@@Z"]
            pub fn CommandBuffer_BindProgram(
                this: *mut root::nvn::CommandBuffer,
                program: *const root::nvn::Program,
                stages: root::nvn::ShaderStageBits,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindVertexBuffer@CommandBuffer@nvn@@QEAAXH_K0@Z"]
            pub fn CommandBuffer_BindVertexBuffer(
                this: *mut root::nvn::CommandBuffer,
                index: ::std::os::raw::c_int,
                buffer: root::nvn::BufferAddress,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindVertexBuffers@CommandBuffer@nvn@@QEAAXHHPEBUBufferRange@2@@Z"]
            pub fn CommandBuffer_BindVertexBuffers(
                this: *mut root::nvn::CommandBuffer,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                buffers: *const root::nvn::BufferRange,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindUniformBuffer@CommandBuffer@nvn@@QEAAXUShaderStage@2@H_K1@Z"]
            pub fn CommandBuffer_BindUniformBuffer(
                this: *mut root::nvn::CommandBuffer,
                stage: root::nvn::ShaderStage,
                index: ::std::os::raw::c_int,
                buffer: root::nvn::BufferAddress,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindUniformBuffers@CommandBuffer@nvn@@QEAAXUShaderStage@2@HHPEBUBufferRange@2@@Z"]
            pub fn CommandBuffer_BindUniformBuffers(
                this: *mut root::nvn::CommandBuffer,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                buffers: *const root::nvn::BufferRange,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindTransformFeedbackBuffer@CommandBuffer@nvn@@QEAAXH_K0@Z"]
            pub fn CommandBuffer_BindTransformFeedbackBuffer(
                this: *mut root::nvn::CommandBuffer,
                index: ::std::os::raw::c_int,
                buffer: root::nvn::BufferAddress,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindTransformFeedbackBuffers@CommandBuffer@nvn@@QEAAXHHPEBUBufferRange@2@@Z"]
            pub fn CommandBuffer_BindTransformFeedbackBuffers(
                this: *mut root::nvn::CommandBuffer,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                buffers: *const root::nvn::BufferRange,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindStorageBuffer@CommandBuffer@nvn@@QEAAXUShaderStage@2@H_K1@Z"]
            pub fn CommandBuffer_BindStorageBuffer(
                this: *mut root::nvn::CommandBuffer,
                stage: root::nvn::ShaderStage,
                index: ::std::os::raw::c_int,
                buffer: root::nvn::BufferAddress,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindStorageBuffers@CommandBuffer@nvn@@QEAAXUShaderStage@2@HHPEBUBufferRange@2@@Z"]
            pub fn CommandBuffer_BindStorageBuffers(
                this: *mut root::nvn::CommandBuffer,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                buffers: *const root::nvn::BufferRange,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindTexture@CommandBuffer@nvn@@QEAAXUShaderStage@2@H_K@Z"]
            pub fn CommandBuffer_BindTexture(
                this: *mut root::nvn::CommandBuffer,
                stage: root::nvn::ShaderStage,
                index: ::std::os::raw::c_int,
                texture: root::nvn::TextureHandle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindTextures@CommandBuffer@nvn@@QEAAXUShaderStage@2@HHPEB_K@Z"]
            pub fn CommandBuffer_BindTextures(
                this: *mut root::nvn::CommandBuffer,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                textures: *const root::nvn::TextureHandle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindImage@CommandBuffer@nvn@@QEAAXUShaderStage@2@H_K@Z"]
            pub fn CommandBuffer_BindImage(
                this: *mut root::nvn::CommandBuffer,
                stage: root::nvn::ShaderStage,
                index: ::std::os::raw::c_int,
                image: root::nvn::ImageHandle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindImages@CommandBuffer@nvn@@QEAAXUShaderStage@2@HHPEB_K@Z"]
            pub fn CommandBuffer_BindImages(
                this: *mut root::nvn::CommandBuffer,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                images: *const root::nvn::ImageHandle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetPatchSize@CommandBuffer@nvn@@QEAAXH@Z"]
            pub fn CommandBuffer_SetPatchSize(
                this: *mut root::nvn::CommandBuffer,
                size: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetInnerTessellationLevels@CommandBuffer@nvn@@QEAAXPEBM@Z"]
            pub fn CommandBuffer_SetInnerTessellationLevels(
                this: *mut root::nvn::CommandBuffer,
                levels: *const f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetOuterTessellationLevels@CommandBuffer@nvn@@QEAAXPEBM@Z"]
            pub fn CommandBuffer_SetOuterTessellationLevels(
                this: *mut root::nvn::CommandBuffer,
                levels: *const f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetPrimitiveRestart@CommandBuffer@nvn@@QEAAX_NH@Z"]
            pub fn CommandBuffer_SetPrimitiveRestart(
                this: *mut root::nvn::CommandBuffer,
                enable: bool,
                index: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BeginTransformFeedback@CommandBuffer@nvn@@QEAAX_K@Z"]
            pub fn CommandBuffer_BeginTransformFeedback(
                this: *mut root::nvn::CommandBuffer,
                buffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?EndTransformFeedback@CommandBuffer@nvn@@QEAAX_K@Z"]
            pub fn CommandBuffer_EndTransformFeedback(
                this: *mut root::nvn::CommandBuffer,
                buffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?PauseTransformFeedback@CommandBuffer@nvn@@QEAAX_K@Z"]
            pub fn CommandBuffer_PauseTransformFeedback(
                this: *mut root::nvn::CommandBuffer,
                buffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ResumeTransformFeedback@CommandBuffer@nvn@@QEAAX_K@Z"]
            pub fn CommandBuffer_ResumeTransformFeedback(
                this: *mut root::nvn::CommandBuffer,
                buffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DrawTransformFeedback@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@_K@Z"]
            pub fn CommandBuffer_DrawTransformFeedback(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                buffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DrawArrays@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@HH@Z"]
            pub fn CommandBuffer_DrawArrays(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DrawElements@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@UIndexType@2@H_K@Z"]
            pub fn CommandBuffer_DrawElements(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                count: ::std::os::raw::c_int,
                indexBuffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DrawElementsBaseVertex@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@UIndexType@2@H_KH@Z"]
            pub fn CommandBuffer_DrawElementsBaseVertex(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                count: ::std::os::raw::c_int,
                indexBuffer: root::nvn::BufferAddress,
                baseVertex: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DrawArraysInstanced@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@HHHH@Z"]
            pub fn CommandBuffer_DrawArraysInstanced(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                baseInstance: ::std::os::raw::c_int,
                instanceCount: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DrawElementsInstanced@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@UIndexType@2@H_KHHH@Z"]
            pub fn CommandBuffer_DrawElementsInstanced(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                count: ::std::os::raw::c_int,
                indexBuffer: root::nvn::BufferAddress,
                baseVertex: ::std::os::raw::c_int,
                baseInstance: ::std::os::raw::c_int,
                instanceCount: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DrawArraysIndirect@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@_K@Z"]
            pub fn CommandBuffer_DrawArraysIndirect(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                indirectBuffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DrawElementsIndirect@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@UIndexType@2@_K2@Z"]
            pub fn CommandBuffer_DrawElementsIndirect(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                indexBuffer: root::nvn::BufferAddress,
                indirectBuffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?MultiDrawArraysIndirectCount@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@_K1H_J@Z"]
            pub fn CommandBuffer_MultiDrawArraysIndirectCount(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                indirectBuffer: root::nvn::BufferAddress,
                parameterBuffer: root::nvn::BufferAddress,
                maxDrawCount: ::std::os::raw::c_int,
                stride: isize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?MultiDrawElementsIndirectCount@CommandBuffer@nvn@@QEAAXUDrawPrimitive@2@UIndexType@2@_K22H_J@Z"]
            pub fn CommandBuffer_MultiDrawElementsIndirectCount(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                indexBuffer: root::nvn::BufferAddress,
                indirectBuffer: root::nvn::BufferAddress,
                parameterBuffer: root::nvn::BufferAddress,
                maxDrawCount: ::std::os::raw::c_int,
                stride: isize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ClearColor@CommandBuffer@nvn@@QEAAXHPEBMUClearColorMask@2@@Z"]
            pub fn CommandBuffer_ClearColor(
                this: *mut root::nvn::CommandBuffer,
                index: ::std::os::raw::c_int,
                color: *const f32,
                mask: root::nvn::ClearColorMask,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ClearColori@CommandBuffer@nvn@@QEAAXHPEBHUClearColorMask@2@@Z"]
            pub fn CommandBuffer_ClearColori(
                this: *mut root::nvn::CommandBuffer,
                index: ::std::os::raw::c_int,
                color: *const ::std::os::raw::c_int,
                mask: root::nvn::ClearColorMask,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ClearColorui@CommandBuffer@nvn@@QEAAXHPEBIUClearColorMask@2@@Z"]
            pub fn CommandBuffer_ClearColorui(
                this: *mut root::nvn::CommandBuffer,
                index: ::std::os::raw::c_int,
                color: *const u32,
                mask: root::nvn::ClearColorMask,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ClearDepthStencil@CommandBuffer@nvn@@QEAAXM_NHH@Z"]
            pub fn CommandBuffer_ClearDepthStencil(
                this: *mut root::nvn::CommandBuffer,
                depthValue: f32,
                depthMask: bool,
                stencilValue: ::std::os::raw::c_int,
                stencilMask: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DispatchCompute@CommandBuffer@nvn@@QEAAXHHH@Z"]
            pub fn CommandBuffer_DispatchCompute(
                this: *mut root::nvn::CommandBuffer,
                groupsX: ::std::os::raw::c_int,
                groupsY: ::std::os::raw::c_int,
                groupsZ: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DispatchComputeIndirect@CommandBuffer@nvn@@QEAAX_K@Z"]
            pub fn CommandBuffer_DispatchComputeIndirect(
                this: *mut root::nvn::CommandBuffer,
                indirectBuffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetViewport@CommandBuffer@nvn@@QEAAXHHHH@Z"]
            pub fn CommandBuffer_SetViewport(
                this: *mut root::nvn::CommandBuffer,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetViewports@CommandBuffer@nvn@@QEAAXHHPEBM@Z"]
            pub fn CommandBuffer_SetViewports(
                this: *mut root::nvn::CommandBuffer,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                ranges: *const f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetViewportSwizzles@CommandBuffer@nvn@@QEAAXHHPEBUViewportSwizzle@2@@Z"]
            pub fn CommandBuffer_SetViewportSwizzles(
                this: *mut root::nvn::CommandBuffer,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                swizzles: *const root::nvn::ViewportSwizzle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetScissor@CommandBuffer@nvn@@QEAAXHHHH@Z"]
            pub fn CommandBuffer_SetScissor(
                this: *mut root::nvn::CommandBuffer,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetScissors@CommandBuffer@nvn@@QEAAXHHPEBH@Z"]
            pub fn CommandBuffer_SetScissors(
                this: *mut root::nvn::CommandBuffer,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                rects: *const ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthRange@CommandBuffer@nvn@@QEAAXMM@Z"]
            pub fn CommandBuffer_SetDepthRange(this: *mut root::nvn::CommandBuffer, n: f32, f: f32);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthBounds@CommandBuffer@nvn@@QEAAX_NMM@Z"]
            pub fn CommandBuffer_SetDepthBounds(
                this: *mut root::nvn::CommandBuffer,
                enable: bool,
                n: f32,
                f: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthRanges@CommandBuffer@nvn@@QEAAXHHPEBM@Z"]
            pub fn CommandBuffer_SetDepthRanges(
                this: *mut root::nvn::CommandBuffer,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                ranges: *const f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetTiledCacheAction@CommandBuffer@nvn@@QEAAXUTiledCacheAction@2@@Z"]
            pub fn CommandBuffer_SetTiledCacheAction(
                this: *mut root::nvn::CommandBuffer,
                action: root::nvn::TiledCacheAction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetTiledCacheTileSize@CommandBuffer@nvn@@QEAAXHH@Z"]
            pub fn CommandBuffer_SetTiledCacheTileSize(
                this: *mut root::nvn::CommandBuffer,
                tileWidth: ::std::os::raw::c_int,
                tileHeight: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetStencilValueMask@CommandBuffer@nvn@@QEAAXUFace@2@H@Z"]
            pub fn CommandBuffer_SetStencilValueMask(
                this: *mut root::nvn::CommandBuffer,
                faces: root::nvn::Face,
                mask: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetStencilMask@CommandBuffer@nvn@@QEAAXUFace@2@H@Z"]
            pub fn CommandBuffer_SetStencilMask(
                this: *mut root::nvn::CommandBuffer,
                faces: root::nvn::Face,
                mask: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetStencilRef@CommandBuffer@nvn@@QEAAXUFace@2@H@Z"]
            pub fn CommandBuffer_SetStencilRef(
                this: *mut root::nvn::CommandBuffer,
                faces: root::nvn::Face,
                ref_: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetBlendColor@CommandBuffer@nvn@@QEAAXPEBM@Z"]
            pub fn CommandBuffer_SetBlendColor(
                this: *mut root::nvn::CommandBuffer,
                blendColor: *const f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetPointSize@CommandBuffer@nvn@@QEAAXM@Z"]
            pub fn CommandBuffer_SetPointSize(this: *mut root::nvn::CommandBuffer, pointSize: f32);
        }
        extern "C" {
            #[link_name = "\u{1}?SetLineWidth@CommandBuffer@nvn@@QEAAXM@Z"]
            pub fn CommandBuffer_SetLineWidth(this: *mut root::nvn::CommandBuffer, lineWidth: f32);
        }
        extern "C" {
            #[link_name = "\u{1}?SetPolygonOffsetClamp@CommandBuffer@nvn@@QEAAXMMM@Z"]
            pub fn CommandBuffer_SetPolygonOffsetClamp(
                this: *mut root::nvn::CommandBuffer,
                factor: f32,
                units: f32,
                clamp: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetAlphaRef@CommandBuffer@nvn@@QEAAXM@Z"]
            pub fn CommandBuffer_SetAlphaRef(this: *mut root::nvn::CommandBuffer, ref_: f32);
        }
        extern "C" {
            #[link_name = "\u{1}?SetSampleMask@CommandBuffer@nvn@@QEAAXH@Z"]
            pub fn CommandBuffer_SetSampleMask(
                this: *mut root::nvn::CommandBuffer,
                mask: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetRasterizerDiscard@CommandBuffer@nvn@@QEAAX_N@Z"]
            pub fn CommandBuffer_SetRasterizerDiscard(
                this: *mut root::nvn::CommandBuffer,
                discard: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthClamp@CommandBuffer@nvn@@QEAAX_N@Z"]
            pub fn CommandBuffer_SetDepthClamp(this: *mut root::nvn::CommandBuffer, clamp: bool);
        }
        extern "C" {
            #[link_name = "\u{1}?SetConservativeRasterEnable@CommandBuffer@nvn@@QEAAX_N@Z"]
            pub fn CommandBuffer_SetConservativeRasterEnable(
                this: *mut root::nvn::CommandBuffer,
                enable: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetConservativeRasterDilate@CommandBuffer@nvn@@QEAAXM@Z"]
            pub fn CommandBuffer_SetConservativeRasterDilate(
                this: *mut root::nvn::CommandBuffer,
                dilate: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetSubpixelPrecisionBias@CommandBuffer@nvn@@QEAAXHH@Z"]
            pub fn CommandBuffer_SetSubpixelPrecisionBias(
                this: *mut root::nvn::CommandBuffer,
                xBits: ::std::os::raw::c_int,
                yBits: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?CopyBufferToTexture@CommandBuffer@nvn@@QEAAX_KPEBVTexture@2@PEBVTextureView@2@PEBUCopyRegion@2@UCopyFlags@2@@Z"]
            pub fn CommandBuffer_CopyBufferToTexture(
                this: *mut root::nvn::CommandBuffer,
                src: root::nvn::BufferAddress,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                flags: root::nvn::CopyFlags,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?CopyTextureToBuffer@CommandBuffer@nvn@@QEAAXPEBVTexture@2@PEBVTextureView@2@PEBUCopyRegion@2@_KUCopyFlags@2@@Z"]
            pub fn CommandBuffer_CopyTextureToBuffer(
                this: *mut root::nvn::CommandBuffer,
                srcTexture: *const root::nvn::Texture,
                srcView: *const root::nvn::TextureView,
                srcRegion: *const root::nvn::CopyRegion,
                dst: root::nvn::BufferAddress,
                flags: root::nvn::CopyFlags,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?CopyTextureToTexture@CommandBuffer@nvn@@QEAAXPEBVTexture@2@PEBVTextureView@2@PEBUCopyRegion@2@012UCopyFlags@2@@Z"]
            pub fn CommandBuffer_CopyTextureToTexture(
                this: *mut root::nvn::CommandBuffer,
                srcTexture: *const root::nvn::Texture,
                srcView: *const root::nvn::TextureView,
                srcRegion: *const root::nvn::CopyRegion,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                flags: root::nvn::CopyFlags,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?CopyBufferToBuffer@CommandBuffer@nvn@@QEAAX_K00UCopyFlags@2@@Z"]
            pub fn CommandBuffer_CopyBufferToBuffer(
                this: *mut root::nvn::CommandBuffer,
                src: root::nvn::BufferAddress,
                dst: root::nvn::BufferAddress,
                size: root::size_t,
                flags: root::nvn::CopyFlags,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ClearBuffer@CommandBuffer@nvn@@QEAAX_K0I@Z"]
            pub fn CommandBuffer_ClearBuffer(
                this: *mut root::nvn::CommandBuffer,
                dst: root::nvn::BufferAddress,
                size: root::size_t,
                value: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ClearTexture@CommandBuffer@nvn@@QEAAXPEBVTexture@2@PEBVTextureView@2@PEBUCopyRegion@2@PEBMUClearColorMask@2@@Z"]
            pub fn CommandBuffer_ClearTexture(
                this: *mut root::nvn::CommandBuffer,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                color: *const f32,
                mask: root::nvn::ClearColorMask,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ClearTexturei@CommandBuffer@nvn@@QEAAXPEBVTexture@2@PEBVTextureView@2@PEBUCopyRegion@2@PEBHUClearColorMask@2@@Z"]
            pub fn CommandBuffer_ClearTexturei(
                this: *mut root::nvn::CommandBuffer,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                color: *const ::std::os::raw::c_int,
                mask: root::nvn::ClearColorMask,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ClearTextureui@CommandBuffer@nvn@@QEAAXPEBVTexture@2@PEBVTextureView@2@PEBUCopyRegion@2@PEBIUClearColorMask@2@@Z"]
            pub fn CommandBuffer_ClearTextureui(
                this: *mut root::nvn::CommandBuffer,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                color: *const u32,
                mask: root::nvn::ClearColorMask,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?UpdateUniformBuffer@CommandBuffer@nvn@@QEAAX_K0_J0PEBX@Z"]
            pub fn CommandBuffer_UpdateUniformBuffer(
                this: *mut root::nvn::CommandBuffer,
                buffer: root::nvn::BufferAddress,
                bufferSize: root::size_t,
                updateOffset: isize,
                updateSize: root::size_t,
                data: *const ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ReportCounter@CommandBuffer@nvn@@QEAAXUCounterType@2@_K@Z"]
            pub fn CommandBuffer_ReportCounter(
                this: *mut root::nvn::CommandBuffer,
                counter: root::nvn::CounterType,
                buffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ResetCounter@CommandBuffer@nvn@@QEAAXUCounterType@2@@Z"]
            pub fn CommandBuffer_ResetCounter(
                this: *mut root::nvn::CommandBuffer,
                counter: root::nvn::CounterType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ReportValue@CommandBuffer@nvn@@QEAAXI_K@Z"]
            pub fn CommandBuffer_ReportValue(
                this: *mut root::nvn::CommandBuffer,
                value: u32,
                buffer: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetRenderEnable@CommandBuffer@nvn@@QEAAX_N@Z"]
            pub fn CommandBuffer_SetRenderEnable(this: *mut root::nvn::CommandBuffer, enable: bool);
        }
        extern "C" {
            #[link_name = "\u{1}?SetRenderEnableConditional@CommandBuffer@nvn@@QEAAXUConditionalRenderMode@2@_K@Z"]
            pub fn CommandBuffer_SetRenderEnableConditional(
                this: *mut root::nvn::CommandBuffer,
                mode: root::nvn::ConditionalRenderMode,
                counters: root::nvn::BufferAddress,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetRenderTargets@CommandBuffer@nvn@@QEAAXHPEBQEBVTexture@2@PEBQEBVTextureView@2@PEBV32@PEBV42@@Z"]
            pub fn CommandBuffer_SetRenderTargets(
                this: *mut root::nvn::CommandBuffer,
                numColors: ::std::os::raw::c_int,
                colors: *const *const root::nvn::Texture,
                colorViews: *const *const root::nvn::TextureView,
                depthStencil: *const root::nvn::Texture,
                depthStencilView: *const root::nvn::TextureView,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DiscardColor@CommandBuffer@nvn@@QEAAXH@Z"]
            pub fn CommandBuffer_DiscardColor(
                this: *mut root::nvn::CommandBuffer,
                index: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?DiscardDepthStencil@CommandBuffer@nvn@@QEAAXXZ"]
            pub fn CommandBuffer_DiscardDepthStencil(this: *mut root::nvn::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}?Downsample@CommandBuffer@nvn@@QEAAXPEBVTexture@2@0@Z"]
            pub fn CommandBuffer_Downsample(
                this: *mut root::nvn::CommandBuffer,
                src: *const root::nvn::Texture,
                dst: *const root::nvn::Texture,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?TiledDownsample@CommandBuffer@nvn@@QEAAXPEBVTexture@2@0@Z"]
            pub fn CommandBuffer_TiledDownsample(
                this: *mut root::nvn::CommandBuffer,
                src: *const root::nvn::Texture,
                dst: *const root::nvn::Texture,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?Barrier@CommandBuffer@nvn@@QEAAXUBarrierBits@2@@Z"]
            pub fn CommandBuffer_Barrier(
                this: *mut root::nvn::CommandBuffer,
                barrier: root::nvn::BarrierBits,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?WaitSync@CommandBuffer@nvn@@QEAAXPEBVSync@2@@Z"]
            pub fn CommandBuffer_WaitSync(
                this: *mut root::nvn::CommandBuffer,
                sync: *const root::nvn::Sync,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?FenceSync@CommandBuffer@nvn@@QEAAXPEAVSync@2@USyncCondition@2@USyncFlagBits@2@@Z"]
            pub fn CommandBuffer_FenceSync(
                this: *mut root::nvn::CommandBuffer,
                sync: *mut root::nvn::Sync,
                condition: root::nvn::SyncCondition,
                flags: root::nvn::SyncFlagBits,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetTexturePool@CommandBuffer@nvn@@QEAAXPEBVTexturePool@2@@Z"]
            pub fn CommandBuffer_SetTexturePool(
                this: *mut root::nvn::CommandBuffer,
                texturePool: *const root::nvn::TexturePool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetSamplerPool@CommandBuffer@nvn@@QEAAXPEBVSamplerPool@2@@Z"]
            pub fn CommandBuffer_SetSamplerPool(
                this: *mut root::nvn::CommandBuffer,
                samplerPool: *const root::nvn::SamplerPool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetShaderScratchMemory@CommandBuffer@nvn@@QEAAXPEBVMemoryPool@2@_J_K@Z"]
            pub fn CommandBuffer_SetShaderScratchMemory(
                this: *mut root::nvn::CommandBuffer,
                pool: *const root::nvn::MemoryPool,
                offset: isize,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SaveZCullData@CommandBuffer@nvn@@QEAAX_K0@Z"]
            pub fn CommandBuffer_SaveZCullData(
                this: *mut root::nvn::CommandBuffer,
                dst: root::nvn::BufferAddress,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?RestoreZCullData@CommandBuffer@nvn@@QEAAX_K0@Z"]
            pub fn CommandBuffer_RestoreZCullData(
                this: *mut root::nvn::CommandBuffer,
                src: root::nvn::BufferAddress,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetCopyRowStride@CommandBuffer@nvn@@QEAAX_J@Z"]
            pub fn CommandBuffer_SetCopyRowStride(
                this: *mut root::nvn::CommandBuffer,
                stride: isize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetCopyImageStride@CommandBuffer@nvn@@QEAAX_J@Z"]
            pub fn CommandBuffer_SetCopyImageStride(
                this: *mut root::nvn::CommandBuffer,
                stride: isize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetCopyRowStride@CommandBuffer@nvn@@QEBA_JXZ"]
            pub fn CommandBuffer_GetCopyRowStride(this: *const root::nvn::CommandBuffer) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCopyImageStride@CommandBuffer@nvn@@QEBA_JXZ"]
            pub fn CommandBuffer_GetCopyImageStride(this: *const root::nvn::CommandBuffer)
                -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?DrawTexture@CommandBuffer@nvn@@QEAAX_KPEBUDrawTextureRegion@2@1@Z"]
            pub fn CommandBuffer_DrawTexture(
                this: *mut root::nvn::CommandBuffer,
                texture: root::nvn::TextureHandle,
                dstRegion: *const root::nvn::DrawTextureRegion,
                srcRegion: *const root::nvn::DrawTextureRegion,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetProgramSubroutines@CommandBuffer@nvn@@QEAAXPEAVProgram@2@UShaderStage@2@HHPEBH@Z"]
            pub fn CommandBuffer_SetProgramSubroutines(
                this: *mut root::nvn::CommandBuffer,
                program: *mut root::nvn::Program,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                values: *const ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?BindCoverageModulationTable@CommandBuffer@nvn@@QEAAXPEBM@Z"]
            pub fn CommandBuffer_BindCoverageModulationTable(
                this: *mut root::nvn::CommandBuffer,
                entries: *const f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ResolveDepthBuffer@CommandBuffer@nvn@@QEAAXXZ"]
            pub fn CommandBuffer_ResolveDepthBuffer(this: *mut root::nvn::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}?PushDebugGroup@CommandBuffer@nvn@@QEAAXPEBD@Z"]
            pub fn CommandBuffer_PushDebugGroup(
                this: *mut root::nvn::CommandBuffer,
                description: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?PopDebugGroup@CommandBuffer@nvn@@QEAAXXZ"]
            pub fn CommandBuffer_PopDebugGroup(this: *mut root::nvn::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}?InsertDebugMarker@CommandBuffer@nvn@@QEAAXPEBD@Z"]
            pub fn CommandBuffer_InsertDebugMarker(
                this: *mut root::nvn::CommandBuffer,
                description: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryCallback@CommandBuffer@nvn@@QEBAP6AXPEAV12@W4Enum@CommandBufferMemoryEvent@2@_KPEAX@ZXZ"]
            pub fn CommandBuffer_GetMemoryCallback(
                this: *const root::nvn::CommandBuffer,
            ) -> root::nvn::CommandBufferMemoryCallback;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryCallbackData@CommandBuffer@nvn@@QEBAPEAXXZ"]
            pub fn CommandBuffer_GetMemoryCallbackData(
                this: *const root::nvn::CommandBuffer,
            ) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}?IsRecording@CommandBuffer@nvn@@QEBA_NXZ"]
            pub fn CommandBuffer_IsRecording(this: *const root::nvn::CommandBuffer) -> bool;
        }
        impl CommandBuffer {
            #[inline]
            pub unsafe fn Initialize(&mut self, device: *mut root::nvn::Device) -> bool {
                CommandBuffer_Initialize(self, device)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                CommandBuffer_Finalize(self)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                CommandBuffer_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn SetMemoryCallback(
                &mut self,
                callback: root::nvn::CommandBufferMemoryCallback,
            ) {
                CommandBuffer_SetMemoryCallback(self, callback)
            }
            #[inline]
            pub unsafe fn SetMemoryCallbackData(
                &mut self,
                callbackData: *mut ::std::os::raw::c_void,
            ) {
                CommandBuffer_SetMemoryCallbackData(self, callbackData)
            }
            #[inline]
            pub unsafe fn AddCommandMemory(
                &mut self,
                pool: *const root::nvn::MemoryPool,
                offset: isize,
                size: root::size_t,
            ) {
                CommandBuffer_AddCommandMemory(self, pool, offset, size)
            }
            #[inline]
            pub unsafe fn AddControlMemory(
                &mut self,
                memory: *mut ::std::os::raw::c_void,
                size: root::size_t,
            ) {
                CommandBuffer_AddControlMemory(self, memory, size)
            }
            #[inline]
            pub unsafe fn GetCommandMemorySize(&self) -> root::size_t {
                CommandBuffer_GetCommandMemorySize(self)
            }
            #[inline]
            pub unsafe fn GetCommandMemoryUsed(&self) -> root::size_t {
                CommandBuffer_GetCommandMemoryUsed(self)
            }
            #[inline]
            pub unsafe fn GetCommandMemoryFree(&self) -> root::size_t {
                CommandBuffer_GetCommandMemoryFree(self)
            }
            #[inline]
            pub unsafe fn GetControlMemorySize(&self) -> root::size_t {
                CommandBuffer_GetControlMemorySize(self)
            }
            #[inline]
            pub unsafe fn GetControlMemoryUsed(&self) -> root::size_t {
                CommandBuffer_GetControlMemoryUsed(self)
            }
            #[inline]
            pub unsafe fn GetControlMemoryFree(&self) -> root::size_t {
                CommandBuffer_GetControlMemoryFree(self)
            }
            #[inline]
            pub unsafe fn BeginRecording(&mut self) {
                CommandBuffer_BeginRecording(self)
            }
            #[inline]
            pub unsafe fn EndRecording(&mut self) -> root::nvn::CommandHandle {
                CommandBuffer_EndRecording(self)
            }
            #[inline]
            pub unsafe fn CallCommands(
                &mut self,
                numCommands: ::std::os::raw::c_int,
                handles: *const root::nvn::CommandHandle,
            ) {
                CommandBuffer_CallCommands(self, numCommands, handles)
            }
            #[inline]
            pub unsafe fn CopyCommands(
                &mut self,
                numCommands: ::std::os::raw::c_int,
                handles: *const root::nvn::CommandHandle,
            ) {
                CommandBuffer_CopyCommands(self, numCommands, handles)
            }
            #[inline]
            pub unsafe fn BindBlendState(&mut self, blend: *const root::nvn::BlendState) {
                CommandBuffer_BindBlendState(self, blend)
            }
            #[inline]
            pub unsafe fn BindChannelMaskState(
                &mut self,
                channelMask: *const root::nvn::ChannelMaskState,
            ) {
                CommandBuffer_BindChannelMaskState(self, channelMask)
            }
            #[inline]
            pub unsafe fn BindColorState(&mut self, color: *const root::nvn::ColorState) {
                CommandBuffer_BindColorState(self, color)
            }
            #[inline]
            pub unsafe fn BindMultisampleState(
                &mut self,
                multisample: *const root::nvn::MultisampleState,
            ) {
                CommandBuffer_BindMultisampleState(self, multisample)
            }
            #[inline]
            pub unsafe fn BindPolygonState(&mut self, polygon: *const root::nvn::PolygonState) {
                CommandBuffer_BindPolygonState(self, polygon)
            }
            #[inline]
            pub unsafe fn BindDepthStencilState(
                &mut self,
                depthStencil: *const root::nvn::DepthStencilState,
            ) {
                CommandBuffer_BindDepthStencilState(self, depthStencil)
            }
            #[inline]
            pub unsafe fn BindVertexAttribState(
                &mut self,
                numAttribs: ::std::os::raw::c_int,
                attribs: *const root::nvn::VertexAttribState,
            ) {
                CommandBuffer_BindVertexAttribState(self, numAttribs, attribs)
            }
            #[inline]
            pub unsafe fn BindVertexStreamState(
                &mut self,
                numStreams: ::std::os::raw::c_int,
                streams: *const root::nvn::VertexStreamState,
            ) {
                CommandBuffer_BindVertexStreamState(self, numStreams, streams)
            }
            #[inline]
            pub unsafe fn BindProgram(
                &mut self,
                program: *const root::nvn::Program,
                stages: root::nvn::ShaderStageBits,
            ) {
                CommandBuffer_BindProgram(self, program, stages)
            }
            #[inline]
            pub unsafe fn BindVertexBuffer(
                &mut self,
                index: ::std::os::raw::c_int,
                buffer: root::nvn::BufferAddress,
                size: root::size_t,
            ) {
                CommandBuffer_BindVertexBuffer(self, index, buffer, size)
            }
            #[inline]
            pub unsafe fn BindVertexBuffers(
                &mut self,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                buffers: *const root::nvn::BufferRange,
            ) {
                CommandBuffer_BindVertexBuffers(self, first, count, buffers)
            }
            #[inline]
            pub unsafe fn BindUniformBuffer(
                &mut self,
                stage: root::nvn::ShaderStage,
                index: ::std::os::raw::c_int,
                buffer: root::nvn::BufferAddress,
                size: root::size_t,
            ) {
                CommandBuffer_BindUniformBuffer(self, stage, index, buffer, size)
            }
            #[inline]
            pub unsafe fn BindUniformBuffers(
                &mut self,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                buffers: *const root::nvn::BufferRange,
            ) {
                CommandBuffer_BindUniformBuffers(self, stage, first, count, buffers)
            }
            #[inline]
            pub unsafe fn BindTransformFeedbackBuffer(
                &mut self,
                index: ::std::os::raw::c_int,
                buffer: root::nvn::BufferAddress,
                size: root::size_t,
            ) {
                CommandBuffer_BindTransformFeedbackBuffer(self, index, buffer, size)
            }
            #[inline]
            pub unsafe fn BindTransformFeedbackBuffers(
                &mut self,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                buffers: *const root::nvn::BufferRange,
            ) {
                CommandBuffer_BindTransformFeedbackBuffers(self, first, count, buffers)
            }
            #[inline]
            pub unsafe fn BindStorageBuffer(
                &mut self,
                stage: root::nvn::ShaderStage,
                index: ::std::os::raw::c_int,
                buffer: root::nvn::BufferAddress,
                size: root::size_t,
            ) {
                CommandBuffer_BindStorageBuffer(self, stage, index, buffer, size)
            }
            #[inline]
            pub unsafe fn BindStorageBuffers(
                &mut self,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                buffers: *const root::nvn::BufferRange,
            ) {
                CommandBuffer_BindStorageBuffers(self, stage, first, count, buffers)
            }
            #[inline]
            pub unsafe fn BindTexture(
                &mut self,
                stage: root::nvn::ShaderStage,
                index: ::std::os::raw::c_int,
                texture: root::nvn::TextureHandle,
            ) {
                CommandBuffer_BindTexture(self, stage, index, texture)
            }
            #[inline]
            pub unsafe fn BindTextures(
                &mut self,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                textures: *const root::nvn::TextureHandle,
            ) {
                CommandBuffer_BindTextures(self, stage, first, count, textures)
            }
            #[inline]
            pub unsafe fn BindImage(
                &mut self,
                stage: root::nvn::ShaderStage,
                index: ::std::os::raw::c_int,
                image: root::nvn::ImageHandle,
            ) {
                CommandBuffer_BindImage(self, stage, index, image)
            }
            #[inline]
            pub unsafe fn BindImages(
                &mut self,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                images: *const root::nvn::ImageHandle,
            ) {
                CommandBuffer_BindImages(self, stage, first, count, images)
            }
            #[inline]
            pub unsafe fn SetPatchSize(&mut self, size: ::std::os::raw::c_int) {
                CommandBuffer_SetPatchSize(self, size)
            }
            #[inline]
            pub unsafe fn SetInnerTessellationLevels(&mut self, levels: *const f32) {
                CommandBuffer_SetInnerTessellationLevels(self, levels)
            }
            #[inline]
            pub unsafe fn SetOuterTessellationLevels(&mut self, levels: *const f32) {
                CommandBuffer_SetOuterTessellationLevels(self, levels)
            }
            #[inline]
            pub unsafe fn SetPrimitiveRestart(
                &mut self,
                enable: bool,
                index: ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetPrimitiveRestart(self, enable, index)
            }
            #[inline]
            pub unsafe fn BeginTransformFeedback(&mut self, buffer: root::nvn::BufferAddress) {
                CommandBuffer_BeginTransformFeedback(self, buffer)
            }
            #[inline]
            pub unsafe fn EndTransformFeedback(&mut self, buffer: root::nvn::BufferAddress) {
                CommandBuffer_EndTransformFeedback(self, buffer)
            }
            #[inline]
            pub unsafe fn PauseTransformFeedback(&mut self, buffer: root::nvn::BufferAddress) {
                CommandBuffer_PauseTransformFeedback(self, buffer)
            }
            #[inline]
            pub unsafe fn ResumeTransformFeedback(&mut self, buffer: root::nvn::BufferAddress) {
                CommandBuffer_ResumeTransformFeedback(self, buffer)
            }
            #[inline]
            pub unsafe fn DrawTransformFeedback(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                buffer: root::nvn::BufferAddress,
            ) {
                CommandBuffer_DrawTransformFeedback(self, mode, buffer)
            }
            #[inline]
            pub unsafe fn DrawArrays(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
            ) {
                CommandBuffer_DrawArrays(self, mode, first, count)
            }
            #[inline]
            pub unsafe fn DrawElements(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                count: ::std::os::raw::c_int,
                indexBuffer: root::nvn::BufferAddress,
            ) {
                CommandBuffer_DrawElements(self, mode, type_, count, indexBuffer)
            }
            #[inline]
            pub unsafe fn DrawElementsBaseVertex(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                count: ::std::os::raw::c_int,
                indexBuffer: root::nvn::BufferAddress,
                baseVertex: ::std::os::raw::c_int,
            ) {
                CommandBuffer_DrawElementsBaseVertex(
                    self,
                    mode,
                    type_,
                    count,
                    indexBuffer,
                    baseVertex,
                )
            }
            #[inline]
            pub unsafe fn DrawArraysInstanced(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                baseInstance: ::std::os::raw::c_int,
                instanceCount: ::std::os::raw::c_int,
            ) {
                CommandBuffer_DrawArraysInstanced(
                    self,
                    mode,
                    first,
                    count,
                    baseInstance,
                    instanceCount,
                )
            }
            #[inline]
            pub unsafe fn DrawElementsInstanced(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                count: ::std::os::raw::c_int,
                indexBuffer: root::nvn::BufferAddress,
                baseVertex: ::std::os::raw::c_int,
                baseInstance: ::std::os::raw::c_int,
                instanceCount: ::std::os::raw::c_int,
            ) {
                CommandBuffer_DrawElementsInstanced(
                    self,
                    mode,
                    type_,
                    count,
                    indexBuffer,
                    baseVertex,
                    baseInstance,
                    instanceCount,
                )
            }
            #[inline]
            pub unsafe fn DrawArraysIndirect(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                indirectBuffer: root::nvn::BufferAddress,
            ) {
                CommandBuffer_DrawArraysIndirect(self, mode, indirectBuffer)
            }
            #[inline]
            pub unsafe fn DrawElementsIndirect(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                indexBuffer: root::nvn::BufferAddress,
                indirectBuffer: root::nvn::BufferAddress,
            ) {
                CommandBuffer_DrawElementsIndirect(self, mode, type_, indexBuffer, indirectBuffer)
            }
            #[inline]
            pub unsafe fn MultiDrawArraysIndirectCount(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                indirectBuffer: root::nvn::BufferAddress,
                parameterBuffer: root::nvn::BufferAddress,
                maxDrawCount: ::std::os::raw::c_int,
                stride: isize,
            ) {
                CommandBuffer_MultiDrawArraysIndirectCount(
                    self,
                    mode,
                    indirectBuffer,
                    parameterBuffer,
                    maxDrawCount,
                    stride,
                )
            }
            #[inline]
            pub unsafe fn MultiDrawElementsIndirectCount(
                &mut self,
                mode: root::nvn::DrawPrimitive,
                type_: root::nvn::IndexType,
                indexBuffer: root::nvn::BufferAddress,
                indirectBuffer: root::nvn::BufferAddress,
                parameterBuffer: root::nvn::BufferAddress,
                maxDrawCount: ::std::os::raw::c_int,
                stride: isize,
            ) {
                CommandBuffer_MultiDrawElementsIndirectCount(
                    self,
                    mode,
                    type_,
                    indexBuffer,
                    indirectBuffer,
                    parameterBuffer,
                    maxDrawCount,
                    stride,
                )
            }
            #[inline]
            pub unsafe fn ClearColor(
                &mut self,
                index: ::std::os::raw::c_int,
                color: *const f32,
                mask: root::nvn::ClearColorMask,
            ) {
                CommandBuffer_ClearColor(self, index, color, mask)
            }
            #[inline]
            pub unsafe fn ClearColori(
                &mut self,
                index: ::std::os::raw::c_int,
                color: *const ::std::os::raw::c_int,
                mask: root::nvn::ClearColorMask,
            ) {
                CommandBuffer_ClearColori(self, index, color, mask)
            }
            #[inline]
            pub unsafe fn ClearColorui(
                &mut self,
                index: ::std::os::raw::c_int,
                color: *const u32,
                mask: root::nvn::ClearColorMask,
            ) {
                CommandBuffer_ClearColorui(self, index, color, mask)
            }
            #[inline]
            pub unsafe fn ClearDepthStencil(
                &mut self,
                depthValue: f32,
                depthMask: bool,
                stencilValue: ::std::os::raw::c_int,
                stencilMask: ::std::os::raw::c_int,
            ) {
                CommandBuffer_ClearDepthStencil(
                    self,
                    depthValue,
                    depthMask,
                    stencilValue,
                    stencilMask,
                )
            }
            #[inline]
            pub unsafe fn DispatchCompute(
                &mut self,
                groupsX: ::std::os::raw::c_int,
                groupsY: ::std::os::raw::c_int,
                groupsZ: ::std::os::raw::c_int,
            ) {
                CommandBuffer_DispatchCompute(self, groupsX, groupsY, groupsZ)
            }
            #[inline]
            pub unsafe fn DispatchComputeIndirect(
                &mut self,
                indirectBuffer: root::nvn::BufferAddress,
            ) {
                CommandBuffer_DispatchComputeIndirect(self, indirectBuffer)
            }
            #[inline]
            pub unsafe fn SetViewport(
                &mut self,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetViewport(self, x, y, w, h)
            }
            #[inline]
            pub unsafe fn SetViewports(
                &mut self,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                ranges: *const f32,
            ) {
                CommandBuffer_SetViewports(self, first, count, ranges)
            }
            #[inline]
            pub unsafe fn SetViewportSwizzles(
                &mut self,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                swizzles: *const root::nvn::ViewportSwizzle,
            ) {
                CommandBuffer_SetViewportSwizzles(self, first, count, swizzles)
            }
            #[inline]
            pub unsafe fn SetScissor(
                &mut self,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetScissor(self, x, y, w, h)
            }
            #[inline]
            pub unsafe fn SetScissors(
                &mut self,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                rects: *const ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetScissors(self, first, count, rects)
            }
            #[inline]
            pub unsafe fn SetDepthRange(&mut self, n: f32, f: f32) {
                CommandBuffer_SetDepthRange(self, n, f)
            }
            #[inline]
            pub unsafe fn SetDepthBounds(&mut self, enable: bool, n: f32, f: f32) {
                CommandBuffer_SetDepthBounds(self, enable, n, f)
            }
            #[inline]
            pub unsafe fn SetDepthRanges(
                &mut self,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                ranges: *const f32,
            ) {
                CommandBuffer_SetDepthRanges(self, first, count, ranges)
            }
            #[inline]
            pub unsafe fn SetTiledCacheAction(&mut self, action: root::nvn::TiledCacheAction) {
                CommandBuffer_SetTiledCacheAction(self, action)
            }
            #[inline]
            pub unsafe fn SetTiledCacheTileSize(
                &mut self,
                tileWidth: ::std::os::raw::c_int,
                tileHeight: ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetTiledCacheTileSize(self, tileWidth, tileHeight)
            }
            #[inline]
            pub unsafe fn SetStencilValueMask(
                &mut self,
                faces: root::nvn::Face,
                mask: ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetStencilValueMask(self, faces, mask)
            }
            #[inline]
            pub unsafe fn SetStencilMask(
                &mut self,
                faces: root::nvn::Face,
                mask: ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetStencilMask(self, faces, mask)
            }
            #[inline]
            pub unsafe fn SetStencilRef(
                &mut self,
                faces: root::nvn::Face,
                ref_: ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetStencilRef(self, faces, ref_)
            }
            #[inline]
            pub unsafe fn SetBlendColor(&mut self, blendColor: *const f32) {
                CommandBuffer_SetBlendColor(self, blendColor)
            }
            #[inline]
            pub unsafe fn SetPointSize(&mut self, pointSize: f32) {
                CommandBuffer_SetPointSize(self, pointSize)
            }
            #[inline]
            pub unsafe fn SetLineWidth(&mut self, lineWidth: f32) {
                CommandBuffer_SetLineWidth(self, lineWidth)
            }
            #[inline]
            pub unsafe fn SetPolygonOffsetClamp(&mut self, factor: f32, units: f32, clamp: f32) {
                CommandBuffer_SetPolygonOffsetClamp(self, factor, units, clamp)
            }
            #[inline]
            pub unsafe fn SetAlphaRef(&mut self, ref_: f32) {
                CommandBuffer_SetAlphaRef(self, ref_)
            }
            #[inline]
            pub unsafe fn SetSampleMask(&mut self, mask: ::std::os::raw::c_int) {
                CommandBuffer_SetSampleMask(self, mask)
            }
            #[inline]
            pub unsafe fn SetRasterizerDiscard(&mut self, discard: bool) {
                CommandBuffer_SetRasterizerDiscard(self, discard)
            }
            #[inline]
            pub unsafe fn SetDepthClamp(&mut self, clamp: bool) {
                CommandBuffer_SetDepthClamp(self, clamp)
            }
            #[inline]
            pub unsafe fn SetConservativeRasterEnable(&mut self, enable: bool) {
                CommandBuffer_SetConservativeRasterEnable(self, enable)
            }
            #[inline]
            pub unsafe fn SetConservativeRasterDilate(&mut self, dilate: f32) {
                CommandBuffer_SetConservativeRasterDilate(self, dilate)
            }
            #[inline]
            pub unsafe fn SetSubpixelPrecisionBias(
                &mut self,
                xBits: ::std::os::raw::c_int,
                yBits: ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetSubpixelPrecisionBias(self, xBits, yBits)
            }
            #[inline]
            pub unsafe fn CopyBufferToTexture(
                &mut self,
                src: root::nvn::BufferAddress,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                flags: root::nvn::CopyFlags,
            ) {
                CommandBuffer_CopyBufferToTexture(self, src, dstTexture, dstView, dstRegion, flags)
            }
            #[inline]
            pub unsafe fn CopyTextureToBuffer(
                &mut self,
                srcTexture: *const root::nvn::Texture,
                srcView: *const root::nvn::TextureView,
                srcRegion: *const root::nvn::CopyRegion,
                dst: root::nvn::BufferAddress,
                flags: root::nvn::CopyFlags,
            ) {
                CommandBuffer_CopyTextureToBuffer(self, srcTexture, srcView, srcRegion, dst, flags)
            }
            #[inline]
            pub unsafe fn CopyTextureToTexture(
                &mut self,
                srcTexture: *const root::nvn::Texture,
                srcView: *const root::nvn::TextureView,
                srcRegion: *const root::nvn::CopyRegion,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                flags: root::nvn::CopyFlags,
            ) {
                CommandBuffer_CopyTextureToTexture(
                    self, srcTexture, srcView, srcRegion, dstTexture, dstView, dstRegion, flags,
                )
            }
            #[inline]
            pub unsafe fn CopyBufferToBuffer(
                &mut self,
                src: root::nvn::BufferAddress,
                dst: root::nvn::BufferAddress,
                size: root::size_t,
                flags: root::nvn::CopyFlags,
            ) {
                CommandBuffer_CopyBufferToBuffer(self, src, dst, size, flags)
            }
            #[inline]
            pub unsafe fn ClearBuffer(
                &mut self,
                dst: root::nvn::BufferAddress,
                size: root::size_t,
                value: u32,
            ) {
                CommandBuffer_ClearBuffer(self, dst, size, value)
            }
            #[inline]
            pub unsafe fn ClearTexture(
                &mut self,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                color: *const f32,
                mask: root::nvn::ClearColorMask,
            ) {
                CommandBuffer_ClearTexture(self, dstTexture, dstView, dstRegion, color, mask)
            }
            #[inline]
            pub unsafe fn ClearTexturei(
                &mut self,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                color: *const ::std::os::raw::c_int,
                mask: root::nvn::ClearColorMask,
            ) {
                CommandBuffer_ClearTexturei(self, dstTexture, dstView, dstRegion, color, mask)
            }
            #[inline]
            pub unsafe fn ClearTextureui(
                &mut self,
                dstTexture: *const root::nvn::Texture,
                dstView: *const root::nvn::TextureView,
                dstRegion: *const root::nvn::CopyRegion,
                color: *const u32,
                mask: root::nvn::ClearColorMask,
            ) {
                CommandBuffer_ClearTextureui(self, dstTexture, dstView, dstRegion, color, mask)
            }
            #[inline]
            pub unsafe fn UpdateUniformBuffer(
                &mut self,
                buffer: root::nvn::BufferAddress,
                bufferSize: root::size_t,
                updateOffset: isize,
                updateSize: root::size_t,
                data: *const ::std::os::raw::c_void,
            ) {
                CommandBuffer_UpdateUniformBuffer(
                    self,
                    buffer,
                    bufferSize,
                    updateOffset,
                    updateSize,
                    data,
                )
            }
            #[inline]
            pub unsafe fn ReportCounter(
                &mut self,
                counter: root::nvn::CounterType,
                buffer: root::nvn::BufferAddress,
            ) {
                CommandBuffer_ReportCounter(self, counter, buffer)
            }
            #[inline]
            pub unsafe fn ResetCounter(&mut self, counter: root::nvn::CounterType) {
                CommandBuffer_ResetCounter(self, counter)
            }
            #[inline]
            pub unsafe fn ReportValue(&mut self, value: u32, buffer: root::nvn::BufferAddress) {
                CommandBuffer_ReportValue(self, value, buffer)
            }
            #[inline]
            pub unsafe fn SetRenderEnable(&mut self, enable: bool) {
                CommandBuffer_SetRenderEnable(self, enable)
            }
            #[inline]
            pub unsafe fn SetRenderEnableConditional(
                &mut self,
                mode: root::nvn::ConditionalRenderMode,
                counters: root::nvn::BufferAddress,
            ) {
                CommandBuffer_SetRenderEnableConditional(self, mode, counters)
            }
            #[inline]
            pub unsafe fn SetRenderTargets(
                &mut self,
                numColors: ::std::os::raw::c_int,
                colors: *const *const root::nvn::Texture,
                colorViews: *const *const root::nvn::TextureView,
                depthStencil: *const root::nvn::Texture,
                depthStencilView: *const root::nvn::TextureView,
            ) {
                CommandBuffer_SetRenderTargets(
                    self,
                    numColors,
                    colors,
                    colorViews,
                    depthStencil,
                    depthStencilView,
                )
            }
            #[inline]
            pub unsafe fn DiscardColor(&mut self, index: ::std::os::raw::c_int) {
                CommandBuffer_DiscardColor(self, index)
            }
            #[inline]
            pub unsafe fn DiscardDepthStencil(&mut self) {
                CommandBuffer_DiscardDepthStencil(self)
            }
            #[inline]
            pub unsafe fn Downsample(
                &mut self,
                src: *const root::nvn::Texture,
                dst: *const root::nvn::Texture,
            ) {
                CommandBuffer_Downsample(self, src, dst)
            }
            #[inline]
            pub unsafe fn TiledDownsample(
                &mut self,
                src: *const root::nvn::Texture,
                dst: *const root::nvn::Texture,
            ) {
                CommandBuffer_TiledDownsample(self, src, dst)
            }
            #[inline]
            pub unsafe fn Barrier(&mut self, barrier: root::nvn::BarrierBits) {
                CommandBuffer_Barrier(self, barrier)
            }
            #[inline]
            pub unsafe fn WaitSync(&mut self, sync: *const root::nvn::Sync) {
                CommandBuffer_WaitSync(self, sync)
            }
            #[inline]
            pub unsafe fn FenceSync(
                &mut self,
                sync: *mut root::nvn::Sync,
                condition: root::nvn::SyncCondition,
                flags: root::nvn::SyncFlagBits,
            ) {
                CommandBuffer_FenceSync(self, sync, condition, flags)
            }
            #[inline]
            pub unsafe fn SetTexturePool(&mut self, texturePool: *const root::nvn::TexturePool) {
                CommandBuffer_SetTexturePool(self, texturePool)
            }
            #[inline]
            pub unsafe fn SetSamplerPool(&mut self, samplerPool: *const root::nvn::SamplerPool) {
                CommandBuffer_SetSamplerPool(self, samplerPool)
            }
            #[inline]
            pub unsafe fn SetShaderScratchMemory(
                &mut self,
                pool: *const root::nvn::MemoryPool,
                offset: isize,
                size: root::size_t,
            ) {
                CommandBuffer_SetShaderScratchMemory(self, pool, offset, size)
            }
            #[inline]
            pub unsafe fn SaveZCullData(
                &mut self,
                dst: root::nvn::BufferAddress,
                size: root::size_t,
            ) {
                CommandBuffer_SaveZCullData(self, dst, size)
            }
            #[inline]
            pub unsafe fn RestoreZCullData(
                &mut self,
                src: root::nvn::BufferAddress,
                size: root::size_t,
            ) {
                CommandBuffer_RestoreZCullData(self, src, size)
            }
            #[inline]
            pub unsafe fn SetCopyRowStride(&mut self, stride: isize) {
                CommandBuffer_SetCopyRowStride(self, stride)
            }
            #[inline]
            pub unsafe fn SetCopyImageStride(&mut self, stride: isize) {
                CommandBuffer_SetCopyImageStride(self, stride)
            }
            #[inline]
            pub unsafe fn GetCopyRowStride(&self) -> isize {
                CommandBuffer_GetCopyRowStride(self)
            }
            #[inline]
            pub unsafe fn GetCopyImageStride(&self) -> isize {
                CommandBuffer_GetCopyImageStride(self)
            }
            #[inline]
            pub unsafe fn DrawTexture(
                &mut self,
                texture: root::nvn::TextureHandle,
                dstRegion: *const root::nvn::DrawTextureRegion,
                srcRegion: *const root::nvn::DrawTextureRegion,
            ) {
                CommandBuffer_DrawTexture(self, texture, dstRegion, srcRegion)
            }
            #[inline]
            pub unsafe fn SetProgramSubroutines(
                &mut self,
                program: *mut root::nvn::Program,
                stage: root::nvn::ShaderStage,
                first: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                values: *const ::std::os::raw::c_int,
            ) {
                CommandBuffer_SetProgramSubroutines(self, program, stage, first, count, values)
            }
            #[inline]
            pub unsafe fn BindCoverageModulationTable(&mut self, entries: *const f32) {
                CommandBuffer_BindCoverageModulationTable(self, entries)
            }
            #[inline]
            pub unsafe fn ResolveDepthBuffer(&mut self) {
                CommandBuffer_ResolveDepthBuffer(self)
            }
            #[inline]
            pub unsafe fn PushDebugGroup(&mut self, description: *const ::std::os::raw::c_char) {
                CommandBuffer_PushDebugGroup(self, description)
            }
            #[inline]
            pub unsafe fn PopDebugGroup(&mut self) {
                CommandBuffer_PopDebugGroup(self)
            }
            #[inline]
            pub unsafe fn InsertDebugMarker(&mut self, description: *const ::std::os::raw::c_char) {
                CommandBuffer_InsertDebugMarker(self, description)
            }
            #[inline]
            pub unsafe fn GetMemoryCallback(&self) -> root::nvn::CommandBufferMemoryCallback {
                CommandBuffer_GetMemoryCallback(self)
            }
            #[inline]
            pub unsafe fn GetMemoryCallbackData(&self) -> *mut ::std::os::raw::c_void {
                CommandBuffer_GetMemoryCallbackData(self)
            }
            #[inline]
            pub unsafe fn IsRecording(&self) -> bool {
                CommandBuffer_IsRecording(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BlendState {
            pub internal: [u8; 8usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@BlendState@nvn@@QEAAAEAV12@XZ"]
            pub fn BlendState_SetDefaults(
                this: *mut root::nvn::BlendState,
            ) -> *mut root::nvn::BlendState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetBlendTarget@BlendState@nvn@@QEAAAEAV12@H@Z"]
            pub fn BlendState_SetBlendTarget(
                this: *mut root::nvn::BlendState,
                target: ::std::os::raw::c_int,
            ) -> *mut root::nvn::BlendState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetBlendFunc@BlendState@nvn@@QEAAAEAV12@UBlendFunc@2@000@Z"]
            pub fn BlendState_SetBlendFunc(
                this: *mut root::nvn::BlendState,
                srcFunc: root::nvn::BlendFunc,
                dstFunc: root::nvn::BlendFunc,
                srcFuncAlpha: root::nvn::BlendFunc,
                dstFuncAlpha: root::nvn::BlendFunc,
            ) -> *mut root::nvn::BlendState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetBlendEquation@BlendState@nvn@@QEAAAEAV12@UBlendEquation@2@0@Z"]
            pub fn BlendState_SetBlendEquation(
                this: *mut root::nvn::BlendState,
                modeRGB: root::nvn::BlendEquation,
                modeAlpha: root::nvn::BlendEquation,
            ) -> *mut root::nvn::BlendState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetAdvancedMode@BlendState@nvn@@QEAAAEAV12@UBlendAdvancedMode@2@@Z"]
            pub fn BlendState_SetAdvancedMode(
                this: *mut root::nvn::BlendState,
                overlap: root::nvn::BlendAdvancedMode,
            ) -> *mut root::nvn::BlendState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetAdvancedOverlap@BlendState@nvn@@QEAAAEAV12@UBlendAdvancedOverlap@2@@Z"]
            pub fn BlendState_SetAdvancedOverlap(
                this: *mut root::nvn::BlendState,
                overlap: root::nvn::BlendAdvancedOverlap,
            ) -> *mut root::nvn::BlendState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetAdvancedPremultipliedSrc@BlendState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn BlendState_SetAdvancedPremultipliedSrc(
                this: *mut root::nvn::BlendState,
                premultiplied: bool,
            ) -> *mut root::nvn::BlendState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetAdvancedNormalizedDst@BlendState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn BlendState_SetAdvancedNormalizedDst(
                this: *mut root::nvn::BlendState,
                normalized: bool,
            ) -> *mut root::nvn::BlendState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetBlendTarget@BlendState@nvn@@QEBAHXZ"]
            pub fn BlendState_GetBlendTarget(
                this: *const root::nvn::BlendState,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetBlendFunc@BlendState@nvn@@QEBAXPEAUBlendFunc@2@000@Z"]
            pub fn BlendState_GetBlendFunc(
                this: *const root::nvn::BlendState,
                srcFunc: *mut root::nvn::BlendFunc,
                dstFunc: *mut root::nvn::BlendFunc,
                srcFuncAlpha: *mut root::nvn::BlendFunc,
                dstFuncAlpha: *mut root::nvn::BlendFunc,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetBlendEquation@BlendState@nvn@@QEBAXPEAUBlendEquation@2@0@Z"]
            pub fn BlendState_GetBlendEquation(
                this: *const root::nvn::BlendState,
                modeRGB: *mut root::nvn::BlendEquation,
                modeAlpha: *mut root::nvn::BlendEquation,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetAdvancedMode@BlendState@nvn@@QEBA?AUBlendAdvancedMode@2@XZ"]
            pub fn BlendState_GetAdvancedMode(
                this: *const root::nvn::BlendState,
            ) -> root::nvn::BlendAdvancedMode;
        }
        extern "C" {
            #[link_name = "\u{1}?GetAdvancedOverlap@BlendState@nvn@@QEBA?AUBlendAdvancedOverlap@2@XZ"]
            pub fn BlendState_GetAdvancedOverlap(
                this: *const root::nvn::BlendState,
            ) -> root::nvn::BlendAdvancedOverlap;
        }
        extern "C" {
            #[link_name = "\u{1}?GetAdvancedPremultipliedSrc@BlendState@nvn@@QEBA_NXZ"]
            pub fn BlendState_GetAdvancedPremultipliedSrc(
                this: *const root::nvn::BlendState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetAdvancedNormalizedDst@BlendState@nvn@@QEBA_NXZ"]
            pub fn BlendState_GetAdvancedNormalizedDst(this: *const root::nvn::BlendState) -> bool;
        }
        impl BlendState {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::BlendState {
                BlendState_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetBlendTarget(
                &mut self,
                target: ::std::os::raw::c_int,
            ) -> *mut root::nvn::BlendState {
                BlendState_SetBlendTarget(self, target)
            }
            #[inline]
            pub unsafe fn SetBlendFunc(
                &mut self,
                srcFunc: root::nvn::BlendFunc,
                dstFunc: root::nvn::BlendFunc,
                srcFuncAlpha: root::nvn::BlendFunc,
                dstFuncAlpha: root::nvn::BlendFunc,
            ) -> *mut root::nvn::BlendState {
                BlendState_SetBlendFunc(self, srcFunc, dstFunc, srcFuncAlpha, dstFuncAlpha)
            }
            #[inline]
            pub unsafe fn SetBlendEquation(
                &mut self,
                modeRGB: root::nvn::BlendEquation,
                modeAlpha: root::nvn::BlendEquation,
            ) -> *mut root::nvn::BlendState {
                BlendState_SetBlendEquation(self, modeRGB, modeAlpha)
            }
            #[inline]
            pub unsafe fn SetAdvancedMode(
                &mut self,
                overlap: root::nvn::BlendAdvancedMode,
            ) -> *mut root::nvn::BlendState {
                BlendState_SetAdvancedMode(self, overlap)
            }
            #[inline]
            pub unsafe fn SetAdvancedOverlap(
                &mut self,
                overlap: root::nvn::BlendAdvancedOverlap,
            ) -> *mut root::nvn::BlendState {
                BlendState_SetAdvancedOverlap(self, overlap)
            }
            #[inline]
            pub unsafe fn SetAdvancedPremultipliedSrc(
                &mut self,
                premultiplied: bool,
            ) -> *mut root::nvn::BlendState {
                BlendState_SetAdvancedPremultipliedSrc(self, premultiplied)
            }
            #[inline]
            pub unsafe fn SetAdvancedNormalizedDst(
                &mut self,
                normalized: bool,
            ) -> *mut root::nvn::BlendState {
                BlendState_SetAdvancedNormalizedDst(self, normalized)
            }
            #[inline]
            pub unsafe fn GetBlendTarget(&self) -> ::std::os::raw::c_int {
                BlendState_GetBlendTarget(self)
            }
            #[inline]
            pub unsafe fn GetBlendFunc(
                &self,
                srcFunc: *mut root::nvn::BlendFunc,
                dstFunc: *mut root::nvn::BlendFunc,
                srcFuncAlpha: *mut root::nvn::BlendFunc,
                dstFuncAlpha: *mut root::nvn::BlendFunc,
            ) {
                BlendState_GetBlendFunc(self, srcFunc, dstFunc, srcFuncAlpha, dstFuncAlpha)
            }
            #[inline]
            pub unsafe fn GetBlendEquation(
                &self,
                modeRGB: *mut root::nvn::BlendEquation,
                modeAlpha: *mut root::nvn::BlendEquation,
            ) {
                BlendState_GetBlendEquation(self, modeRGB, modeAlpha)
            }
            #[inline]
            pub unsafe fn GetAdvancedMode(&self) -> root::nvn::BlendAdvancedMode {
                BlendState_GetAdvancedMode(self)
            }
            #[inline]
            pub unsafe fn GetAdvancedOverlap(&self) -> root::nvn::BlendAdvancedOverlap {
                BlendState_GetAdvancedOverlap(self)
            }
            #[inline]
            pub unsafe fn GetAdvancedPremultipliedSrc(&self) -> bool {
                BlendState_GetAdvancedPremultipliedSrc(self)
            }
            #[inline]
            pub unsafe fn GetAdvancedNormalizedDst(&self) -> bool {
                BlendState_GetAdvancedNormalizedDst(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ChannelMaskState {
            pub internal: [u8; 4usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@ChannelMaskState@nvn@@QEAAAEAV12@XZ"]
            pub fn ChannelMaskState_SetDefaults(
                this: *mut root::nvn::ChannelMaskState,
            ) -> *mut root::nvn::ChannelMaskState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetChannelMask@ChannelMaskState@nvn@@QEAAAEAV12@H_N000@Z"]
            pub fn ChannelMaskState_SetChannelMask(
                this: *mut root::nvn::ChannelMaskState,
                index: ::std::os::raw::c_int,
                r: bool,
                g: bool,
                b: bool,
                a: bool,
            ) -> *mut root::nvn::ChannelMaskState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetChannelMask@ChannelMaskState@nvn@@QEBAXHPEA_N000@Z"]
            pub fn ChannelMaskState_GetChannelMask(
                this: *const root::nvn::ChannelMaskState,
                index: ::std::os::raw::c_int,
                r: *mut bool,
                g: *mut bool,
                b: *mut bool,
                a: *mut bool,
            );
        }
        impl ChannelMaskState {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::ChannelMaskState {
                ChannelMaskState_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetChannelMask(
                &mut self,
                index: ::std::os::raw::c_int,
                r: bool,
                g: bool,
                b: bool,
                a: bool,
            ) -> *mut root::nvn::ChannelMaskState {
                ChannelMaskState_SetChannelMask(self, index, r, g, b, a)
            }
            #[inline]
            pub unsafe fn GetChannelMask(
                &self,
                index: ::std::os::raw::c_int,
                r: *mut bool,
                g: *mut bool,
                b: *mut bool,
                a: *mut bool,
            ) {
                ChannelMaskState_GetChannelMask(self, index, r, g, b, a)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ColorState {
            pub internal: [u8; 4usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@ColorState@nvn@@QEAAAEAV12@XZ"]
            pub fn ColorState_SetDefaults(
                this: *mut root::nvn::ColorState,
            ) -> *mut root::nvn::ColorState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetBlendEnable@ColorState@nvn@@QEAAAEAV12@H_N@Z"]
            pub fn ColorState_SetBlendEnable(
                this: *mut root::nvn::ColorState,
                index: ::std::os::raw::c_int,
                enable: bool,
            ) -> *mut root::nvn::ColorState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetLogicOp@ColorState@nvn@@QEAAAEAV12@ULogicOp@2@@Z"]
            pub fn ColorState_SetLogicOp(
                this: *mut root::nvn::ColorState,
                logicOp: root::nvn::LogicOp,
            ) -> *mut root::nvn::ColorState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetAlphaTest@ColorState@nvn@@QEAAAEAV12@UAlphaFunc@2@@Z"]
            pub fn ColorState_SetAlphaTest(
                this: *mut root::nvn::ColorState,
                alphaTest: root::nvn::AlphaFunc,
            ) -> *mut root::nvn::ColorState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetBlendEnable@ColorState@nvn@@QEBA_NH@Z"]
            pub fn ColorState_GetBlendEnable(
                this: *const root::nvn::ColorState,
                index: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetLogicOp@ColorState@nvn@@QEBA?AULogicOp@2@XZ"]
            pub fn ColorState_GetLogicOp(this: *const root::nvn::ColorState) -> root::nvn::LogicOp;
        }
        extern "C" {
            #[link_name = "\u{1}?GetAlphaTest@ColorState@nvn@@QEBA?AUAlphaFunc@2@XZ"]
            pub fn ColorState_GetAlphaTest(
                this: *const root::nvn::ColorState,
            ) -> root::nvn::AlphaFunc;
        }
        impl ColorState {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::ColorState {
                ColorState_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetBlendEnable(
                &mut self,
                index: ::std::os::raw::c_int,
                enable: bool,
            ) -> *mut root::nvn::ColorState {
                ColorState_SetBlendEnable(self, index, enable)
            }
            #[inline]
            pub unsafe fn SetLogicOp(
                &mut self,
                logicOp: root::nvn::LogicOp,
            ) -> *mut root::nvn::ColorState {
                ColorState_SetLogicOp(self, logicOp)
            }
            #[inline]
            pub unsafe fn SetAlphaTest(
                &mut self,
                alphaTest: root::nvn::AlphaFunc,
            ) -> *mut root::nvn::ColorState {
                ColorState_SetAlphaTest(self, alphaTest)
            }
            #[inline]
            pub unsafe fn GetBlendEnable(&self, index: ::std::os::raw::c_int) -> bool {
                ColorState_GetBlendEnable(self, index)
            }
            #[inline]
            pub unsafe fn GetLogicOp(&self) -> root::nvn::LogicOp {
                ColorState_GetLogicOp(self)
            }
            #[inline]
            pub unsafe fn GetAlphaTest(&self) -> root::nvn::AlphaFunc {
                ColorState_GetAlphaTest(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DepthStencilState {
            pub internal: [u8; 8usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@DepthStencilState@nvn@@QEAAAEAV12@XZ"]
            pub fn DepthStencilState_SetDefaults(
                this: *mut root::nvn::DepthStencilState,
            ) -> *mut root::nvn::DepthStencilState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthTestEnable@DepthStencilState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn DepthStencilState_SetDepthTestEnable(
                this: *mut root::nvn::DepthStencilState,
                enable: bool,
            ) -> *mut root::nvn::DepthStencilState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthWriteEnable@DepthStencilState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn DepthStencilState_SetDepthWriteEnable(
                this: *mut root::nvn::DepthStencilState,
                enable: bool,
            ) -> *mut root::nvn::DepthStencilState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthFunc@DepthStencilState@nvn@@QEAAAEAV12@UDepthFunc@2@@Z"]
            pub fn DepthStencilState_SetDepthFunc(
                this: *mut root::nvn::DepthStencilState,
                func: root::nvn::DepthFunc,
            ) -> *mut root::nvn::DepthStencilState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStencilTestEnable@DepthStencilState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn DepthStencilState_SetStencilTestEnable(
                this: *mut root::nvn::DepthStencilState,
                enable: bool,
            ) -> *mut root::nvn::DepthStencilState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStencilFunc@DepthStencilState@nvn@@QEAAAEAV12@UFace@2@UStencilFunc@2@@Z"]
            pub fn DepthStencilState_SetStencilFunc(
                this: *mut root::nvn::DepthStencilState,
                faces: root::nvn::Face,
                func: root::nvn::StencilFunc,
            ) -> *mut root::nvn::DepthStencilState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStencilOp@DepthStencilState@nvn@@QEAAAEAV12@UFace@2@UStencilOp@2@11@Z"]
            pub fn DepthStencilState_SetStencilOp(
                this: *mut root::nvn::DepthStencilState,
                faces: root::nvn::Face,
                fail: root::nvn::StencilOp,
                depthFail: root::nvn::StencilOp,
                depthPass: root::nvn::StencilOp,
            ) -> *mut root::nvn::DepthStencilState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepthTestEnable@DepthStencilState@nvn@@QEBA_NXZ"]
            pub fn DepthStencilState_GetDepthTestEnable(
                this: *const root::nvn::DepthStencilState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepthWriteEnable@DepthStencilState@nvn@@QEBA_NXZ"]
            pub fn DepthStencilState_GetDepthWriteEnable(
                this: *const root::nvn::DepthStencilState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepthFunc@DepthStencilState@nvn@@QEBA?AUDepthFunc@2@XZ"]
            pub fn DepthStencilState_GetDepthFunc(
                this: *const root::nvn::DepthStencilState,
            ) -> root::nvn::DepthFunc;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStencilTestEnable@DepthStencilState@nvn@@QEBA_NXZ"]
            pub fn DepthStencilState_GetStencilTestEnable(
                this: *const root::nvn::DepthStencilState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStencilFunc@DepthStencilState@nvn@@QEBA?AUStencilFunc@2@UFace@2@@Z"]
            pub fn DepthStencilState_GetStencilFunc(
                this: *const root::nvn::DepthStencilState,
                face: root::nvn::Face,
            ) -> root::nvn::StencilFunc;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStencilOp@DepthStencilState@nvn@@QEBAXUFace@2@PEAUStencilOp@2@11@Z"]
            pub fn DepthStencilState_GetStencilOp(
                this: *const root::nvn::DepthStencilState,
                face: root::nvn::Face,
                fail: *mut root::nvn::StencilOp,
                depthFail: *mut root::nvn::StencilOp,
                depthPass: *mut root::nvn::StencilOp,
            );
        }
        impl DepthStencilState {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::DepthStencilState {
                DepthStencilState_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetDepthTestEnable(
                &mut self,
                enable: bool,
            ) -> *mut root::nvn::DepthStencilState {
                DepthStencilState_SetDepthTestEnable(self, enable)
            }
            #[inline]
            pub unsafe fn SetDepthWriteEnable(
                &mut self,
                enable: bool,
            ) -> *mut root::nvn::DepthStencilState {
                DepthStencilState_SetDepthWriteEnable(self, enable)
            }
            #[inline]
            pub unsafe fn SetDepthFunc(
                &mut self,
                func: root::nvn::DepthFunc,
            ) -> *mut root::nvn::DepthStencilState {
                DepthStencilState_SetDepthFunc(self, func)
            }
            #[inline]
            pub unsafe fn SetStencilTestEnable(
                &mut self,
                enable: bool,
            ) -> *mut root::nvn::DepthStencilState {
                DepthStencilState_SetStencilTestEnable(self, enable)
            }
            #[inline]
            pub unsafe fn SetStencilFunc(
                &mut self,
                faces: root::nvn::Face,
                func: root::nvn::StencilFunc,
            ) -> *mut root::nvn::DepthStencilState {
                DepthStencilState_SetStencilFunc(self, faces, func)
            }
            #[inline]
            pub unsafe fn SetStencilOp(
                &mut self,
                faces: root::nvn::Face,
                fail: root::nvn::StencilOp,
                depthFail: root::nvn::StencilOp,
                depthPass: root::nvn::StencilOp,
            ) -> *mut root::nvn::DepthStencilState {
                DepthStencilState_SetStencilOp(self, faces, fail, depthFail, depthPass)
            }
            #[inline]
            pub unsafe fn GetDepthTestEnable(&self) -> bool {
                DepthStencilState_GetDepthTestEnable(self)
            }
            #[inline]
            pub unsafe fn GetDepthWriteEnable(&self) -> bool {
                DepthStencilState_GetDepthWriteEnable(self)
            }
            #[inline]
            pub unsafe fn GetDepthFunc(&self) -> root::nvn::DepthFunc {
                DepthStencilState_GetDepthFunc(self)
            }
            #[inline]
            pub unsafe fn GetStencilTestEnable(&self) -> bool {
                DepthStencilState_GetStencilTestEnable(self)
            }
            #[inline]
            pub unsafe fn GetStencilFunc(&self, face: root::nvn::Face) -> root::nvn::StencilFunc {
                DepthStencilState_GetStencilFunc(self, face)
            }
            #[inline]
            pub unsafe fn GetStencilOp(
                &self,
                face: root::nvn::Face,
                fail: *mut root::nvn::StencilOp,
                depthFail: *mut root::nvn::StencilOp,
                depthPass: *mut root::nvn::StencilOp,
            ) {
                DepthStencilState_GetStencilOp(self, face, fail, depthFail, depthPass)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MultisampleState {
            pub internal: [u8; 24usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@MultisampleState@nvn@@QEAAAEAV12@XZ"]
            pub fn MultisampleState_SetDefaults(
                this: *mut root::nvn::MultisampleState,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetMultisampleEnable@MultisampleState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn MultisampleState_SetMultisampleEnable(
                this: *mut root::nvn::MultisampleState,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSamples@MultisampleState@nvn@@QEAAAEAV12@H@Z"]
            pub fn MultisampleState_SetSamples(
                this: *mut root::nvn::MultisampleState,
                samples: ::std::os::raw::c_int,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetAlphaToCoverageEnable@MultisampleState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn MultisampleState_SetAlphaToCoverageEnable(
                this: *mut root::nvn::MultisampleState,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetAlphaToCoverageDither@MultisampleState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn MultisampleState_SetAlphaToCoverageDither(
                this: *mut root::nvn::MultisampleState,
                dither: bool,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMultisampleEnable@MultisampleState@nvn@@QEBA_NXZ"]
            pub fn MultisampleState_GetMultisampleEnable(
                this: *const root::nvn::MultisampleState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSamples@MultisampleState@nvn@@QEBAHXZ"]
            pub fn MultisampleState_GetSamples(
                this: *const root::nvn::MultisampleState,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetAlphaToCoverageEnable@MultisampleState@nvn@@QEBA_NXZ"]
            pub fn MultisampleState_GetAlphaToCoverageEnable(
                this: *const root::nvn::MultisampleState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetAlphaToCoverageDither@MultisampleState@nvn@@QEBA_NXZ"]
            pub fn MultisampleState_GetAlphaToCoverageDither(
                this: *const root::nvn::MultisampleState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?SetRasterSamples@MultisampleState@nvn@@QEAAAEAV12@H@Z"]
            pub fn MultisampleState_SetRasterSamples(
                this: *mut root::nvn::MultisampleState,
                rasterSamples: ::std::os::raw::c_int,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetRasterSamples@MultisampleState@nvn@@QEAAHXZ"]
            pub fn MultisampleState_GetRasterSamples(
                this: *mut root::nvn::MultisampleState,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?SetCoverageModulationMode@MultisampleState@nvn@@QEAAAEAV12@UCoverageModulationMode@2@@Z"]
            pub fn MultisampleState_SetCoverageModulationMode(
                this: *mut root::nvn::MultisampleState,
                mode: root::nvn::CoverageModulationMode,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCoverageModulationMode@MultisampleState@nvn@@QEBA?AUCoverageModulationMode@2@XZ"]
            pub fn MultisampleState_GetCoverageModulationMode(
                this: *const root::nvn::MultisampleState,
            ) -> root::nvn::CoverageModulationMode;
        }
        extern "C" {
            #[link_name = "\u{1}?SetCoverageToColorEnable@MultisampleState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn MultisampleState_SetCoverageToColorEnable(
                this: *mut root::nvn::MultisampleState,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCoverageToColorEnable@MultisampleState@nvn@@QEBA_NXZ"]
            pub fn MultisampleState_GetCoverageToColorEnable(
                this: *const root::nvn::MultisampleState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?SetCoverageToColorOutput@MultisampleState@nvn@@QEAAAEAV12@H@Z"]
            pub fn MultisampleState_SetCoverageToColorOutput(
                this: *mut root::nvn::MultisampleState,
                color: ::std::os::raw::c_int,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCoverageToColorOutput@MultisampleState@nvn@@QEBAHXZ"]
            pub fn MultisampleState_GetCoverageToColorOutput(
                this: *const root::nvn::MultisampleState,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSampleLocationsEnable@MultisampleState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn MultisampleState_SetSampleLocationsEnable(
                this: *mut root::nvn::MultisampleState,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSampleLocationsEnable@MultisampleState@nvn@@QEBA_NXZ"]
            pub fn MultisampleState_GetSampleLocationsEnable(
                this: *const root::nvn::MultisampleState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSampleLocationsGrid@MultisampleState@nvn@@QEAAXPEAH0@Z"]
            pub fn MultisampleState_GetSampleLocationsGrid(
                this: *mut root::nvn::MultisampleState,
                width: *mut ::std::os::raw::c_int,
                height: *mut ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetSampleLocationsGridEnable@MultisampleState@nvn@@QEAAAEAV12@_N@Z"]
            pub fn MultisampleState_SetSampleLocationsGridEnable(
                this: *mut root::nvn::MultisampleState,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSampleLocationsGridEnable@MultisampleState@nvn@@QEBA_NXZ"]
            pub fn MultisampleState_GetSampleLocationsGridEnable(
                this: *const root::nvn::MultisampleState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSampleLocations@MultisampleState@nvn@@QEAAAEAV12@HHPEBM@Z"]
            pub fn MultisampleState_SetSampleLocations(
                this: *mut root::nvn::MultisampleState,
                start: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                values: *const f32,
            ) -> *mut root::nvn::MultisampleState;
        }
        impl MultisampleState {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetMultisampleEnable(
                &mut self,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetMultisampleEnable(self, enable)
            }
            #[inline]
            pub unsafe fn SetSamples(
                &mut self,
                samples: ::std::os::raw::c_int,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetSamples(self, samples)
            }
            #[inline]
            pub unsafe fn SetAlphaToCoverageEnable(
                &mut self,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetAlphaToCoverageEnable(self, enable)
            }
            #[inline]
            pub unsafe fn SetAlphaToCoverageDither(
                &mut self,
                dither: bool,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetAlphaToCoverageDither(self, dither)
            }
            #[inline]
            pub unsafe fn GetMultisampleEnable(&self) -> bool {
                MultisampleState_GetMultisampleEnable(self)
            }
            #[inline]
            pub unsafe fn GetSamples(&self) -> ::std::os::raw::c_int {
                MultisampleState_GetSamples(self)
            }
            #[inline]
            pub unsafe fn GetAlphaToCoverageEnable(&self) -> bool {
                MultisampleState_GetAlphaToCoverageEnable(self)
            }
            #[inline]
            pub unsafe fn GetAlphaToCoverageDither(&self) -> bool {
                MultisampleState_GetAlphaToCoverageDither(self)
            }
            #[inline]
            pub unsafe fn SetRasterSamples(
                &mut self,
                rasterSamples: ::std::os::raw::c_int,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetRasterSamples(self, rasterSamples)
            }
            #[inline]
            pub unsafe fn GetRasterSamples(&mut self) -> ::std::os::raw::c_int {
                MultisampleState_GetRasterSamples(self)
            }
            #[inline]
            pub unsafe fn SetCoverageModulationMode(
                &mut self,
                mode: root::nvn::CoverageModulationMode,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetCoverageModulationMode(self, mode)
            }
            #[inline]
            pub unsafe fn GetCoverageModulationMode(&self) -> root::nvn::CoverageModulationMode {
                MultisampleState_GetCoverageModulationMode(self)
            }
            #[inline]
            pub unsafe fn SetCoverageToColorEnable(
                &mut self,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetCoverageToColorEnable(self, enable)
            }
            #[inline]
            pub unsafe fn GetCoverageToColorEnable(&self) -> bool {
                MultisampleState_GetCoverageToColorEnable(self)
            }
            #[inline]
            pub unsafe fn SetCoverageToColorOutput(
                &mut self,
                color: ::std::os::raw::c_int,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetCoverageToColorOutput(self, color)
            }
            #[inline]
            pub unsafe fn GetCoverageToColorOutput(&self) -> ::std::os::raw::c_int {
                MultisampleState_GetCoverageToColorOutput(self)
            }
            #[inline]
            pub unsafe fn SetSampleLocationsEnable(
                &mut self,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetSampleLocationsEnable(self, enable)
            }
            #[inline]
            pub unsafe fn GetSampleLocationsEnable(&self) -> bool {
                MultisampleState_GetSampleLocationsEnable(self)
            }
            #[inline]
            pub unsafe fn GetSampleLocationsGrid(
                &mut self,
                width: *mut ::std::os::raw::c_int,
                height: *mut ::std::os::raw::c_int,
            ) {
                MultisampleState_GetSampleLocationsGrid(self, width, height)
            }
            #[inline]
            pub unsafe fn SetSampleLocationsGridEnable(
                &mut self,
                enable: bool,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetSampleLocationsGridEnable(self, enable)
            }
            #[inline]
            pub unsafe fn GetSampleLocationsGridEnable(&self) -> bool {
                MultisampleState_GetSampleLocationsGridEnable(self)
            }
            #[inline]
            pub unsafe fn SetSampleLocations(
                &mut self,
                start: ::std::os::raw::c_int,
                count: ::std::os::raw::c_int,
                values: *const f32,
            ) -> *mut root::nvn::MultisampleState {
                MultisampleState_SetSampleLocations(self, start, count, values)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct PolygonState {
            pub internal: [u8; 4usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@PolygonState@nvn@@QEAAAEAV12@XZ"]
            pub fn PolygonState_SetDefaults(
                this: *mut root::nvn::PolygonState,
            ) -> *mut root::nvn::PolygonState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetCullFace@PolygonState@nvn@@QEAAAEAV12@UFace@2@@Z"]
            pub fn PolygonState_SetCullFace(
                this: *mut root::nvn::PolygonState,
                face: root::nvn::Face,
            ) -> *mut root::nvn::PolygonState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetFrontFace@PolygonState@nvn@@QEAAAEAV12@UFrontFace@2@@Z"]
            pub fn PolygonState_SetFrontFace(
                this: *mut root::nvn::PolygonState,
                face: root::nvn::FrontFace,
            ) -> *mut root::nvn::PolygonState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetPolygonMode@PolygonState@nvn@@QEAAAEAV12@UPolygonMode@2@@Z"]
            pub fn PolygonState_SetPolygonMode(
                this: *mut root::nvn::PolygonState,
                polygonMode: root::nvn::PolygonMode,
            ) -> *mut root::nvn::PolygonState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetPolygonOffsetEnables@PolygonState@nvn@@QEAAAEAV12@UPolygonOffsetEnable@2@@Z"]
            pub fn PolygonState_SetPolygonOffsetEnables(
                this: *mut root::nvn::PolygonState,
                enables: root::nvn::PolygonOffsetEnable,
            ) -> *mut root::nvn::PolygonState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCullFace@PolygonState@nvn@@QEBA?AUFace@2@XZ"]
            pub fn PolygonState_GetCullFace(
                this: *const root::nvn::PolygonState,
            ) -> root::nvn::Face;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFrontFace@PolygonState@nvn@@QEBA?AUFrontFace@2@XZ"]
            pub fn PolygonState_GetFrontFace(
                this: *const root::nvn::PolygonState,
            ) -> root::nvn::FrontFace;
        }
        extern "C" {
            #[link_name = "\u{1}?GetPolygonMode@PolygonState@nvn@@QEBA?AUPolygonMode@2@XZ"]
            pub fn PolygonState_GetPolygonMode(
                this: *const root::nvn::PolygonState,
            ) -> root::nvn::PolygonMode;
        }
        extern "C" {
            #[link_name = "\u{1}?GetPolygonOffsetEnables@PolygonState@nvn@@QEBA?AUPolygonOffsetEnable@2@XZ"]
            pub fn PolygonState_GetPolygonOffsetEnables(
                this: *const root::nvn::PolygonState,
            ) -> root::nvn::PolygonOffsetEnable;
        }
        impl PolygonState {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::PolygonState {
                PolygonState_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetCullFace(
                &mut self,
                face: root::nvn::Face,
            ) -> *mut root::nvn::PolygonState {
                PolygonState_SetCullFace(self, face)
            }
            #[inline]
            pub unsafe fn SetFrontFace(
                &mut self,
                face: root::nvn::FrontFace,
            ) -> *mut root::nvn::PolygonState {
                PolygonState_SetFrontFace(self, face)
            }
            #[inline]
            pub unsafe fn SetPolygonMode(
                &mut self,
                polygonMode: root::nvn::PolygonMode,
            ) -> *mut root::nvn::PolygonState {
                PolygonState_SetPolygonMode(self, polygonMode)
            }
            #[inline]
            pub unsafe fn SetPolygonOffsetEnables(
                &mut self,
                enables: root::nvn::PolygonOffsetEnable,
            ) -> *mut root::nvn::PolygonState {
                PolygonState_SetPolygonOffsetEnables(self, enables)
            }
            #[inline]
            pub unsafe fn GetCullFace(&self) -> root::nvn::Face {
                PolygonState_GetCullFace(self)
            }
            #[inline]
            pub unsafe fn GetFrontFace(&self) -> root::nvn::FrontFace {
                PolygonState_GetFrontFace(self)
            }
            #[inline]
            pub unsafe fn GetPolygonMode(&self) -> root::nvn::PolygonMode {
                PolygonState_GetPolygonMode(self)
            }
            #[inline]
            pub unsafe fn GetPolygonOffsetEnables(&self) -> root::nvn::PolygonOffsetEnable {
                PolygonState_GetPolygonOffsetEnables(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct VertexAttribState {
            pub internal: [u8; 4usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@VertexAttribState@nvn@@QEAAAEAV12@XZ"]
            pub fn VertexAttribState_SetDefaults(
                this: *mut root::nvn::VertexAttribState,
            ) -> *mut root::nvn::VertexAttribState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetFormat@VertexAttribState@nvn@@QEAAAEAV12@UFormat@2@_J@Z"]
            pub fn VertexAttribState_SetFormat(
                this: *mut root::nvn::VertexAttribState,
                format: root::nvn::Format,
                relativeOffset: isize,
            ) -> *mut root::nvn::VertexAttribState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStreamIndex@VertexAttribState@nvn@@QEAAAEAV12@H@Z"]
            pub fn VertexAttribState_SetStreamIndex(
                this: *mut root::nvn::VertexAttribState,
                streamIndex: ::std::os::raw::c_int,
            ) -> *mut root::nvn::VertexAttribState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFormat@VertexAttribState@nvn@@QEBAXPEAUFormat@2@PEA_J@Z"]
            pub fn VertexAttribState_GetFormat(
                this: *const root::nvn::VertexAttribState,
                format: *mut root::nvn::Format,
                relativeOffset: *mut isize,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetStreamIndex@VertexAttribState@nvn@@QEBAHXZ"]
            pub fn VertexAttribState_GetStreamIndex(
                this: *const root::nvn::VertexAttribState,
            ) -> ::std::os::raw::c_int;
        }
        impl VertexAttribState {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::VertexAttribState {
                VertexAttribState_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetFormat(
                &mut self,
                format: root::nvn::Format,
                relativeOffset: isize,
            ) -> *mut root::nvn::VertexAttribState {
                VertexAttribState_SetFormat(self, format, relativeOffset)
            }
            #[inline]
            pub unsafe fn SetStreamIndex(
                &mut self,
                streamIndex: ::std::os::raw::c_int,
            ) -> *mut root::nvn::VertexAttribState {
                VertexAttribState_SetStreamIndex(self, streamIndex)
            }
            #[inline]
            pub unsafe fn GetFormat(
                &self,
                format: *mut root::nvn::Format,
                relativeOffset: *mut isize,
            ) {
                VertexAttribState_GetFormat(self, format, relativeOffset)
            }
            #[inline]
            pub unsafe fn GetStreamIndex(&self) -> ::std::os::raw::c_int {
                VertexAttribState_GetStreamIndex(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct VertexStreamState {
            pub internal: [u8; 8usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@VertexStreamState@nvn@@QEAAAEAV12@XZ"]
            pub fn VertexStreamState_SetDefaults(
                this: *mut root::nvn::VertexStreamState,
            ) -> *mut root::nvn::VertexStreamState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStride@VertexStreamState@nvn@@QEAAAEAV12@_J@Z"]
            pub fn VertexStreamState_SetStride(
                this: *mut root::nvn::VertexStreamState,
                stride: isize,
            ) -> *mut root::nvn::VertexStreamState;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDivisor@VertexStreamState@nvn@@QEAAAEAV12@H@Z"]
            pub fn VertexStreamState_SetDivisor(
                this: *mut root::nvn::VertexStreamState,
                divisor: ::std::os::raw::c_int,
            ) -> *mut root::nvn::VertexStreamState;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStride@VertexStreamState@nvn@@QEBA_JXZ"]
            pub fn VertexStreamState_GetStride(this: *const root::nvn::VertexStreamState) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDivisor@VertexStreamState@nvn@@QEBAHXZ"]
            pub fn VertexStreamState_GetDivisor(
                this: *const root::nvn::VertexStreamState,
            ) -> ::std::os::raw::c_int;
        }
        impl VertexStreamState {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::VertexStreamState {
                VertexStreamState_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetStride(&mut self, stride: isize) -> *mut root::nvn::VertexStreamState {
                VertexStreamState_SetStride(self, stride)
            }
            #[inline]
            pub unsafe fn SetDivisor(
                &mut self,
                divisor: ::std::os::raw::c_int,
            ) -> *mut root::nvn::VertexStreamState {
                VertexStreamState_SetDivisor(self, divisor)
            }
            #[inline]
            pub unsafe fn GetStride(&self) -> isize {
                VertexStreamState_GetStride(self)
            }
            #[inline]
            pub unsafe fn GetDivisor(&self) -> ::std::os::raw::c_int {
                VertexStreamState_GetDivisor(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Program {
            pub internal: [u8; 192usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@Program@nvn@@QEAA_NPEAVDevice@2@@Z"]
            pub fn Program_Initialize(
                this: *mut root::nvn::Program,
                device: *mut root::nvn::Device,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@Program@nvn@@QEAAXXZ"]
            pub fn Program_Finalize(this: *mut root::nvn::Program);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@Program@nvn@@QEAAXPEBD@Z"]
            pub fn Program_SetDebugLabel(
                this: *mut root::nvn::Program,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetShaders@Program@nvn@@QEAA_NHPEBUShaderData@2@@Z"]
            pub fn Program_SetShaders(
                this: *mut root::nvn::Program,
                count: ::std::os::raw::c_int,
                stageData: *const root::nvn::ShaderData,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSubroutineLinkage@Program@nvn@@QEAA_NHPEBQEAX@Z"]
            pub fn Program_SetSubroutineLinkage(
                this: *mut root::nvn::Program,
                count: ::std::os::raw::c_int,
                linkageMapPtrs: *const root::nvn::SubroutineLinkageMapPtr,
            ) -> bool;
        }
        impl Program {
            #[inline]
            pub unsafe fn Initialize(&mut self, device: *mut root::nvn::Device) -> bool {
                Program_Initialize(self, device)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                Program_Finalize(self)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                Program_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn SetShaders(
                &mut self,
                count: ::std::os::raw::c_int,
                stageData: *const root::nvn::ShaderData,
            ) -> bool {
                Program_SetShaders(self, count, stageData)
            }
            #[inline]
            pub unsafe fn SetSubroutineLinkage(
                &mut self,
                count: ::std::os::raw::c_int,
                linkageMapPtrs: *const root::nvn::SubroutineLinkageMapPtr,
            ) -> bool {
                Program_SetSubroutineLinkage(self, count, linkageMapPtrs)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MemoryPoolBuilder {
            pub internal: [u8; 64usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDevice@MemoryPoolBuilder@nvn@@QEAAAEAV12@PEAVDevice@2@@Z"]
            pub fn MemoryPoolBuilder_SetDevice(
                this: *mut root::nvn::MemoryPoolBuilder,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::MemoryPoolBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@MemoryPoolBuilder@nvn@@QEAAAEAV12@XZ"]
            pub fn MemoryPoolBuilder_SetDefaults(
                this: *mut root::nvn::MemoryPoolBuilder,
            ) -> *mut root::nvn::MemoryPoolBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStorage@MemoryPoolBuilder@nvn@@QEAAAEAV12@PEAX_K@Z"]
            pub fn MemoryPoolBuilder_SetStorage(
                this: *mut root::nvn::MemoryPoolBuilder,
                memory: *mut ::std::os::raw::c_void,
                size: root::size_t,
            ) -> *mut root::nvn::MemoryPoolBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetFlags@MemoryPoolBuilder@nvn@@QEAAAEAV12@UMemoryPoolFlags@2@@Z"]
            pub fn MemoryPoolBuilder_SetFlags(
                this: *mut root::nvn::MemoryPoolBuilder,
                flags: root::nvn::MemoryPoolFlags,
            ) -> *mut root::nvn::MemoryPoolBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemory@MemoryPoolBuilder@nvn@@QEBAPEAXXZ"]
            pub fn MemoryPoolBuilder_GetMemory(
                this: *const root::nvn::MemoryPoolBuilder,
            ) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSize@MemoryPoolBuilder@nvn@@QEBA_KXZ"]
            pub fn MemoryPoolBuilder_GetSize(
                this: *const root::nvn::MemoryPoolBuilder,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFlags@MemoryPoolBuilder@nvn@@QEBA?AUMemoryPoolFlags@2@XZ"]
            pub fn MemoryPoolBuilder_GetFlags(
                this: *const root::nvn::MemoryPoolBuilder,
            ) -> root::nvn::MemoryPoolFlags;
        }
        impl MemoryPoolBuilder {
            #[inline]
            pub unsafe fn SetDevice(
                &mut self,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::MemoryPoolBuilder {
                MemoryPoolBuilder_SetDevice(self, device)
            }
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::MemoryPoolBuilder {
                MemoryPoolBuilder_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetStorage(
                &mut self,
                memory: *mut ::std::os::raw::c_void,
                size: root::size_t,
            ) -> *mut root::nvn::MemoryPoolBuilder {
                MemoryPoolBuilder_SetStorage(self, memory, size)
            }
            #[inline]
            pub unsafe fn SetFlags(
                &mut self,
                flags: root::nvn::MemoryPoolFlags,
            ) -> *mut root::nvn::MemoryPoolBuilder {
                MemoryPoolBuilder_SetFlags(self, flags)
            }
            #[inline]
            pub unsafe fn GetMemory(&self) -> *mut ::std::os::raw::c_void {
                MemoryPoolBuilder_GetMemory(self)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> root::size_t {
                MemoryPoolBuilder_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetFlags(&self) -> root::nvn::MemoryPoolFlags {
                MemoryPoolBuilder_GetFlags(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MemoryPool {
            pub internal: [u8; 256usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@MemoryPool@nvn@@QEAA_NPEBVMemoryPoolBuilder@2@@Z"]
            pub fn MemoryPool_Initialize(
                this: *mut root::nvn::MemoryPool,
                builder: *const root::nvn::MemoryPoolBuilder,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@MemoryPool@nvn@@QEAAXPEBD@Z"]
            pub fn MemoryPool_SetDebugLabel(
                this: *mut root::nvn::MemoryPool,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@MemoryPool@nvn@@QEAAXXZ"]
            pub fn MemoryPool_Finalize(this: *mut root::nvn::MemoryPool);
        }
        extern "C" {
            #[link_name = "\u{1}?Map@MemoryPool@nvn@@QEBAPEAXXZ"]
            pub fn MemoryPool_Map(
                this: *const root::nvn::MemoryPool,
            ) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}?FlushMappedRange@MemoryPool@nvn@@QEBAX_J_K@Z"]
            pub fn MemoryPool_FlushMappedRange(
                this: *const root::nvn::MemoryPool,
                offset: isize,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?InvalidateMappedRange@MemoryPool@nvn@@QEBAX_J_K@Z"]
            pub fn MemoryPool_InvalidateMappedRange(
                this: *const root::nvn::MemoryPool,
                offset: isize,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetBufferAddress@MemoryPool@nvn@@QEBA_KXZ"]
            pub fn MemoryPool_GetBufferAddress(
                this: *const root::nvn::MemoryPool,
            ) -> root::nvn::BufferAddress;
        }
        extern "C" {
            #[link_name = "\u{1}?MapVirtual@MemoryPool@nvn@@QEAA_NHPEBUMappingRequest@2@@Z"]
            pub fn MemoryPool_MapVirtual(
                this: *mut root::nvn::MemoryPool,
                numRequests: ::std::os::raw::c_int,
                requests: *const root::nvn::MappingRequest,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSize@MemoryPool@nvn@@QEBA_KXZ"]
            pub fn MemoryPool_GetSize(this: *const root::nvn::MemoryPool) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFlags@MemoryPool@nvn@@QEBA?AUMemoryPoolFlags@2@XZ"]
            pub fn MemoryPool_GetFlags(
                this: *const root::nvn::MemoryPool,
            ) -> root::nvn::MemoryPoolFlags;
        }
        impl MemoryPool {
            #[inline]
            pub unsafe fn Initialize(
                &mut self,
                builder: *const root::nvn::MemoryPoolBuilder,
            ) -> bool {
                MemoryPool_Initialize(self, builder)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                MemoryPool_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                MemoryPool_Finalize(self)
            }
            #[inline]
            pub unsafe fn Map(&self) -> *mut ::std::os::raw::c_void {
                MemoryPool_Map(self)
            }
            #[inline]
            pub unsafe fn FlushMappedRange(&self, offset: isize, size: root::size_t) {
                MemoryPool_FlushMappedRange(self, offset, size)
            }
            #[inline]
            pub unsafe fn InvalidateMappedRange(&self, offset: isize, size: root::size_t) {
                MemoryPool_InvalidateMappedRange(self, offset, size)
            }
            #[inline]
            pub unsafe fn GetBufferAddress(&self) -> root::nvn::BufferAddress {
                MemoryPool_GetBufferAddress(self)
            }
            #[inline]
            pub unsafe fn MapVirtual(
                &mut self,
                numRequests: ::std::os::raw::c_int,
                requests: *const root::nvn::MappingRequest,
            ) -> bool {
                MemoryPool_MapVirtual(self, numRequests, requests)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> root::size_t {
                MemoryPool_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetFlags(&self) -> root::nvn::MemoryPoolFlags {
                MemoryPool_GetFlags(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TexturePool {
            pub internal: [u8; 32usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@TexturePool@nvn@@QEAA_NPEBVMemoryPool@2@_JH@Z"]
            pub fn TexturePool_Initialize(
                this: *mut root::nvn::TexturePool,
                memoryPool: *const root::nvn::MemoryPool,
                offset: isize,
                numDescriptors: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@TexturePool@nvn@@QEAAXPEBD@Z"]
            pub fn TexturePool_SetDebugLabel(
                this: *mut root::nvn::TexturePool,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@TexturePool@nvn@@QEAAXXZ"]
            pub fn TexturePool_Finalize(this: *mut root::nvn::TexturePool);
        }
        extern "C" {
            #[link_name = "\u{1}?RegisterTexture@TexturePool@nvn@@QEBAXHPEBVTexture@2@PEBVTextureView@2@@Z"]
            pub fn TexturePool_RegisterTexture(
                this: *const root::nvn::TexturePool,
                id: ::std::os::raw::c_int,
                texture: *const root::nvn::Texture,
                view: *const root::nvn::TextureView,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?RegisterImage@TexturePool@nvn@@QEBAXHPEBVTexture@2@PEBVTextureView@2@@Z"]
            pub fn TexturePool_RegisterImage(
                this: *const root::nvn::TexturePool,
                id: ::std::os::raw::c_int,
                texture: *const root::nvn::Texture,
                view: *const root::nvn::TextureView,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryPool@TexturePool@nvn@@QEBAPEBVMemoryPool@2@XZ"]
            pub fn TexturePool_GetMemoryPool(
                this: *const root::nvn::TexturePool,
            ) -> *const root::nvn::MemoryPool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryOffset@TexturePool@nvn@@QEBA_JXZ"]
            pub fn TexturePool_GetMemoryOffset(this: *const root::nvn::TexturePool) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSize@TexturePool@nvn@@QEBAHXZ"]
            pub fn TexturePool_GetSize(
                this: *const root::nvn::TexturePool,
            ) -> ::std::os::raw::c_int;
        }
        impl TexturePool {
            #[inline]
            pub unsafe fn Initialize(
                &mut self,
                memoryPool: *const root::nvn::MemoryPool,
                offset: isize,
                numDescriptors: ::std::os::raw::c_int,
            ) -> bool {
                TexturePool_Initialize(self, memoryPool, offset, numDescriptors)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                TexturePool_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                TexturePool_Finalize(self)
            }
            #[inline]
            pub unsafe fn RegisterTexture(
                &self,
                id: ::std::os::raw::c_int,
                texture: *const root::nvn::Texture,
                view: *const root::nvn::TextureView,
            ) {
                TexturePool_RegisterTexture(self, id, texture, view)
            }
            #[inline]
            pub unsafe fn RegisterImage(
                &self,
                id: ::std::os::raw::c_int,
                texture: *const root::nvn::Texture,
                view: *const root::nvn::TextureView,
            ) {
                TexturePool_RegisterImage(self, id, texture, view)
            }
            #[inline]
            pub unsafe fn GetMemoryPool(&self) -> *const root::nvn::MemoryPool {
                TexturePool_GetMemoryPool(self)
            }
            #[inline]
            pub unsafe fn GetMemoryOffset(&self) -> isize {
                TexturePool_GetMemoryOffset(self)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> ::std::os::raw::c_int {
                TexturePool_GetSize(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SamplerPool {
            pub internal: [u8; 32usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@SamplerPool@nvn@@QEAA_NPEBVMemoryPool@2@_JH@Z"]
            pub fn SamplerPool_Initialize(
                this: *mut root::nvn::SamplerPool,
                memoryPool: *const root::nvn::MemoryPool,
                offset: isize,
                numDescriptors: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@SamplerPool@nvn@@QEAAXPEBD@Z"]
            pub fn SamplerPool_SetDebugLabel(
                this: *mut root::nvn::SamplerPool,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@SamplerPool@nvn@@QEAAXXZ"]
            pub fn SamplerPool_Finalize(this: *mut root::nvn::SamplerPool);
        }
        extern "C" {
            #[link_name = "\u{1}?RegisterSampler@SamplerPool@nvn@@QEBAXHPEBVSampler@2@@Z"]
            pub fn SamplerPool_RegisterSampler(
                this: *const root::nvn::SamplerPool,
                id: ::std::os::raw::c_int,
                sampler: *const root::nvn::Sampler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryPool@SamplerPool@nvn@@QEBAPEBVMemoryPool@2@XZ"]
            pub fn SamplerPool_GetMemoryPool(
                this: *const root::nvn::SamplerPool,
            ) -> *const root::nvn::MemoryPool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryOffset@SamplerPool@nvn@@QEBA_JXZ"]
            pub fn SamplerPool_GetMemoryOffset(this: *const root::nvn::SamplerPool) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSize@SamplerPool@nvn@@QEBAHXZ"]
            pub fn SamplerPool_GetSize(
                this: *const root::nvn::SamplerPool,
            ) -> ::std::os::raw::c_int;
        }
        impl SamplerPool {
            #[inline]
            pub unsafe fn Initialize(
                &mut self,
                memoryPool: *const root::nvn::MemoryPool,
                offset: isize,
                numDescriptors: ::std::os::raw::c_int,
            ) -> bool {
                SamplerPool_Initialize(self, memoryPool, offset, numDescriptors)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                SamplerPool_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                SamplerPool_Finalize(self)
            }
            #[inline]
            pub unsafe fn RegisterSampler(
                &self,
                id: ::std::os::raw::c_int,
                sampler: *const root::nvn::Sampler,
            ) {
                SamplerPool_RegisterSampler(self, id, sampler)
            }
            #[inline]
            pub unsafe fn GetMemoryPool(&self) -> *const root::nvn::MemoryPool {
                SamplerPool_GetMemoryPool(self)
            }
            #[inline]
            pub unsafe fn GetMemoryOffset(&self) -> isize {
                SamplerPool_GetMemoryOffset(self)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> ::std::os::raw::c_int {
                SamplerPool_GetSize(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BufferBuilder {
            pub internal: [u8; 64usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDevice@BufferBuilder@nvn@@QEAAAEAV12@PEAVDevice@2@@Z"]
            pub fn BufferBuilder_SetDevice(
                this: *mut root::nvn::BufferBuilder,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::BufferBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@BufferBuilder@nvn@@QEAAAEAV12@XZ"]
            pub fn BufferBuilder_SetDefaults(
                this: *mut root::nvn::BufferBuilder,
            ) -> *mut root::nvn::BufferBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStorage@BufferBuilder@nvn@@QEAAAEAV12@PEAVMemoryPool@2@_J_K@Z"]
            pub fn BufferBuilder_SetStorage(
                this: *mut root::nvn::BufferBuilder,
                pool: *mut root::nvn::MemoryPool,
                offset: isize,
                size: root::size_t,
            ) -> *mut root::nvn::BufferBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryPool@BufferBuilder@nvn@@QEBAPEAVMemoryPool@2@XZ"]
            pub fn BufferBuilder_GetMemoryPool(
                this: *const root::nvn::BufferBuilder,
            ) -> *mut root::nvn::MemoryPool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryOffset@BufferBuilder@nvn@@QEBA_JXZ"]
            pub fn BufferBuilder_GetMemoryOffset(this: *const root::nvn::BufferBuilder) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSize@BufferBuilder@nvn@@QEBA_KXZ"]
            pub fn BufferBuilder_GetSize(this: *const root::nvn::BufferBuilder) -> root::size_t;
        }
        impl BufferBuilder {
            #[inline]
            pub unsafe fn SetDevice(
                &mut self,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::BufferBuilder {
                BufferBuilder_SetDevice(self, device)
            }
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::BufferBuilder {
                BufferBuilder_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetStorage(
                &mut self,
                pool: *mut root::nvn::MemoryPool,
                offset: isize,
                size: root::size_t,
            ) -> *mut root::nvn::BufferBuilder {
                BufferBuilder_SetStorage(self, pool, offset, size)
            }
            #[inline]
            pub unsafe fn GetMemoryPool(&self) -> *mut root::nvn::MemoryPool {
                BufferBuilder_GetMemoryPool(self)
            }
            #[inline]
            pub unsafe fn GetMemoryOffset(&self) -> isize {
                BufferBuilder_GetMemoryOffset(self)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> root::size_t {
                BufferBuilder_GetSize(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Buffer {
            pub internal: [u8; 48usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@Buffer@nvn@@QEAA_NPEBVBufferBuilder@2@@Z"]
            pub fn Buffer_Initialize(
                this: *mut root::nvn::Buffer,
                builder: *const root::nvn::BufferBuilder,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@Buffer@nvn@@QEAAXPEBD@Z"]
            pub fn Buffer_SetDebugLabel(
                this: *mut root::nvn::Buffer,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@Buffer@nvn@@QEAAXXZ"]
            pub fn Buffer_Finalize(this: *mut root::nvn::Buffer);
        }
        extern "C" {
            #[link_name = "\u{1}?Map@Buffer@nvn@@QEBAPEAXXZ"]
            pub fn Buffer_Map(this: *const root::nvn::Buffer) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}?GetAddress@Buffer@nvn@@QEBA_KXZ"]
            pub fn Buffer_GetAddress(this: *const root::nvn::Buffer) -> root::nvn::BufferAddress;
        }
        extern "C" {
            #[link_name = "\u{1}?FlushMappedRange@Buffer@nvn@@QEBAX_J_K@Z"]
            pub fn Buffer_FlushMappedRange(
                this: *const root::nvn::Buffer,
                offset: isize,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?InvalidateMappedRange@Buffer@nvn@@QEBAX_J_K@Z"]
            pub fn Buffer_InvalidateMappedRange(
                this: *const root::nvn::Buffer,
                offset: isize,
                size: root::size_t,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryPool@Buffer@nvn@@QEBAPEAVMemoryPool@2@XZ"]
            pub fn Buffer_GetMemoryPool(
                this: *const root::nvn::Buffer,
            ) -> *mut root::nvn::MemoryPool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryOffset@Buffer@nvn@@QEBA_JXZ"]
            pub fn Buffer_GetMemoryOffset(this: *const root::nvn::Buffer) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSize@Buffer@nvn@@QEBA_KXZ"]
            pub fn Buffer_GetSize(this: *const root::nvn::Buffer) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDebugID@Buffer@nvn@@QEBA_KXZ"]
            pub fn Buffer_GetDebugID(this: *const root::nvn::Buffer) -> u64;
        }
        impl Buffer {
            #[inline]
            pub unsafe fn Initialize(&mut self, builder: *const root::nvn::BufferBuilder) -> bool {
                Buffer_Initialize(self, builder)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                Buffer_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                Buffer_Finalize(self)
            }
            #[inline]
            pub unsafe fn Map(&self) -> *mut ::std::os::raw::c_void {
                Buffer_Map(self)
            }
            #[inline]
            pub unsafe fn GetAddress(&self) -> root::nvn::BufferAddress {
                Buffer_GetAddress(self)
            }
            #[inline]
            pub unsafe fn FlushMappedRange(&self, offset: isize, size: root::size_t) {
                Buffer_FlushMappedRange(self, offset, size)
            }
            #[inline]
            pub unsafe fn InvalidateMappedRange(&self, offset: isize, size: root::size_t) {
                Buffer_InvalidateMappedRange(self, offset, size)
            }
            #[inline]
            pub unsafe fn GetMemoryPool(&self) -> *mut root::nvn::MemoryPool {
                Buffer_GetMemoryPool(self)
            }
            #[inline]
            pub unsafe fn GetMemoryOffset(&self) -> isize {
                Buffer_GetMemoryOffset(self)
            }
            #[inline]
            pub unsafe fn GetSize(&self) -> root::size_t {
                Buffer_GetSize(self)
            }
            #[inline]
            pub unsafe fn GetDebugID(&self) -> u64 {
                Buffer_GetDebugID(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Texture {
            pub internal: [u8; 192usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@Texture@nvn@@QEAA_NPEBVTextureBuilder@2@@Z"]
            pub fn Texture_Initialize(
                this: *mut root::nvn::Texture,
                builder: *const root::nvn::TextureBuilder,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetZCullStorageSize@Texture@nvn@@QEBA_KXZ"]
            pub fn Texture_GetZCullStorageSize(this: *const root::nvn::Texture) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@Texture@nvn@@QEAAXXZ"]
            pub fn Texture_Finalize(this: *mut root::nvn::Texture);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@Texture@nvn@@QEAAXPEBD@Z"]
            pub fn Texture_SetDebugLabel(
                this: *mut root::nvn::Texture,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetStorageClass@Texture@nvn@@QEBAHXZ"]
            pub fn Texture_GetStorageClass(
                this: *const root::nvn::Texture,
            ) -> root::nvn::StorageClass;
        }
        extern "C" {
            #[link_name = "\u{1}?GetViewOffset@Texture@nvn@@QEBA_JPEBVTextureView@2@@Z"]
            pub fn Texture_GetViewOffset(
                this: *const root::nvn::Texture,
                textureView: *const root::nvn::TextureView,
            ) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFlags@Texture@nvn@@QEBA?AUTextureFlags@2@XZ"]
            pub fn Texture_GetFlags(this: *const root::nvn::Texture) -> root::nvn::TextureFlags;
        }
        extern "C" {
            #[link_name = "\u{1}?GetTarget@Texture@nvn@@QEBA?AUTextureTarget@2@XZ"]
            pub fn Texture_GetTarget(this: *const root::nvn::Texture) -> root::nvn::TextureTarget;
        }
        extern "C" {
            #[link_name = "\u{1}?GetWidth@Texture@nvn@@QEBAHXZ"]
            pub fn Texture_GetWidth(this: *const root::nvn::Texture) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetHeight@Texture@nvn@@QEBAHXZ"]
            pub fn Texture_GetHeight(this: *const root::nvn::Texture) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepth@Texture@nvn@@QEBAHXZ"]
            pub fn Texture_GetDepth(this: *const root::nvn::Texture) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetLevels@Texture@nvn@@QEBAHXZ"]
            pub fn Texture_GetLevels(this: *const root::nvn::Texture) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFormat@Texture@nvn@@QEBA?AUFormat@2@XZ"]
            pub fn Texture_GetFormat(this: *const root::nvn::Texture) -> root::nvn::Format;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSamples@Texture@nvn@@QEBAHXZ"]
            pub fn Texture_GetSamples(this: *const root::nvn::Texture) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSwizzle@Texture@nvn@@QEBAXPEAUTextureSwizzle@2@000@Z"]
            pub fn Texture_GetSwizzle(
                this: *const root::nvn::Texture,
                r: *mut root::nvn::TextureSwizzle,
                g: *mut root::nvn::TextureSwizzle,
                b: *mut root::nvn::TextureSwizzle,
                a: *mut root::nvn::TextureSwizzle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepthStencilMode@Texture@nvn@@QEBA?AUTextureDepthStencilMode@2@XZ"]
            pub fn Texture_GetDepthStencilMode(
                this: *const root::nvn::Texture,
            ) -> root::nvn::TextureDepthStencilMode;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStride@Texture@nvn@@QEBA_JXZ"]
            pub fn Texture_GetStride(this: *const root::nvn::Texture) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetTextureAddress@Texture@nvn@@QEBA_KXZ"]
            pub fn Texture_GetTextureAddress(
                this: *const root::nvn::Texture,
            ) -> root::nvn::TextureAddress;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSparseTileLayout@Texture@nvn@@QEBAXPEAUTextureSparseTileLayout@2@@Z"]
            pub fn Texture_GetSparseTileLayout(
                this: *const root::nvn::Texture,
                layout: *mut root::nvn::TextureSparseTileLayout,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?WriteTexels@Texture@nvn@@QEBAXPEBVTextureView@2@PEBUCopyRegion@2@PEBX@Z"]
            pub fn Texture_WriteTexels(
                this: *const root::nvn::Texture,
                textureView: *const root::nvn::TextureView,
                region: *const root::nvn::CopyRegion,
                data: *const ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?ReadTexels@Texture@nvn@@QEBAXPEBVTextureView@2@PEBUCopyRegion@2@PEAX@Z"]
            pub fn Texture_ReadTexels(
                this: *const root::nvn::Texture,
                textureView: *const root::nvn::TextureView,
                region: *const root::nvn::CopyRegion,
                data: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?FlushTexels@Texture@nvn@@QEBAXPEBVTextureView@2@PEBUCopyRegion@2@@Z"]
            pub fn Texture_FlushTexels(
                this: *const root::nvn::Texture,
                textureView: *const root::nvn::TextureView,
                region: *const root::nvn::CopyRegion,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?InvalidateTexels@Texture@nvn@@QEBAXPEBVTextureView@2@PEBUCopyRegion@2@@Z"]
            pub fn Texture_InvalidateTexels(
                this: *const root::nvn::Texture,
                textureView: *const root::nvn::TextureView,
                region: *const root::nvn::CopyRegion,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryPool@Texture@nvn@@QEBAPEAVMemoryPool@2@XZ"]
            pub fn Texture_GetMemoryPool(
                this: *const root::nvn::Texture,
            ) -> *mut root::nvn::MemoryPool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryOffset@Texture@nvn@@QEBA_JXZ"]
            pub fn Texture_GetMemoryOffset(this: *const root::nvn::Texture) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStorageSize@Texture@nvn@@QEBAHXZ"]
            pub fn Texture_GetStorageSize(this: *const root::nvn::Texture)
                -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?Compare@Texture@nvn@@QEBA_NPEBV12@@Z"]
            pub fn Texture_Compare(
                this: *const root::nvn::Texture,
                otherTexture: *const root::nvn::Texture,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDebugID@Texture@nvn@@QEBA_KXZ"]
            pub fn Texture_GetDebugID(this: *const root::nvn::Texture) -> u64;
        }
        impl Texture {
            #[inline]
            pub unsafe fn Initialize(&mut self, builder: *const root::nvn::TextureBuilder) -> bool {
                Texture_Initialize(self, builder)
            }
            #[inline]
            pub unsafe fn GetZCullStorageSize(&self) -> root::size_t {
                Texture_GetZCullStorageSize(self)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                Texture_Finalize(self)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                Texture_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn GetStorageClass(&self) -> root::nvn::StorageClass {
                Texture_GetStorageClass(self)
            }
            #[inline]
            pub unsafe fn GetViewOffset(
                &self,
                textureView: *const root::nvn::TextureView,
            ) -> isize {
                Texture_GetViewOffset(self, textureView)
            }
            #[inline]
            pub unsafe fn GetFlags(&self) -> root::nvn::TextureFlags {
                Texture_GetFlags(self)
            }
            #[inline]
            pub unsafe fn GetTarget(&self) -> root::nvn::TextureTarget {
                Texture_GetTarget(self)
            }
            #[inline]
            pub unsafe fn GetWidth(&self) -> ::std::os::raw::c_int {
                Texture_GetWidth(self)
            }
            #[inline]
            pub unsafe fn GetHeight(&self) -> ::std::os::raw::c_int {
                Texture_GetHeight(self)
            }
            #[inline]
            pub unsafe fn GetDepth(&self) -> ::std::os::raw::c_int {
                Texture_GetDepth(self)
            }
            #[inline]
            pub unsafe fn GetLevels(&self) -> ::std::os::raw::c_int {
                Texture_GetLevels(self)
            }
            #[inline]
            pub unsafe fn GetFormat(&self) -> root::nvn::Format {
                Texture_GetFormat(self)
            }
            #[inline]
            pub unsafe fn GetSamples(&self) -> ::std::os::raw::c_int {
                Texture_GetSamples(self)
            }
            #[inline]
            pub unsafe fn GetSwizzle(
                &self,
                r: *mut root::nvn::TextureSwizzle,
                g: *mut root::nvn::TextureSwizzle,
                b: *mut root::nvn::TextureSwizzle,
                a: *mut root::nvn::TextureSwizzle,
            ) {
                Texture_GetSwizzle(self, r, g, b, a)
            }
            #[inline]
            pub unsafe fn GetDepthStencilMode(&self) -> root::nvn::TextureDepthStencilMode {
                Texture_GetDepthStencilMode(self)
            }
            #[inline]
            pub unsafe fn GetStride(&self) -> isize {
                Texture_GetStride(self)
            }
            #[inline]
            pub unsafe fn GetTextureAddress(&self) -> root::nvn::TextureAddress {
                Texture_GetTextureAddress(self)
            }
            #[inline]
            pub unsafe fn GetSparseTileLayout(
                &self,
                layout: *mut root::nvn::TextureSparseTileLayout,
            ) {
                Texture_GetSparseTileLayout(self, layout)
            }
            #[inline]
            pub unsafe fn WriteTexels(
                &self,
                textureView: *const root::nvn::TextureView,
                region: *const root::nvn::CopyRegion,
                data: *const ::std::os::raw::c_void,
            ) {
                Texture_WriteTexels(self, textureView, region, data)
            }
            #[inline]
            pub unsafe fn ReadTexels(
                &self,
                textureView: *const root::nvn::TextureView,
                region: *const root::nvn::CopyRegion,
                data: *mut ::std::os::raw::c_void,
            ) {
                Texture_ReadTexels(self, textureView, region, data)
            }
            #[inline]
            pub unsafe fn FlushTexels(
                &self,
                textureView: *const root::nvn::TextureView,
                region: *const root::nvn::CopyRegion,
            ) {
                Texture_FlushTexels(self, textureView, region)
            }
            #[inline]
            pub unsafe fn InvalidateTexels(
                &self,
                textureView: *const root::nvn::TextureView,
                region: *const root::nvn::CopyRegion,
            ) {
                Texture_InvalidateTexels(self, textureView, region)
            }
            #[inline]
            pub unsafe fn GetMemoryPool(&self) -> *mut root::nvn::MemoryPool {
                Texture_GetMemoryPool(self)
            }
            #[inline]
            pub unsafe fn GetMemoryOffset(&self) -> isize {
                Texture_GetMemoryOffset(self)
            }
            #[inline]
            pub unsafe fn GetStorageSize(&self) -> ::std::os::raw::c_int {
                Texture_GetStorageSize(self)
            }
            #[inline]
            pub unsafe fn Compare(&self, otherTexture: *const root::nvn::Texture) -> bool {
                Texture_Compare(self, otherTexture)
            }
            #[inline]
            pub unsafe fn GetDebugID(&self) -> u64 {
                Texture_GetDebugID(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TextureBuilder {
            pub internal: [u8; 128usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDevice@TextureBuilder@nvn@@QEAAAEAV12@PEAVDevice@2@@Z"]
            pub fn TextureBuilder_SetDevice(
                this: *mut root::nvn::TextureBuilder,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@TextureBuilder@nvn@@QEAAAEAV12@XZ"]
            pub fn TextureBuilder_SetDefaults(
                this: *mut root::nvn::TextureBuilder,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetFlags@TextureBuilder@nvn@@QEAAAEAV12@UTextureFlags@2@@Z"]
            pub fn TextureBuilder_SetFlags(
                this: *mut root::nvn::TextureBuilder,
                flags: root::nvn::TextureFlags,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetTarget@TextureBuilder@nvn@@QEAAAEAV12@UTextureTarget@2@@Z"]
            pub fn TextureBuilder_SetTarget(
                this: *mut root::nvn::TextureBuilder,
                target: root::nvn::TextureTarget,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetWidth@TextureBuilder@nvn@@QEAAAEAV12@H@Z"]
            pub fn TextureBuilder_SetWidth(
                this: *mut root::nvn::TextureBuilder,
                width: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetHeight@TextureBuilder@nvn@@QEAAAEAV12@H@Z"]
            pub fn TextureBuilder_SetHeight(
                this: *mut root::nvn::TextureBuilder,
                height: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepth@TextureBuilder@nvn@@QEAAAEAV12@H@Z"]
            pub fn TextureBuilder_SetDepth(
                this: *mut root::nvn::TextureBuilder,
                depth: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSize1D@TextureBuilder@nvn@@QEAAAEAV12@H@Z"]
            pub fn TextureBuilder_SetSize1D(
                this: *mut root::nvn::TextureBuilder,
                width: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSize2D@TextureBuilder@nvn@@QEAAAEAV12@HH@Z"]
            pub fn TextureBuilder_SetSize2D(
                this: *mut root::nvn::TextureBuilder,
                width: ::std::os::raw::c_int,
                height: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSize3D@TextureBuilder@nvn@@QEAAAEAV12@HHH@Z"]
            pub fn TextureBuilder_SetSize3D(
                this: *mut root::nvn::TextureBuilder,
                width: ::std::os::raw::c_int,
                height: ::std::os::raw::c_int,
                depth: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetLevels@TextureBuilder@nvn@@QEAAAEAV12@H@Z"]
            pub fn TextureBuilder_SetLevels(
                this: *mut root::nvn::TextureBuilder,
                numLevels: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetFormat@TextureBuilder@nvn@@QEAAAEAV12@UFormat@2@@Z"]
            pub fn TextureBuilder_SetFormat(
                this: *mut root::nvn::TextureBuilder,
                format: root::nvn::Format,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSamples@TextureBuilder@nvn@@QEAAAEAV12@H@Z"]
            pub fn TextureBuilder_SetSamples(
                this: *mut root::nvn::TextureBuilder,
                samples: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSwizzle@TextureBuilder@nvn@@QEAAAEAV12@UTextureSwizzle@2@000@Z"]
            pub fn TextureBuilder_SetSwizzle(
                this: *mut root::nvn::TextureBuilder,
                r: root::nvn::TextureSwizzle,
                g: root::nvn::TextureSwizzle,
                b: root::nvn::TextureSwizzle,
                a: root::nvn::TextureSwizzle,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthStencilMode@TextureBuilder@nvn@@QEAAAEAV12@UTextureDepthStencilMode@2@@Z"]
            pub fn TextureBuilder_SetDepthStencilMode(
                this: *mut root::nvn::TextureBuilder,
                mode: root::nvn::TextureDepthStencilMode,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStorageSize@TextureBuilder@nvn@@QEBA_KXZ"]
            pub fn TextureBuilder_GetStorageSize(
                this: *const root::nvn::TextureBuilder,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStorageAlignment@TextureBuilder@nvn@@QEBA_KXZ"]
            pub fn TextureBuilder_GetStorageAlignment(
                this: *const root::nvn::TextureBuilder,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStorage@TextureBuilder@nvn@@QEAAAEAV12@PEAVMemoryPool@2@_J@Z"]
            pub fn TextureBuilder_SetStorage(
                this: *mut root::nvn::TextureBuilder,
                pool: *mut root::nvn::MemoryPool,
                offset: isize,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetPackagedTextureData@TextureBuilder@nvn@@QEAAAEAV12@PEBX@Z"]
            pub fn TextureBuilder_SetPackagedTextureData(
                this: *mut root::nvn::TextureBuilder,
                data: *const ::std::os::raw::c_void,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetPackagedTextureLayout@TextureBuilder@nvn@@QEAAAEAV12@PEBUPackagedTextureLayout@2@@Z"]
            pub fn TextureBuilder_SetPackagedTextureLayout(
                this: *mut root::nvn::TextureBuilder,
                layout: *const root::nvn::PackagedTextureLayout,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetStride@TextureBuilder@nvn@@QEAAAEAV12@_J@Z"]
            pub fn TextureBuilder_SetStride(
                this: *mut root::nvn::TextureBuilder,
                stride: isize,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetGLTextureName@TextureBuilder@nvn@@QEAAAEAV12@I@Z"]
            pub fn TextureBuilder_SetGLTextureName(
                this: *mut root::nvn::TextureBuilder,
                name: u32,
            ) -> *mut root::nvn::TextureBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStorageClass@TextureBuilder@nvn@@QEBAHXZ"]
            pub fn TextureBuilder_GetStorageClass(
                this: *const root::nvn::TextureBuilder,
            ) -> root::nvn::StorageClass;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFlags@TextureBuilder@nvn@@QEBA?AUTextureFlags@2@XZ"]
            pub fn TextureBuilder_GetFlags(
                this: *const root::nvn::TextureBuilder,
            ) -> root::nvn::TextureFlags;
        }
        extern "C" {
            #[link_name = "\u{1}?GetTarget@TextureBuilder@nvn@@QEBA?AUTextureTarget@2@XZ"]
            pub fn TextureBuilder_GetTarget(
                this: *const root::nvn::TextureBuilder,
            ) -> root::nvn::TextureTarget;
        }
        extern "C" {
            #[link_name = "\u{1}?GetWidth@TextureBuilder@nvn@@QEBAHXZ"]
            pub fn TextureBuilder_GetWidth(
                this: *const root::nvn::TextureBuilder,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetHeight@TextureBuilder@nvn@@QEBAHXZ"]
            pub fn TextureBuilder_GetHeight(
                this: *const root::nvn::TextureBuilder,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepth@TextureBuilder@nvn@@QEBAHXZ"]
            pub fn TextureBuilder_GetDepth(
                this: *const root::nvn::TextureBuilder,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetLevels@TextureBuilder@nvn@@QEBAHXZ"]
            pub fn TextureBuilder_GetLevels(
                this: *const root::nvn::TextureBuilder,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFormat@TextureBuilder@nvn@@QEBA?AUFormat@2@XZ"]
            pub fn TextureBuilder_GetFormat(
                this: *const root::nvn::TextureBuilder,
            ) -> root::nvn::Format;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSamples@TextureBuilder@nvn@@QEBAHXZ"]
            pub fn TextureBuilder_GetSamples(
                this: *const root::nvn::TextureBuilder,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSwizzle@TextureBuilder@nvn@@QEBAXPEAUTextureSwizzle@2@000@Z"]
            pub fn TextureBuilder_GetSwizzle(
                this: *const root::nvn::TextureBuilder,
                r: *mut root::nvn::TextureSwizzle,
                g: *mut root::nvn::TextureSwizzle,
                b: *mut root::nvn::TextureSwizzle,
                a: *mut root::nvn::TextureSwizzle,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepthStencilMode@TextureBuilder@nvn@@QEBA?AUTextureDepthStencilMode@2@XZ"]
            pub fn TextureBuilder_GetDepthStencilMode(
                this: *const root::nvn::TextureBuilder,
            ) -> root::nvn::TextureDepthStencilMode;
        }
        extern "C" {
            #[link_name = "\u{1}?GetPackagedTextureData@TextureBuilder@nvn@@QEBAPEBXXZ"]
            pub fn TextureBuilder_GetPackagedTextureData(
                this: *const root::nvn::TextureBuilder,
            ) -> *const ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}?GetStride@TextureBuilder@nvn@@QEBA_JXZ"]
            pub fn TextureBuilder_GetStride(this: *const root::nvn::TextureBuilder) -> isize;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSparseTileLayout@TextureBuilder@nvn@@QEBAXPEAUTextureSparseTileLayout@2@@Z"]
            pub fn TextureBuilder_GetSparseTileLayout(
                this: *const root::nvn::TextureBuilder,
                layout: *mut root::nvn::TextureSparseTileLayout,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetGLTextureName@TextureBuilder@nvn@@QEBAIXZ"]
            pub fn TextureBuilder_GetGLTextureName(this: *const root::nvn::TextureBuilder) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}?GetZCullStorageSize@TextureBuilder@nvn@@QEBA_KXZ"]
            pub fn TextureBuilder_GetZCullStorageSize(
                this: *const root::nvn::TextureBuilder,
            ) -> root::size_t;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryPool@TextureBuilder@nvn@@QEBAPEAVMemoryPool@2@XZ"]
            pub fn TextureBuilder_GetMemoryPool(
                this: *const root::nvn::TextureBuilder,
            ) -> *mut root::nvn::MemoryPool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMemoryOffset@TextureBuilder@nvn@@QEBA_JXZ"]
            pub fn TextureBuilder_GetMemoryOffset(this: *const root::nvn::TextureBuilder) -> isize;
        }
        impl TextureBuilder {
            #[inline]
            pub unsafe fn SetDevice(
                &mut self,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetDevice(self, device)
            }
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetFlags(
                &mut self,
                flags: root::nvn::TextureFlags,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetFlags(self, flags)
            }
            #[inline]
            pub unsafe fn SetTarget(
                &mut self,
                target: root::nvn::TextureTarget,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetTarget(self, target)
            }
            #[inline]
            pub unsafe fn SetWidth(
                &mut self,
                width: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetWidth(self, width)
            }
            #[inline]
            pub unsafe fn SetHeight(
                &mut self,
                height: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetHeight(self, height)
            }
            #[inline]
            pub unsafe fn SetDepth(
                &mut self,
                depth: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetDepth(self, depth)
            }
            #[inline]
            pub unsafe fn SetSize1D(
                &mut self,
                width: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetSize1D(self, width)
            }
            #[inline]
            pub unsafe fn SetSize2D(
                &mut self,
                width: ::std::os::raw::c_int,
                height: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetSize2D(self, width, height)
            }
            #[inline]
            pub unsafe fn SetSize3D(
                &mut self,
                width: ::std::os::raw::c_int,
                height: ::std::os::raw::c_int,
                depth: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetSize3D(self, width, height, depth)
            }
            #[inline]
            pub unsafe fn SetLevels(
                &mut self,
                numLevels: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetLevels(self, numLevels)
            }
            #[inline]
            pub unsafe fn SetFormat(
                &mut self,
                format: root::nvn::Format,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetFormat(self, format)
            }
            #[inline]
            pub unsafe fn SetSamples(
                &mut self,
                samples: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetSamples(self, samples)
            }
            #[inline]
            pub unsafe fn SetSwizzle(
                &mut self,
                r: root::nvn::TextureSwizzle,
                g: root::nvn::TextureSwizzle,
                b: root::nvn::TextureSwizzle,
                a: root::nvn::TextureSwizzle,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetSwizzle(self, r, g, b, a)
            }
            #[inline]
            pub unsafe fn SetDepthStencilMode(
                &mut self,
                mode: root::nvn::TextureDepthStencilMode,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetDepthStencilMode(self, mode)
            }
            #[inline]
            pub unsafe fn GetStorageSize(&self) -> root::size_t {
                TextureBuilder_GetStorageSize(self)
            }
            #[inline]
            pub unsafe fn GetStorageAlignment(&self) -> root::size_t {
                TextureBuilder_GetStorageAlignment(self)
            }
            #[inline]
            pub unsafe fn SetStorage(
                &mut self,
                pool: *mut root::nvn::MemoryPool,
                offset: isize,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetStorage(self, pool, offset)
            }
            #[inline]
            pub unsafe fn SetPackagedTextureData(
                &mut self,
                data: *const ::std::os::raw::c_void,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetPackagedTextureData(self, data)
            }
            #[inline]
            pub unsafe fn SetPackagedTextureLayout(
                &mut self,
                layout: *const root::nvn::PackagedTextureLayout,
            ) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetPackagedTextureLayout(self, layout)
            }
            #[inline]
            pub unsafe fn SetStride(&mut self, stride: isize) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetStride(self, stride)
            }
            #[inline]
            pub unsafe fn SetGLTextureName(&mut self, name: u32) -> *mut root::nvn::TextureBuilder {
                TextureBuilder_SetGLTextureName(self, name)
            }
            #[inline]
            pub unsafe fn GetStorageClass(&self) -> root::nvn::StorageClass {
                TextureBuilder_GetStorageClass(self)
            }
            #[inline]
            pub unsafe fn GetFlags(&self) -> root::nvn::TextureFlags {
                TextureBuilder_GetFlags(self)
            }
            #[inline]
            pub unsafe fn GetTarget(&self) -> root::nvn::TextureTarget {
                TextureBuilder_GetTarget(self)
            }
            #[inline]
            pub unsafe fn GetWidth(&self) -> ::std::os::raw::c_int {
                TextureBuilder_GetWidth(self)
            }
            #[inline]
            pub unsafe fn GetHeight(&self) -> ::std::os::raw::c_int {
                TextureBuilder_GetHeight(self)
            }
            #[inline]
            pub unsafe fn GetDepth(&self) -> ::std::os::raw::c_int {
                TextureBuilder_GetDepth(self)
            }
            #[inline]
            pub unsafe fn GetLevels(&self) -> ::std::os::raw::c_int {
                TextureBuilder_GetLevels(self)
            }
            #[inline]
            pub unsafe fn GetFormat(&self) -> root::nvn::Format {
                TextureBuilder_GetFormat(self)
            }
            #[inline]
            pub unsafe fn GetSamples(&self) -> ::std::os::raw::c_int {
                TextureBuilder_GetSamples(self)
            }
            #[inline]
            pub unsafe fn GetSwizzle(
                &self,
                r: *mut root::nvn::TextureSwizzle,
                g: *mut root::nvn::TextureSwizzle,
                b: *mut root::nvn::TextureSwizzle,
                a: *mut root::nvn::TextureSwizzle,
            ) {
                TextureBuilder_GetSwizzle(self, r, g, b, a)
            }
            #[inline]
            pub unsafe fn GetDepthStencilMode(&self) -> root::nvn::TextureDepthStencilMode {
                TextureBuilder_GetDepthStencilMode(self)
            }
            #[inline]
            pub unsafe fn GetPackagedTextureData(&self) -> *const ::std::os::raw::c_void {
                TextureBuilder_GetPackagedTextureData(self)
            }
            #[inline]
            pub unsafe fn GetStride(&self) -> isize {
                TextureBuilder_GetStride(self)
            }
            #[inline]
            pub unsafe fn GetSparseTileLayout(
                &self,
                layout: *mut root::nvn::TextureSparseTileLayout,
            ) {
                TextureBuilder_GetSparseTileLayout(self, layout)
            }
            #[inline]
            pub unsafe fn GetGLTextureName(&self) -> u32 {
                TextureBuilder_GetGLTextureName(self)
            }
            #[inline]
            pub unsafe fn GetZCullStorageSize(&self) -> root::size_t {
                TextureBuilder_GetZCullStorageSize(self)
            }
            #[inline]
            pub unsafe fn GetMemoryPool(&self) -> *mut root::nvn::MemoryPool {
                TextureBuilder_GetMemoryPool(self)
            }
            #[inline]
            pub unsafe fn GetMemoryOffset(&self) -> isize {
                TextureBuilder_GetMemoryOffset(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TextureView {
            pub internal: [u8; 40usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@TextureView@nvn@@QEAAAEAV12@XZ"]
            pub fn TextureView_SetDefaults(
                this: *mut root::nvn::TextureView,
            ) -> *mut root::nvn::TextureView;
        }
        extern "C" {
            #[link_name = "\u{1}?SetLevels@TextureView@nvn@@QEAAAEAV12@HH@Z"]
            pub fn TextureView_SetLevels(
                this: *mut root::nvn::TextureView,
                baseLevel: ::std::os::raw::c_int,
                numLevels: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureView;
        }
        extern "C" {
            #[link_name = "\u{1}?SetLayers@TextureView@nvn@@QEAAAEAV12@HH@Z"]
            pub fn TextureView_SetLayers(
                this: *mut root::nvn::TextureView,
                minLayer: ::std::os::raw::c_int,
                numLayers: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureView;
        }
        extern "C" {
            #[link_name = "\u{1}?SetFormat@TextureView@nvn@@QEAAAEAV12@UFormat@2@@Z"]
            pub fn TextureView_SetFormat(
                this: *mut root::nvn::TextureView,
                format: root::nvn::Format,
            ) -> *mut root::nvn::TextureView;
        }
        extern "C" {
            #[link_name = "\u{1}?SetSwizzle@TextureView@nvn@@QEAAAEAV12@UTextureSwizzle@2@000@Z"]
            pub fn TextureView_SetSwizzle(
                this: *mut root::nvn::TextureView,
                r: root::nvn::TextureSwizzle,
                g: root::nvn::TextureSwizzle,
                b: root::nvn::TextureSwizzle,
                a: root::nvn::TextureSwizzle,
            ) -> *mut root::nvn::TextureView;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDepthStencilMode@TextureView@nvn@@QEAAAEAV12@UTextureDepthStencilMode@2@@Z"]
            pub fn TextureView_SetDepthStencilMode(
                this: *mut root::nvn::TextureView,
                mode: root::nvn::TextureDepthStencilMode,
            ) -> *mut root::nvn::TextureView;
        }
        extern "C" {
            #[link_name = "\u{1}?SetTarget@TextureView@nvn@@QEAAAEAV12@UTextureTarget@2@@Z"]
            pub fn TextureView_SetTarget(
                this: *mut root::nvn::TextureView,
                target: root::nvn::TextureTarget,
            ) -> *mut root::nvn::TextureView;
        }
        extern "C" {
            #[link_name = "\u{1}?GetLevels@TextureView@nvn@@QEBA_NPEAH0@Z"]
            pub fn TextureView_GetLevels(
                this: *const root::nvn::TextureView,
                baseLevel: *mut ::std::os::raw::c_int,
                numLevels: *mut ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetLayers@TextureView@nvn@@QEBA_NPEAH0@Z"]
            pub fn TextureView_GetLayers(
                this: *const root::nvn::TextureView,
                minLayer: *mut ::std::os::raw::c_int,
                numLayers: *mut ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetFormat@TextureView@nvn@@QEBA_NPEAUFormat@2@@Z"]
            pub fn TextureView_GetFormat(
                this: *const root::nvn::TextureView,
                format: *mut root::nvn::Format,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetSwizzle@TextureView@nvn@@QEBA_NPEAUTextureSwizzle@2@000@Z"]
            pub fn TextureView_GetSwizzle(
                this: *const root::nvn::TextureView,
                r: *mut root::nvn::TextureSwizzle,
                g: *mut root::nvn::TextureSwizzle,
                b: *mut root::nvn::TextureSwizzle,
                a: *mut root::nvn::TextureSwizzle,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDepthStencilMode@TextureView@nvn@@QEBA_NPEAUTextureDepthStencilMode@2@@Z"]
            pub fn TextureView_GetDepthStencilMode(
                this: *const root::nvn::TextureView,
                mode: *mut root::nvn::TextureDepthStencilMode,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetTarget@TextureView@nvn@@QEBA_NPEAUTextureTarget@2@@Z"]
            pub fn TextureView_GetTarget(
                this: *const root::nvn::TextureView,
                target: *mut root::nvn::TextureTarget,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?Compare@TextureView@nvn@@QEBA_NPEBV12@@Z"]
            pub fn TextureView_Compare(
                this: *const root::nvn::TextureView,
                otherView: *const root::nvn::TextureView,
            ) -> bool;
        }
        impl TextureView {
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::TextureView {
                TextureView_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetLevels(
                &mut self,
                baseLevel: ::std::os::raw::c_int,
                numLevels: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureView {
                TextureView_SetLevels(self, baseLevel, numLevels)
            }
            #[inline]
            pub unsafe fn SetLayers(
                &mut self,
                minLayer: ::std::os::raw::c_int,
                numLayers: ::std::os::raw::c_int,
            ) -> *mut root::nvn::TextureView {
                TextureView_SetLayers(self, minLayer, numLayers)
            }
            #[inline]
            pub unsafe fn SetFormat(
                &mut self,
                format: root::nvn::Format,
            ) -> *mut root::nvn::TextureView {
                TextureView_SetFormat(self, format)
            }
            #[inline]
            pub unsafe fn SetSwizzle(
                &mut self,
                r: root::nvn::TextureSwizzle,
                g: root::nvn::TextureSwizzle,
                b: root::nvn::TextureSwizzle,
                a: root::nvn::TextureSwizzle,
            ) -> *mut root::nvn::TextureView {
                TextureView_SetSwizzle(self, r, g, b, a)
            }
            #[inline]
            pub unsafe fn SetDepthStencilMode(
                &mut self,
                mode: root::nvn::TextureDepthStencilMode,
            ) -> *mut root::nvn::TextureView {
                TextureView_SetDepthStencilMode(self, mode)
            }
            #[inline]
            pub unsafe fn SetTarget(
                &mut self,
                target: root::nvn::TextureTarget,
            ) -> *mut root::nvn::TextureView {
                TextureView_SetTarget(self, target)
            }
            #[inline]
            pub unsafe fn GetLevels(
                &self,
                baseLevel: *mut ::std::os::raw::c_int,
                numLevels: *mut ::std::os::raw::c_int,
            ) -> bool {
                TextureView_GetLevels(self, baseLevel, numLevels)
            }
            #[inline]
            pub unsafe fn GetLayers(
                &self,
                minLayer: *mut ::std::os::raw::c_int,
                numLayers: *mut ::std::os::raw::c_int,
            ) -> bool {
                TextureView_GetLayers(self, minLayer, numLayers)
            }
            #[inline]
            pub unsafe fn GetFormat(&self, format: *mut root::nvn::Format) -> bool {
                TextureView_GetFormat(self, format)
            }
            #[inline]
            pub unsafe fn GetSwizzle(
                &self,
                r: *mut root::nvn::TextureSwizzle,
                g: *mut root::nvn::TextureSwizzle,
                b: *mut root::nvn::TextureSwizzle,
                a: *mut root::nvn::TextureSwizzle,
            ) -> bool {
                TextureView_GetSwizzle(self, r, g, b, a)
            }
            #[inline]
            pub unsafe fn GetDepthStencilMode(
                &self,
                mode: *mut root::nvn::TextureDepthStencilMode,
            ) -> bool {
                TextureView_GetDepthStencilMode(self, mode)
            }
            #[inline]
            pub unsafe fn GetTarget(&self, target: *mut root::nvn::TextureTarget) -> bool {
                TextureView_GetTarget(self, target)
            }
            #[inline]
            pub unsafe fn Compare(&self, otherView: *const root::nvn::TextureView) -> bool {
                TextureView_Compare(self, otherView)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SamplerBuilder {
            pub internal: [u8; 96usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDevice@SamplerBuilder@nvn@@QEAAAEAV12@PEAVDevice@2@@Z"]
            pub fn SamplerBuilder_SetDevice(
                this: *mut root::nvn::SamplerBuilder,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@SamplerBuilder@nvn@@QEAAAEAV12@XZ"]
            pub fn SamplerBuilder_SetDefaults(
                this: *mut root::nvn::SamplerBuilder,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetMinMagFilter@SamplerBuilder@nvn@@QEAAAEAV12@UMinFilter@2@UMagFilter@2@@Z"]
            pub fn SamplerBuilder_SetMinMagFilter(
                this: *mut root::nvn::SamplerBuilder,
                min: root::nvn::MinFilter,
                mag: root::nvn::MagFilter,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetWrapMode@SamplerBuilder@nvn@@QEAAAEAV12@UWrapMode@2@00@Z"]
            pub fn SamplerBuilder_SetWrapMode(
                this: *mut root::nvn::SamplerBuilder,
                s: root::nvn::WrapMode,
                t: root::nvn::WrapMode,
                r: root::nvn::WrapMode,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetLodClamp@SamplerBuilder@nvn@@QEAAAEAV12@MM@Z"]
            pub fn SamplerBuilder_SetLodClamp(
                this: *mut root::nvn::SamplerBuilder,
                min: f32,
                max: f32,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetLodBias@SamplerBuilder@nvn@@QEAAAEAV12@M@Z"]
            pub fn SamplerBuilder_SetLodBias(
                this: *mut root::nvn::SamplerBuilder,
                bias: f32,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetCompare@SamplerBuilder@nvn@@QEAAAEAV12@UCompareMode@2@UCompareFunc@2@@Z"]
            pub fn SamplerBuilder_SetCompare(
                this: *mut root::nvn::SamplerBuilder,
                mode: root::nvn::CompareMode,
                func: root::nvn::CompareFunc,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetBorderColor@SamplerBuilder@nvn@@QEAAAEAV12@PEBM@Z"]
            pub fn SamplerBuilder_SetBorderColor(
                this: *mut root::nvn::SamplerBuilder,
                borderColor: *const f32,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetBorderColori@SamplerBuilder@nvn@@QEAAAEAV12@PEBH@Z"]
            pub fn SamplerBuilder_SetBorderColori(
                this: *mut root::nvn::SamplerBuilder,
                borderColor: *const ::std::os::raw::c_int,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetBorderColorui@SamplerBuilder@nvn@@QEAAAEAV12@PEBI@Z"]
            pub fn SamplerBuilder_SetBorderColorui(
                this: *mut root::nvn::SamplerBuilder,
                borderColor: *const u32,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetMaxAnisotropy@SamplerBuilder@nvn@@QEAAAEAV12@M@Z"]
            pub fn SamplerBuilder_SetMaxAnisotropy(
                this: *mut root::nvn::SamplerBuilder,
                maxAniso: f32,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetReductionFilter@SamplerBuilder@nvn@@QEAAAEAV12@USamplerReduction@2@@Z"]
            pub fn SamplerBuilder_SetReductionFilter(
                this: *mut root::nvn::SamplerBuilder,
                filter: root::nvn::SamplerReduction,
            ) -> *mut root::nvn::SamplerBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?GetMinMagFilter@SamplerBuilder@nvn@@QEBAXPEAUMinFilter@2@PEAUMagFilter@2@@Z"]
            pub fn SamplerBuilder_GetMinMagFilter(
                this: *const root::nvn::SamplerBuilder,
                min: *mut root::nvn::MinFilter,
                mag: *mut root::nvn::MagFilter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetWrapMode@SamplerBuilder@nvn@@QEBAXPEAUWrapMode@2@00@Z"]
            pub fn SamplerBuilder_GetWrapMode(
                this: *const root::nvn::SamplerBuilder,
                s: *mut root::nvn::WrapMode,
                t: *mut root::nvn::WrapMode,
                r: *mut root::nvn::WrapMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetLodClamp@SamplerBuilder@nvn@@QEBAXPEAM0@Z"]
            pub fn SamplerBuilder_GetLodClamp(
                this: *const root::nvn::SamplerBuilder,
                min: *mut f32,
                max: *mut f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetLodBias@SamplerBuilder@nvn@@QEBAMXZ"]
            pub fn SamplerBuilder_GetLodBias(this: *const root::nvn::SamplerBuilder) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCompare@SamplerBuilder@nvn@@QEBAXPEAUCompareMode@2@PEAUCompareFunc@2@@Z"]
            pub fn SamplerBuilder_GetCompare(
                this: *const root::nvn::SamplerBuilder,
                mode: *mut root::nvn::CompareMode,
                func: *mut root::nvn::CompareFunc,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetBorderColor@SamplerBuilder@nvn@@QEBAXPEAM@Z"]
            pub fn SamplerBuilder_GetBorderColor(
                this: *const root::nvn::SamplerBuilder,
                borderColor: *mut f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetBorderColori@SamplerBuilder@nvn@@QEBAXPEAH@Z"]
            pub fn SamplerBuilder_GetBorderColori(
                this: *const root::nvn::SamplerBuilder,
                borderColor: *mut ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetBorderColorui@SamplerBuilder@nvn@@QEBAXPEAI@Z"]
            pub fn SamplerBuilder_GetBorderColorui(
                this: *const root::nvn::SamplerBuilder,
                borderColor: *mut u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetMaxAnisotropy@SamplerBuilder@nvn@@QEBAMXZ"]
            pub fn SamplerBuilder_GetMaxAnisotropy(this: *const root::nvn::SamplerBuilder) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}?GetReductionFilter@SamplerBuilder@nvn@@QEBA?AUSamplerReduction@2@XZ"]
            pub fn SamplerBuilder_GetReductionFilter(
                this: *const root::nvn::SamplerBuilder,
            ) -> root::nvn::SamplerReduction;
        }
        impl SamplerBuilder {
            #[inline]
            pub unsafe fn SetDevice(
                &mut self,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetDevice(self, device)
            }
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetMinMagFilter(
                &mut self,
                min: root::nvn::MinFilter,
                mag: root::nvn::MagFilter,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetMinMagFilter(self, min, mag)
            }
            #[inline]
            pub unsafe fn SetWrapMode(
                &mut self,
                s: root::nvn::WrapMode,
                t: root::nvn::WrapMode,
                r: root::nvn::WrapMode,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetWrapMode(self, s, t, r)
            }
            #[inline]
            pub unsafe fn SetLodClamp(
                &mut self,
                min: f32,
                max: f32,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetLodClamp(self, min, max)
            }
            #[inline]
            pub unsafe fn SetLodBias(&mut self, bias: f32) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetLodBias(self, bias)
            }
            #[inline]
            pub unsafe fn SetCompare(
                &mut self,
                mode: root::nvn::CompareMode,
                func: root::nvn::CompareFunc,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetCompare(self, mode, func)
            }
            #[inline]
            pub unsafe fn SetBorderColor(
                &mut self,
                borderColor: *const f32,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetBorderColor(self, borderColor)
            }
            #[inline]
            pub unsafe fn SetBorderColori(
                &mut self,
                borderColor: *const ::std::os::raw::c_int,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetBorderColori(self, borderColor)
            }
            #[inline]
            pub unsafe fn SetBorderColorui(
                &mut self,
                borderColor: *const u32,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetBorderColorui(self, borderColor)
            }
            #[inline]
            pub unsafe fn SetMaxAnisotropy(
                &mut self,
                maxAniso: f32,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetMaxAnisotropy(self, maxAniso)
            }
            #[inline]
            pub unsafe fn SetReductionFilter(
                &mut self,
                filter: root::nvn::SamplerReduction,
            ) -> *mut root::nvn::SamplerBuilder {
                SamplerBuilder_SetReductionFilter(self, filter)
            }
            #[inline]
            pub unsafe fn GetMinMagFilter(
                &self,
                min: *mut root::nvn::MinFilter,
                mag: *mut root::nvn::MagFilter,
            ) {
                SamplerBuilder_GetMinMagFilter(self, min, mag)
            }
            #[inline]
            pub unsafe fn GetWrapMode(
                &self,
                s: *mut root::nvn::WrapMode,
                t: *mut root::nvn::WrapMode,
                r: *mut root::nvn::WrapMode,
            ) {
                SamplerBuilder_GetWrapMode(self, s, t, r)
            }
            #[inline]
            pub unsafe fn GetLodClamp(&self, min: *mut f32, max: *mut f32) {
                SamplerBuilder_GetLodClamp(self, min, max)
            }
            #[inline]
            pub unsafe fn GetLodBias(&self) -> f32 {
                SamplerBuilder_GetLodBias(self)
            }
            #[inline]
            pub unsafe fn GetCompare(
                &self,
                mode: *mut root::nvn::CompareMode,
                func: *mut root::nvn::CompareFunc,
            ) {
                SamplerBuilder_GetCompare(self, mode, func)
            }
            #[inline]
            pub unsafe fn GetBorderColor(&self, borderColor: *mut f32) {
                SamplerBuilder_GetBorderColor(self, borderColor)
            }
            #[inline]
            pub unsafe fn GetBorderColori(&self, borderColor: *mut ::std::os::raw::c_int) {
                SamplerBuilder_GetBorderColori(self, borderColor)
            }
            #[inline]
            pub unsafe fn GetBorderColorui(&self, borderColor: *mut u32) {
                SamplerBuilder_GetBorderColorui(self, borderColor)
            }
            #[inline]
            pub unsafe fn GetMaxAnisotropy(&self) -> f32 {
                SamplerBuilder_GetMaxAnisotropy(self)
            }
            #[inline]
            pub unsafe fn GetReductionFilter(&self) -> root::nvn::SamplerReduction {
                SamplerBuilder_GetReductionFilter(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Sampler {
            pub internal: [u8; 96usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@Sampler@nvn@@QEAA_NPEBVSamplerBuilder@2@@Z"]
            pub fn Sampler_Initialize(
                this: *mut root::nvn::Sampler,
                builder: *const root::nvn::SamplerBuilder,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@Sampler@nvn@@QEAAXXZ"]
            pub fn Sampler_Finalize(this: *mut root::nvn::Sampler);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@Sampler@nvn@@QEAAXPEBD@Z"]
            pub fn Sampler_SetDebugLabel(
                this: *mut root::nvn::Sampler,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetMinMagFilter@Sampler@nvn@@QEBAXPEAUMinFilter@2@PEAUMagFilter@2@@Z"]
            pub fn Sampler_GetMinMagFilter(
                this: *const root::nvn::Sampler,
                min: *mut root::nvn::MinFilter,
                mag: *mut root::nvn::MagFilter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetWrapMode@Sampler@nvn@@QEBAXPEAUWrapMode@2@00@Z"]
            pub fn Sampler_GetWrapMode(
                this: *const root::nvn::Sampler,
                s: *mut root::nvn::WrapMode,
                t: *mut root::nvn::WrapMode,
                r: *mut root::nvn::WrapMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetLodClamp@Sampler@nvn@@QEBAXPEAM0@Z"]
            pub fn Sampler_GetLodClamp(
                this: *const root::nvn::Sampler,
                min: *mut f32,
                max: *mut f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetLodBias@Sampler@nvn@@QEBAMXZ"]
            pub fn Sampler_GetLodBias(this: *const root::nvn::Sampler) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}?GetCompare@Sampler@nvn@@QEBAXPEAUCompareMode@2@PEAUCompareFunc@2@@Z"]
            pub fn Sampler_GetCompare(
                this: *const root::nvn::Sampler,
                mode: *mut root::nvn::CompareMode,
                func: *mut root::nvn::CompareFunc,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetBorderColor@Sampler@nvn@@QEBAXPEAM@Z"]
            pub fn Sampler_GetBorderColor(this: *const root::nvn::Sampler, borderColor: *mut f32);
        }
        extern "C" {
            #[link_name = "\u{1}?GetBorderColori@Sampler@nvn@@QEBAXPEAH@Z"]
            pub fn Sampler_GetBorderColori(
                this: *const root::nvn::Sampler,
                borderColor: *mut ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?GetBorderColorui@Sampler@nvn@@QEBAXPEAI@Z"]
            pub fn Sampler_GetBorderColorui(this: *const root::nvn::Sampler, borderColor: *mut u32);
        }
        extern "C" {
            #[link_name = "\u{1}?GetMaxAnisotropy@Sampler@nvn@@QEBAMXZ"]
            pub fn Sampler_GetMaxAnisotropy(this: *const root::nvn::Sampler) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}?GetReductionFilter@Sampler@nvn@@QEBA?AUSamplerReduction@2@XZ"]
            pub fn Sampler_GetReductionFilter(
                this: *const root::nvn::Sampler,
            ) -> root::nvn::SamplerReduction;
        }
        extern "C" {
            #[link_name = "\u{1}?Compare@Sampler@nvn@@QEBA_NPEBV12@@Z"]
            pub fn Sampler_Compare(
                this: *const root::nvn::Sampler,
                otherSampler: *const root::nvn::Sampler,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?GetDebugID@Sampler@nvn@@QEBA_KXZ"]
            pub fn Sampler_GetDebugID(this: *const root::nvn::Sampler) -> u64;
        }
        impl Sampler {
            #[inline]
            pub unsafe fn Initialize(&mut self, builder: *const root::nvn::SamplerBuilder) -> bool {
                Sampler_Initialize(self, builder)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                Sampler_Finalize(self)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                Sampler_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn GetMinMagFilter(
                &self,
                min: *mut root::nvn::MinFilter,
                mag: *mut root::nvn::MagFilter,
            ) {
                Sampler_GetMinMagFilter(self, min, mag)
            }
            #[inline]
            pub unsafe fn GetWrapMode(
                &self,
                s: *mut root::nvn::WrapMode,
                t: *mut root::nvn::WrapMode,
                r: *mut root::nvn::WrapMode,
            ) {
                Sampler_GetWrapMode(self, s, t, r)
            }
            #[inline]
            pub unsafe fn GetLodClamp(&self, min: *mut f32, max: *mut f32) {
                Sampler_GetLodClamp(self, min, max)
            }
            #[inline]
            pub unsafe fn GetLodBias(&self) -> f32 {
                Sampler_GetLodBias(self)
            }
            #[inline]
            pub unsafe fn GetCompare(
                &self,
                mode: *mut root::nvn::CompareMode,
                func: *mut root::nvn::CompareFunc,
            ) {
                Sampler_GetCompare(self, mode, func)
            }
            #[inline]
            pub unsafe fn GetBorderColor(&self, borderColor: *mut f32) {
                Sampler_GetBorderColor(self, borderColor)
            }
            #[inline]
            pub unsafe fn GetBorderColori(&self, borderColor: *mut ::std::os::raw::c_int) {
                Sampler_GetBorderColori(self, borderColor)
            }
            #[inline]
            pub unsafe fn GetBorderColorui(&self, borderColor: *mut u32) {
                Sampler_GetBorderColorui(self, borderColor)
            }
            #[inline]
            pub unsafe fn GetMaxAnisotropy(&self) -> f32 {
                Sampler_GetMaxAnisotropy(self)
            }
            #[inline]
            pub unsafe fn GetReductionFilter(&self) -> root::nvn::SamplerReduction {
                Sampler_GetReductionFilter(self)
            }
            #[inline]
            pub unsafe fn Compare(&self, otherSampler: *const root::nvn::Sampler) -> bool {
                Sampler_Compare(self, otherSampler)
            }
            #[inline]
            pub unsafe fn GetDebugID(&self) -> u64 {
                Sampler_GetDebugID(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Sync {
            pub internal: [u8; 64usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@Sync@nvn@@QEAA_NPEAVDevice@2@@Z"]
            pub fn Sync_Initialize(
                this: *mut root::nvn::Sync,
                device: *mut root::nvn::Device,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@Sync@nvn@@QEAAXXZ"]
            pub fn Sync_Finalize(this: *mut root::nvn::Sync);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@Sync@nvn@@QEAAXPEBD@Z"]
            pub fn Sync_SetDebugLabel(
                this: *mut root::nvn::Sync,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?Wait@Sync@nvn@@QEBA?AUSyncWaitResult@2@_K@Z"]
            pub fn Sync_Wait(
                this: *const root::nvn::Sync,
                timeoutNs: u64,
            ) -> root::nvn::SyncWaitResult;
        }
        impl Sync {
            #[inline]
            pub unsafe fn Initialize(&mut self, device: *mut root::nvn::Device) -> bool {
                Sync_Initialize(self, device)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                Sync_Finalize(self)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                Sync_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn Wait(&self, timeoutNs: u64) -> root::nvn::SyncWaitResult {
                Sync_Wait(self, timeoutNs)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Window {
            pub internal: [u8; 384usize],
        }
        extern "C" {
            #[link_name = "\u{1}?Initialize@Window@nvn@@QEAA_NPEBVWindowBuilder@2@@Z"]
            pub fn Window_Initialize(
                this: *mut root::nvn::Window,
                builder: *const root::nvn::WindowBuilder,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}?Finalize@Window@nvn@@QEAAXXZ"]
            pub fn Window_Finalize(this: *mut root::nvn::Window);
        }
        extern "C" {
            #[link_name = "\u{1}?SetDebugLabel@Window@nvn@@QEAAXPEBD@Z"]
            pub fn Window_SetDebugLabel(
                this: *mut root::nvn::Window,
                label: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?AcquireTexture@Window@nvn@@QEAA?AUWindowAcquireTextureResult@2@PEAVSync@2@PEAH@Z"]
            pub fn Window_AcquireTexture(
                this: *mut root::nvn::Window,
                textureAvailableSync: *mut root::nvn::Sync,
                textureIndex: *mut ::std::os::raw::c_int,
            ) -> root::nvn::WindowAcquireTextureResult;
        }
        extern "C" {
            #[link_name = "\u{1}?GetNativeWindow@Window@nvn@@QEBAPEAXXZ"]
            pub fn Window_GetNativeWindow(
                this: *const root::nvn::Window,
            ) -> root::nvn::NativeWindow;
        }
        extern "C" {
            #[link_name = "\u{1}?GetPresentInterval@Window@nvn@@QEBAHXZ"]
            pub fn Window_GetPresentInterval(
                this: *const root::nvn::Window,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}?SetPresentInterval@Window@nvn@@QEAAXH@Z"]
            pub fn Window_SetPresentInterval(
                this: *mut root::nvn::Window,
                presentInterval: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            #[link_name = "\u{1}?SetCrop@Window@nvn@@QEAAXHHHH@Z"]
            pub fn Window_SetCrop(
                this: *mut root::nvn::Window,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
            );
        }
        impl Window {
            #[inline]
            pub unsafe fn Initialize(&mut self, builder: *const root::nvn::WindowBuilder) -> bool {
                Window_Initialize(self, builder)
            }
            #[inline]
            pub unsafe fn Finalize(&mut self) {
                Window_Finalize(self)
            }
            #[inline]
            pub unsafe fn SetDebugLabel(&mut self, label: *const ::std::os::raw::c_char) {
                Window_SetDebugLabel(self, label)
            }
            #[inline]
            pub unsafe fn AcquireTexture(
                &mut self,
                textureAvailableSync: *mut root::nvn::Sync,
                textureIndex: *mut ::std::os::raw::c_int,
            ) -> root::nvn::WindowAcquireTextureResult {
                Window_AcquireTexture(self, textureAvailableSync, textureIndex)
            }
            #[inline]
            pub unsafe fn GetNativeWindow(&self) -> root::nvn::NativeWindow {
                Window_GetNativeWindow(self)
            }
            #[inline]
            pub unsafe fn GetPresentInterval(&self) -> ::std::os::raw::c_int {
                Window_GetPresentInterval(self)
            }
            #[inline]
            pub unsafe fn SetPresentInterval(&mut self, presentInterval: ::std::os::raw::c_int) {
                Window_SetPresentInterval(self, presentInterval)
            }
            #[inline]
            pub unsafe fn SetCrop(
                &mut self,
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
            ) {
                Window_SetCrop(self, x, y, w, h)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WindowBuilder {
            pub internal: [u8; 64usize],
        }
        extern "C" {
            #[link_name = "\u{1}?SetDevice@WindowBuilder@nvn@@QEAAAEAV12@PEAVDevice@2@@Z"]
            pub fn WindowBuilder_SetDevice(
                this: *mut root::nvn::WindowBuilder,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::WindowBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetDefaults@WindowBuilder@nvn@@QEAAAEAV12@XZ"]
            pub fn WindowBuilder_SetDefaults(
                this: *mut root::nvn::WindowBuilder,
            ) -> *mut root::nvn::WindowBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetNativeWindow@WindowBuilder@nvn@@QEAAAEAV12@PEAX@Z"]
            pub fn WindowBuilder_SetNativeWindow(
                this: *mut root::nvn::WindowBuilder,
                nativeWindow: root::nvn::NativeWindow,
            ) -> *mut root::nvn::WindowBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetTextures@WindowBuilder@nvn@@QEAAAEAV12@HPEBQEAVTexture@2@@Z"]
            pub fn WindowBuilder_SetTextures(
                this: *mut root::nvn::WindowBuilder,
                numTextures: ::std::os::raw::c_int,
                textures: *const *mut root::nvn::Texture,
            ) -> *mut root::nvn::WindowBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?SetPresentInterval@WindowBuilder@nvn@@QEAAAEAV12@H@Z"]
            pub fn WindowBuilder_SetPresentInterval(
                this: *mut root::nvn::WindowBuilder,
                presentInterval: ::std::os::raw::c_int,
            ) -> *mut root::nvn::WindowBuilder;
        }
        extern "C" {
            #[link_name = "\u{1}?GetNativeWindow@WindowBuilder@nvn@@QEBAPEAXXZ"]
            pub fn WindowBuilder_GetNativeWindow(
                this: *const root::nvn::WindowBuilder,
            ) -> root::nvn::NativeWindow;
        }
        extern "C" {
            #[link_name = "\u{1}?GetPresentInterval@WindowBuilder@nvn@@QEBAHXZ"]
            pub fn WindowBuilder_GetPresentInterval(
                this: *const root::nvn::WindowBuilder,
            ) -> ::std::os::raw::c_int;
        }
        impl WindowBuilder {
            #[inline]
            pub unsafe fn SetDevice(
                &mut self,
                device: *mut root::nvn::Device,
            ) -> *mut root::nvn::WindowBuilder {
                WindowBuilder_SetDevice(self, device)
            }
            #[inline]
            pub unsafe fn SetDefaults(&mut self) -> *mut root::nvn::WindowBuilder {
                WindowBuilder_SetDefaults(self)
            }
            #[inline]
            pub unsafe fn SetNativeWindow(
                &mut self,
                nativeWindow: root::nvn::NativeWindow,
            ) -> *mut root::nvn::WindowBuilder {
                WindowBuilder_SetNativeWindow(self, nativeWindow)
            }
            #[inline]
            pub unsafe fn SetTextures(
                &mut self,
                numTextures: ::std::os::raw::c_int,
                textures: *const *mut root::nvn::Texture,
            ) -> *mut root::nvn::WindowBuilder {
                WindowBuilder_SetTextures(self, numTextures, textures)
            }
            #[inline]
            pub unsafe fn SetPresentInterval(
                &mut self,
                presentInterval: ::std::os::raw::c_int,
            ) -> *mut root::nvn::WindowBuilder {
                WindowBuilder_SetPresentInterval(self, presentInterval)
            }
            #[inline]
            pub unsafe fn GetNativeWindow(&self) -> root::nvn::NativeWindow {
                WindowBuilder_GetNativeWindow(self)
            }
            #[inline]
            pub unsafe fn GetPresentInterval(&self) -> ::std::os::raw::c_int {
                WindowBuilder_GetPresentInterval(self)
            }
        }
    }
}
